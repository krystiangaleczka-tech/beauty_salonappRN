{"dependencies":[{"name":"./_arrayPush","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":16,"index":16},"end":{"line":1,"column":39,"index":39}}],"key":"lx8gghVrH9AMAT1vhix5OXJCwsc=","exportNames":["*"]}},{"name":"./_isFlattenable","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":20,"index":61},"end":{"line":2,"column":47,"index":88}}],"key":"2JL1HoU+FJzNGX8lB2WpcPVnVBQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var arrayPush = require(_dependencyMap[0], \"./_arrayPush\"),\n    isFlattenable = require(_dependencyMap[1], \"./_isFlattenable\");\n\n  /**\n   * The base implementation of `_.flatten` with support for restricting flattening.\n   *\n   * @private\n   * @param {Array} array The array to flatten.\n   * @param {number} depth The maximum recursion depth.\n   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n   * @param {Array} [result=[]] The initial result value.\n   * @returns {Array} Returns the new flattened array.\n   */\n  function baseFlatten(array, depth, predicate, isStrict, result) {\n    var index = -1,\n      length = array.length;\n    predicate || (predicate = isFlattenable);\n    result || (result = []);\n    while (++index < length) {\n      var value = array[index];\n      if (depth > 0 && predicate(value)) {\n        if (depth > 1) {\n          // Recursively flatten arrays (susceptible to call stack limits).\n          baseFlatten(value, depth - 1, predicate, isStrict, result);\n        } else {\n          arrayPush(result, value);\n        }\n      } else if (!isStrict) {\n        result[result.length] = value;\n      }\n    }\n    return result;\n  }\n  module.exports = baseFlatten;\n});","lineCount":37,"map":[[2,2,1,0],[2,6,1,4,"arrayPush"],[2,15,1,13],[2,18,1,16,"require"],[2,25,1,23],[2,26,1,23,"_dependencyMap"],[2,40,1,23],[2,59,1,38],[2,60,1,39],[3,4,2,4,"isFlattenable"],[3,17,2,17],[3,20,2,20,"require"],[3,27,2,27],[3,28,2,27,"_dependencyMap"],[3,42,2,27],[3,65,2,46],[3,66,2,47],[5,2,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,2,15,0],[16,11,15,9,"baseFlatten"],[16,22,15,20,"baseFlatten"],[16,23,15,21,"array"],[16,28,15,26],[16,30,15,28,"depth"],[16,35,15,33],[16,37,15,35,"predicate"],[16,46,15,44],[16,48,15,46,"isStrict"],[16,56,15,54],[16,58,15,56,"result"],[16,64,15,62],[16,66,15,64],[17,4,16,2],[17,8,16,6,"index"],[17,13,16,11],[17,16,16,14],[17,17,16,15],[17,18,16,16],[18,6,17,6,"length"],[18,12,17,12],[18,15,17,15,"array"],[18,20,17,20],[18,21,17,21,"length"],[18,27,17,27],[19,4,19,2,"predicate"],[19,13,19,11],[19,18,19,16,"predicate"],[19,27,19,25],[19,30,19,28,"isFlattenable"],[19,43,19,41],[19,44,19,42],[20,4,20,2,"result"],[20,10,20,8],[20,15,20,13,"result"],[20,21,20,19],[20,24,20,22],[20,26,20,24],[20,27,20,25],[21,4,22,2],[21,11,22,9],[21,13,22,11,"index"],[21,18,22,16],[21,21,22,19,"length"],[21,27,22,25],[21,29,22,27],[22,6,23,4],[22,10,23,8,"value"],[22,15,23,13],[22,18,23,16,"array"],[22,23,23,21],[22,24,23,22,"index"],[22,29,23,27],[22,30,23,28],[23,6,24,4],[23,10,24,8,"depth"],[23,15,24,13],[23,18,24,16],[23,19,24,17],[23,23,24,21,"predicate"],[23,32,24,30],[23,33,24,31,"value"],[23,38,24,36],[23,39,24,37],[23,41,24,39],[24,8,25,6],[24,12,25,10,"depth"],[24,17,25,15],[24,20,25,18],[24,21,25,19],[24,23,25,21],[25,10,26,8],[26,10,27,8,"baseFlatten"],[26,21,27,19],[26,22,27,20,"value"],[26,27,27,25],[26,29,27,27,"depth"],[26,34,27,32],[26,37,27,35],[26,38,27,36],[26,40,27,38,"predicate"],[26,49,27,47],[26,51,27,49,"isStrict"],[26,59,27,57],[26,61,27,59,"result"],[26,67,27,65],[26,68,27,66],[27,8,28,6],[27,9,28,7],[27,15,28,13],[28,10,29,8,"arrayPush"],[28,19,29,17],[28,20,29,18,"result"],[28,26,29,24],[28,28,29,26,"value"],[28,33,29,31],[28,34,29,32],[29,8,30,6],[30,6,31,4],[30,7,31,5],[30,13,31,11],[30,17,31,15],[30,18,31,16,"isStrict"],[30,26,31,24],[30,28,31,26],[31,8,32,6,"result"],[31,14,32,12],[31,15,32,13,"result"],[31,21,32,19],[31,22,32,20,"length"],[31,28,32,26],[31,29,32,27],[31,32,32,30,"value"],[31,37,32,35],[32,6,33,4],[33,4,34,2],[34,4,35,2],[34,11,35,9,"result"],[34,17,35,15],[35,2,36,0],[36,2,38,0,"module"],[36,8,38,6],[36,9,38,7,"exports"],[36,16,38,14],[36,19,38,17,"baseFlatten"],[36,30,38,28],[37,0,38,29],[37,3]],"functionMap":{"names":["<global>","baseFlatten"],"mappings":"AAA;ACc;CDqB"}},"type":"js/module"}]}