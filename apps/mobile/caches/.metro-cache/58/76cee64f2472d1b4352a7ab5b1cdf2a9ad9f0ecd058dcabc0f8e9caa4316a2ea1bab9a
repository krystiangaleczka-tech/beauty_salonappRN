{"dependencies":[{"name":"@motionone/utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"+655Tbr0Dg/RFFwL7HMoKgGI11s=","exportNames":["*"],"imports":1}},{"name":"../utils/velocity.es.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":64,"index":105}}],"key":"5wl8xMuuUGwnN/lo3MUUrJTooFs=","exportNames":["*"],"imports":1}},{"name":"../spring/index.es.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":106},"end":{"line":3,"column":47,"index":153}}],"key":"MRY0xhQqNArSTRwKEIKU6YQUVdA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"glide\", {\n    enumerable: true,\n    get: function () {\n      return glide;\n    }\n  });\n  var _motiononeUtils = require(_dependencyMap[0], \"@motionone/utils\");\n  var _utilsVelocityEsJs = require(_dependencyMap[1], \"../utils/velocity.es.js\");\n  var _springIndexEsJs = require(_dependencyMap[2], \"../spring/index.es.js\");\n  const glide = ({\n    from = 0,\n    velocity = 0.0,\n    power = 0.8,\n    decay = 0.325,\n    bounceDamping,\n    bounceStiffness,\n    changeTarget,\n    min,\n    max,\n    restDistance = 0.5,\n    restSpeed\n  }) => {\n    decay = _motiononeUtils.time.ms(decay);\n    const state = {\n      hasReachedTarget: false,\n      done: false,\n      current: from,\n      target: from\n    };\n    const isOutOfBounds = v => min !== undefined && v < min || max !== undefined && v > max;\n    const nearestBoundary = v => {\n      if (min === undefined) return max;\n      if (max === undefined) return min;\n      return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = from + amplitude;\n    const target = changeTarget === undefined ? ideal : changeTarget(ideal);\n    state.target = target;\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal) amplitude = target - from;\n    const calcDelta = t => -amplitude * Math.exp(-t / decay);\n    const calcLatest = t => target + calcDelta(t);\n    const applyFriction = t => {\n      const delta = calcDelta(t);\n      const latest = calcLatest(t);\n      state.done = Math.abs(delta) <= restDistance;\n      state.current = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = t => {\n      if (!isOutOfBounds(state.current)) return;\n      timeReachedBoundary = t;\n      spring$1 = (0, _springIndexEsJs.spring)({\n        from: state.current,\n        to: nearestBoundary(state.current),\n        velocity: (0, _utilsVelocityEsJs.calcGeneratorVelocity)(calcLatest, t, state.current),\n        // TODO: This should be passing * 1000\n        damping: bounceDamping,\n        stiffness: bounceStiffness,\n        restDistance,\n        restSpeed\n      });\n    };\n    checkCatchBoundary(0);\n    return t => {\n      /**\n       * We need to resolve the friction to figure out if we need a\n       * spring but we don't want to do this twice per frame. So here\n       * we flag if we updated for this frame and later if we did\n       * we can skip doing it again.\n       */\n      let hasUpdatedFrame = false;\n      if (!spring$1 && timeReachedBoundary === undefined) {\n        hasUpdatedFrame = true;\n        applyFriction(t);\n        checkCatchBoundary(t);\n      }\n      /**\n       * If we have a spring and the provided t is beyond the moment the friction\n       * animation crossed the min/max boundary, use the spring.\n       */\n      if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n        state.hasReachedTarget = true;\n        return spring$1(t - timeReachedBoundary);\n      } else {\n        state.hasReachedTarget = false;\n        !hasUpdatedFrame && applyFriction(t);\n        return state;\n      }\n    };\n  };\n});","lineCount":109,"map":[[7,2,91,0,"Object"],[7,8,91,0],[7,9,91,0,"defineProperty"],[7,23,91,0],[7,24,91,0,"exports"],[7,31,91,0],[8,4,91,0,"enumerable"],[8,14,91,0],[9,4,91,0,"get"],[9,7,91,0],[9,18,91,0,"get"],[9,19,91,0],[10,6,91,0],[10,13,91,9,"glide"],[10,18,91,14],[11,4,91,14],[12,2,91,14],[13,2,1,0],[13,6,1,0,"_motiononeUtils"],[13,21,1,0],[13,24,1,0,"require"],[13,31,1,0],[13,32,1,0,"_dependencyMap"],[13,46,1,0],[14,2,2,0],[14,6,2,0,"_utilsVelocityEsJs"],[14,24,2,0],[14,27,2,0,"require"],[14,34,2,0],[14,35,2,0,"_dependencyMap"],[14,49,2,0],[15,2,3,0],[15,6,3,0,"_springIndexEsJs"],[15,22,3,0],[15,25,3,0,"require"],[15,32,3,0],[15,33,3,0,"_dependencyMap"],[15,47,3,0],[16,2,5,0],[16,8,5,6,"glide"],[16,13,5,11],[16,16,5,14,"glide"],[16,17,5,15],[17,4,5,17,"from"],[17,8,5,21],[17,11,5,24],[17,12,5,25],[18,4,5,27,"velocity"],[18,12,5,35],[18,15,5,38],[18,18,5,41],[19,4,5,43,"power"],[19,9,5,48],[19,12,5,51],[19,15,5,54],[20,4,5,56,"decay"],[20,9,5,61],[20,12,5,64],[20,17,5,69],[21,4,5,71,"bounceDamping"],[21,17,5,84],[22,4,5,86,"bounceStiffness"],[22,19,5,101],[23,4,5,103,"changeTarget"],[23,16,5,115],[24,4,5,117,"min"],[24,7,5,120],[25,4,5,122,"max"],[25,7,5,125],[26,4,5,127,"restDistance"],[26,16,5,139],[26,19,5,142],[26,22,5,145],[27,4,5,147,"restSpeed"],[28,2,5,158],[28,3,5,159],[28,8,5,164],[29,4,6,4,"decay"],[29,9,6,9],[29,12,6,12,"time"],[29,27,6,16],[29,28,6,16,"time"],[29,32,6,16],[29,33,6,17,"ms"],[29,35,6,19],[29,36,6,20,"decay"],[29,41,6,25],[29,42,6,26],[30,4,7,4],[30,10,7,10,"state"],[30,15,7,15],[30,18,7,18],[31,6,8,8,"hasReachedTarget"],[31,22,8,24],[31,24,8,26],[31,29,8,31],[32,6,9,8,"done"],[32,10,9,12],[32,12,9,14],[32,17,9,19],[33,6,10,8,"current"],[33,13,10,15],[33,15,10,17,"from"],[33,19,10,21],[34,6,11,8,"target"],[34,12,11,14],[34,14,11,16,"from"],[35,4,12,4],[35,5,12,5],[36,4,13,4],[36,10,13,10,"isOutOfBounds"],[36,23,13,23],[36,26,13,27,"v"],[36,27,13,28],[36,31,13,34,"min"],[36,34,13,37],[36,39,13,42,"undefined"],[36,48,13,51],[36,52,13,55,"v"],[36,53,13,56],[36,56,13,59,"min"],[36,59,13,62],[36,63,13,68,"max"],[36,66,13,71],[36,71,13,76,"undefined"],[36,80,13,85],[36,84,13,89,"v"],[36,85,13,90],[36,88,13,93,"max"],[36,91,13,97],[37,4,14,4],[37,10,14,10,"nearestBoundary"],[37,25,14,25],[37,28,14,29,"v"],[37,29,14,30],[37,33,14,35],[38,6,15,8],[38,10,15,12,"min"],[38,13,15,15],[38,18,15,20,"undefined"],[38,27,15,29],[38,29,16,12],[38,36,16,19,"max"],[38,39,16,22],[39,6,17,8],[39,10,17,12,"max"],[39,13,17,15],[39,18,17,20,"undefined"],[39,27,17,29],[39,29,18,12],[39,36,18,19,"min"],[39,39,18,22],[40,6,19,8],[40,13,19,15,"Math"],[40,17,19,19],[40,18,19,20,"abs"],[40,21,19,23],[40,22,19,24,"min"],[40,25,19,27],[40,28,19,30,"v"],[40,29,19,31],[40,30,19,32],[40,33,19,35,"Math"],[40,37,19,39],[40,38,19,40,"abs"],[40,41,19,43],[40,42,19,44,"max"],[40,45,19,47],[40,48,19,50,"v"],[40,49,19,51],[40,50,19,52],[40,53,19,55,"min"],[40,56,19,58],[40,59,19,61,"max"],[40,62,19,64],[41,4,20,4],[41,5,20,5],[42,4,21,4],[42,8,21,8,"amplitude"],[42,17,21,17],[42,20,21,20,"power"],[42,25,21,25],[42,28,21,28,"velocity"],[42,36,21,36],[43,4,22,4],[43,10,22,10,"ideal"],[43,15,22,15],[43,18,22,18,"from"],[43,22,22,22],[43,25,22,25,"amplitude"],[43,34,22,34],[44,4,23,4],[44,10,23,10,"target"],[44,16,23,16],[44,19,23,19,"changeTarget"],[44,31,23,31],[44,36,23,36,"undefined"],[44,45,23,45],[44,48,23,48,"ideal"],[44,53,23,53],[44,56,23,56,"changeTarget"],[44,68,23,68],[44,69,23,69,"ideal"],[44,74,23,74],[44,75,23,75],[45,4,24,4,"state"],[45,9,24,9],[45,10,24,10,"target"],[45,16,24,16],[45,19,24,19,"target"],[45,25,24,25],[46,4,25,4],[47,0,26,0],[48,0,27,0],[49,0,28,0],[50,4,29,4],[50,8,29,8,"target"],[50,14,29,14],[50,19,29,19,"ideal"],[50,24,29,24],[50,26,30,8,"amplitude"],[50,35,30,17],[50,38,30,20,"target"],[50,44,30,26],[50,47,30,29,"from"],[50,51,30,33],[51,4,31,4],[51,10,31,10,"calcDelta"],[51,19,31,19],[51,22,31,23,"t"],[51,23,31,24],[51,27,31,29],[51,28,31,30,"amplitude"],[51,37,31,39],[51,40,31,42,"Math"],[51,44,31,46],[51,45,31,47,"exp"],[51,48,31,50],[51,49,31,51],[51,50,31,52,"t"],[51,51,31,53],[51,54,31,56,"decay"],[51,59,31,61],[51,60,31,62],[52,4,32,4],[52,10,32,10,"calcLatest"],[52,20,32,20],[52,23,32,24,"t"],[52,24,32,25],[52,28,32,30,"target"],[52,34,32,36],[52,37,32,39,"calcDelta"],[52,46,32,48],[52,47,32,49,"t"],[52,48,32,50],[52,49,32,51],[53,4,33,4],[53,10,33,10,"applyFriction"],[53,23,33,23],[53,26,33,27,"t"],[53,27,33,28],[53,31,33,33],[54,6,34,8],[54,12,34,14,"delta"],[54,17,34,19],[54,20,34,22,"calcDelta"],[54,29,34,31],[54,30,34,32,"t"],[54,31,34,33],[54,32,34,34],[55,6,35,8],[55,12,35,14,"latest"],[55,18,35,20],[55,21,35,23,"calcLatest"],[55,31,35,33],[55,32,35,34,"t"],[55,33,35,35],[55,34,35,36],[56,6,36,8,"state"],[56,11,36,13],[56,12,36,14,"done"],[56,16,36,18],[56,19,36,21,"Math"],[56,23,36,25],[56,24,36,26,"abs"],[56,27,36,29],[56,28,36,30,"delta"],[56,33,36,35],[56,34,36,36],[56,38,36,40,"restDistance"],[56,50,36,52],[57,6,37,8,"state"],[57,11,37,13],[57,12,37,14,"current"],[57,19,37,21],[57,22,37,24,"state"],[57,27,37,29],[57,28,37,30,"done"],[57,32,37,34],[57,35,37,37,"target"],[57,41,37,43],[57,44,37,46,"latest"],[57,50,37,52],[58,4,38,4],[58,5,38,5],[59,4,39,4],[60,0,40,0],[61,0,41,0],[62,0,42,0],[63,0,43,0],[64,0,44,0],[65,4,45,4],[65,8,45,8,"timeReachedBoundary"],[65,27,45,27],[66,4,46,4],[66,8,46,8,"spring$1"],[66,16,46,16],[67,4,47,4],[67,10,47,10,"checkCatchBoundary"],[67,28,47,28],[67,31,47,32,"t"],[67,32,47,33],[67,36,47,38],[68,6,48,8],[68,10,48,12],[68,11,48,13,"isOutOfBounds"],[68,24,48,26],[68,25,48,27,"state"],[68,30,48,32],[68,31,48,33,"current"],[68,38,48,40],[68,39,48,41],[68,41,49,12],[69,6,50,8,"timeReachedBoundary"],[69,25,50,27],[69,28,50,30,"t"],[69,29,50,31],[70,6,51,8,"spring$1"],[70,14,51,16],[70,17,51,19],[70,21,51,19,"spring"],[70,37,51,25],[70,38,51,25,"spring"],[70,44,51,25],[70,46,51,26],[71,8,52,12,"from"],[71,12,52,16],[71,14,52,18,"state"],[71,19,52,23],[71,20,52,24,"current"],[71,27,52,31],[72,8,53,12,"to"],[72,10,53,14],[72,12,53,16,"nearestBoundary"],[72,27,53,31],[72,28,53,32,"state"],[72,33,53,37],[72,34,53,38,"current"],[72,41,53,45],[72,42,53,46],[73,8,54,12,"velocity"],[73,16,54,20],[73,18,54,22],[73,22,54,22,"calcGeneratorVelocity"],[73,40,54,43],[73,41,54,43,"calcGeneratorVelocity"],[73,62,54,43],[73,64,54,44,"calcLatest"],[73,74,54,54],[73,76,54,56,"t"],[73,77,54,57],[73,79,54,59,"state"],[73,84,54,64],[73,85,54,65,"current"],[73,92,54,72],[73,93,54,73],[74,8,54,75],[75,8,55,12,"damping"],[75,15,55,19],[75,17,55,21,"bounceDamping"],[75,30,55,34],[76,8,56,12,"stiffness"],[76,17,56,21],[76,19,56,23,"bounceStiffness"],[76,34,56,38],[77,8,57,12,"restDistance"],[77,20,57,24],[78,8,58,12,"restSpeed"],[79,6,59,8],[79,7,59,9],[79,8,59,10],[80,4,60,4],[80,5,60,5],[81,4,61,4,"checkCatchBoundary"],[81,22,61,22],[81,23,61,23],[81,24,61,24],[81,25,61,25],[82,4,62,4],[82,11,62,12,"t"],[82,12,62,13],[82,16,62,18],[83,6,63,8],[84,0,64,0],[85,0,65,0],[86,0,66,0],[87,0,67,0],[88,0,68,0],[89,6,69,8],[89,10,69,12,"hasUpdatedFrame"],[89,25,69,27],[89,28,69,30],[89,33,69,35],[90,6,70,8],[90,10,70,12],[90,11,70,13,"spring$1"],[90,19,70,21],[90,23,70,25,"timeReachedBoundary"],[90,42,70,44],[90,47,70,49,"undefined"],[90,56,70,58],[90,58,70,60],[91,8,71,12,"hasUpdatedFrame"],[91,23,71,27],[91,26,71,30],[91,30,71,34],[92,8,72,12,"applyFriction"],[92,21,72,25],[92,22,72,26,"t"],[92,23,72,27],[92,24,72,28],[93,8,73,12,"checkCatchBoundary"],[93,26,73,30],[93,27,73,31,"t"],[93,28,73,32],[93,29,73,33],[94,6,74,8],[95,6,75,8],[96,0,76,0],[97,0,77,0],[98,0,78,0],[99,6,79,8],[99,10,79,12,"timeReachedBoundary"],[99,29,79,31],[99,34,79,36,"undefined"],[99,43,79,45],[99,47,79,49,"t"],[99,48,79,50],[99,51,79,53,"timeReachedBoundary"],[99,70,79,72],[99,72,79,74],[100,8,80,12,"state"],[100,13,80,17],[100,14,80,18,"hasReachedTarget"],[100,30,80,34],[100,33,80,37],[100,37,80,41],[101,8,81,12],[101,15,81,19,"spring$1"],[101,23,81,27],[101,24,81,28,"t"],[101,25,81,29],[101,28,81,32,"timeReachedBoundary"],[101,47,81,51],[101,48,81,52],[102,6,82,8],[102,7,82,9],[102,13,83,13],[103,8,84,12,"state"],[103,13,84,17],[103,14,84,18,"hasReachedTarget"],[103,30,84,34],[103,33,84,37],[103,38,84,42],[104,8,85,12],[104,9,85,13,"hasUpdatedFrame"],[104,24,85,28],[104,28,85,32,"applyFriction"],[104,41,85,45],[104,42,85,46,"t"],[104,43,85,47],[104,44,85,48],[105,8,86,12],[105,15,86,19,"state"],[105,20,86,24],[106,6,87,8],[107,4,88,4],[107,5,88,5],[108,2,89,0],[108,3,89,1],[109,0,89,2],[109,3]],"functionMap":{"names":["<global>","glide","isOutOfBounds","nearestBoundary","calcDelta","calcLatest","applyFriction","checkCatchBoundary","<anonymous>"],"mappings":"AAA;cCI;0BCQ,uED;4BEC;KFM;sBGW,wCH;uBIC,4BJ;0BKC;KLK;+BMS;KNa;WOE;KP0B;CDC"},"hasCjsExports":false},"type":"js/module"}]}