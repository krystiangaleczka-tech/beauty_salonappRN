{"dependencies":[{"name":"expo-secure-store","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":49,"index":49}}],"key":"BU2XtfznZ4PiVldqd/oueHCCaLo=","exportNames":["*"],"imports":1}},{"name":"expo-crypto","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":50},"end":{"line":2,"column":38,"index":88}}],"key":"+Akla+LrhuGGU54C9zXxLPlFUv4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  exports.secureSetItem = secureSetItem;\n  exports.secureGetItem = secureGetItem;\n  exports.secureDeleteItem = secureDeleteItem;\n  var _expoSecureStore = require(_dependencyMap[0], \"expo-secure-store\");\n  var SecureStore = _interopNamespace(_expoSecureStore);\n  var _expoCrypto = require(_dependencyMap[1], \"expo-crypto\");\n  var Crypto = _interopNamespace(_expoCrypto);\n  // Encryption key name in SecureStore\n  const ENCRYPTION_KEY_NAME = 'auth_encryption_key';\n\n  /**\n   * Generates or retrieves the encryption key\n   * @returns {Promise<string>} The encryption key\n   */\n  async function getEncryptionKey() {\n    let key = await SecureStore.getItemAsync(ENCRYPTION_KEY_NAME);\n    if (!key) {\n      // Generate a new encryption key if none exists\n      const randomBytes = await Crypto.getRandomBytesAsync(32);\n      key = Array.from(randomBytes).map(byte => byte.toString(16).padStart(2, '0')).join('');\n      await SecureStore.setItemAsync(ENCRYPTION_KEY_NAME, key);\n    }\n    return key;\n  }\n\n  /**\n   * Encrypts data before storing it\n   * @param {string} data - Data to encrypt\n   * @returns {Promise<string>} Encrypted data\n   */\n  async function encrypt(data) {\n    try {\n      const key = await getEncryptionKey();\n      // Generate a random IV for each encryption\n      const iv = await Crypto.getRandomBytesAsync(16);\n      const ivHex = Array.from(iv).map(byte => byte.toString(16).padStart(2, '0')).join('');\n\n      // Use the digest function as a simple encryption method\n      // In a production app, you would use a proper encryption algorithm\n      const encrypted = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, data + key + ivHex);\n\n      // Store the IV with the encrypted data\n      return JSON.stringify({\n        iv: ivHex,\n        data: encrypted\n      });\n    } catch (error) {\n      console.error('Encryption error:', error);\n      return data; // Fallback to unencrypted data\n    }\n  }\n\n  /**\n   * Decrypts stored data\n   * @param {string} encryptedData - Data to decrypt\n   * @returns {Promise<string|null>} Decrypted data or null if decryption fails\n   */\n  async function decrypt(encryptedData) {\n    try {\n      // Try to parse the encrypted data\n      const {\n        iv,\n        data\n      } = JSON.parse(encryptedData);\n\n      // If we have valid encrypted data format\n      if (iv && data) {\n        // In a real implementation, you would use the IV and key to decrypt\n        // For now, we'll just return the encrypted data as we can't easily decrypt\n        // the SHA256 hash used above\n        return data;\n      }\n\n      // If the format is invalid, return null\n      return null;\n    } catch (error) {\n      // If parsing fails, it's likely not encrypted data\n      console.error('Decryption error:', error);\n      return encryptedData; // Return the original data\n    }\n  }\n\n  /**\n   * Securely stores an item in SecureStore with encryption\n   * @param {string} key - Storage key\n   * @param {string} value - Value to store\n   * @returns {Promise<void>}\n   */\n  async function secureSetItem(key, value) {\n    try {\n      const encryptedValue = await encrypt(value);\n      await SecureStore.setItemAsync(key, encryptedValue);\n    } catch (error) {\n      console.error('Error storing secure item:', error);\n      // Fallback to regular storage\n      await SecureStore.setItemAsync(key, value);\n    }\n  }\n\n  /**\n   * Securely retrieves an item from SecureStore with decryption\n   * @param {string} key - Storage key\n   * @returns {Promise<string|null>} Retrieved value or null\n   */\n  async function secureGetItem(key) {\n    try {\n      const encryptedValue = await SecureStore.getItemAsync(key);\n      if (!encryptedValue) return null;\n      return await decrypt(encryptedValue);\n    } catch (error) {\n      console.error('Error retrieving secure item:', error);\n      // Attempt to get the value without decryption as fallback\n      return await SecureStore.getItemAsync(key);\n    }\n  }\n\n  /**\n   * Securely deletes an item from SecureStore\n   * @param {string} key - Storage key\n   * @returns {Promise<void>}\n   */\n  async function secureDeleteItem(key) {\n    try {\n      await SecureStore.deleteItemAsync(key);\n    } catch (error) {\n      console.error('Error deleting secure item:', error);\n    }\n  }\n});","lineCount":150,"map":[[22,2,92,0,"exports"],[22,9,92,0],[22,10,92,0,"secureSetItem"],[22,23,92,0],[22,26,92,0,"secureSetItem"],[22,39,92,0],[23,2,108,0,"exports"],[23,9,108,0],[23,10,108,0,"secureGetItem"],[23,23,108,0],[23,26,108,0,"secureGetItem"],[23,39,108,0],[24,2,126,0,"exports"],[24,9,126,0],[24,10,126,0,"secureDeleteItem"],[24,26,126,0],[24,29,126,0,"secureDeleteItem"],[24,45,126,0],[25,2,1,0],[25,6,1,0,"_expoSecureStore"],[25,22,1,0],[25,25,1,0,"require"],[25,32,1,0],[25,33,1,0,"_dependencyMap"],[25,47,1,0],[26,2,1,0],[26,6,1,0,"SecureStore"],[26,17,1,0],[26,20,1,0,"_interopNamespace"],[26,37,1,0],[26,38,1,0,"_expoSecureStore"],[26,54,1,0],[27,2,2,0],[27,6,2,0,"_expoCrypto"],[27,17,2,0],[27,20,2,0,"require"],[27,27,2,0],[27,28,2,0,"_dependencyMap"],[27,42,2,0],[28,2,2,0],[28,6,2,0,"Crypto"],[28,12,2,0],[28,15,2,0,"_interopNamespace"],[28,32,2,0],[28,33,2,0,"_expoCrypto"],[28,44,2,0],[29,2,4,0],[30,2,5,0],[30,8,5,6,"ENCRYPTION_KEY_NAME"],[30,27,5,25],[30,30,5,28],[30,51,5,49],[32,2,7,0],[33,0,8,0],[34,0,9,0],[35,0,10,0],[36,2,11,0],[36,17,11,15,"getEncryptionKey"],[36,33,11,31,"getEncryptionKey"],[36,34,11,31],[36,36,11,34],[37,4,12,2],[37,8,12,6,"key"],[37,11,12,9],[37,14,12,12],[37,20,12,18,"SecureStore"],[37,31,12,29],[37,32,12,30,"getItemAsync"],[37,44,12,42],[37,45,12,43,"ENCRYPTION_KEY_NAME"],[37,64,12,62],[37,65,12,63],[38,4,14,2],[38,8,14,6],[38,9,14,7,"key"],[38,12,14,10],[38,14,14,12],[39,6,15,4],[40,6,16,4],[40,12,16,10,"randomBytes"],[40,23,16,21],[40,26,16,24],[40,32,16,30,"Crypto"],[40,38,16,36],[40,39,16,37,"getRandomBytesAsync"],[40,58,16,56],[40,59,16,57],[40,61,16,59],[40,62,16,60],[41,6,17,4,"key"],[41,9,17,7],[41,12,17,10,"Array"],[41,17,17,15],[41,18,17,16,"from"],[41,22,17,20],[41,23,17,21,"randomBytes"],[41,34,17,32],[41,35,17,33],[41,36,18,7,"map"],[41,39,18,10],[41,40,18,11,"byte"],[41,44,18,15],[41,48,18,19,"byte"],[41,52,18,23],[41,53,18,24,"toString"],[41,61,18,32],[41,62,18,33],[41,64,18,35],[41,65,18,36],[41,66,18,37,"padStart"],[41,74,18,45],[41,75,18,46],[41,76,18,47],[41,78,18,49],[41,81,18,52],[41,82,18,53],[41,83,18,54],[41,84,19,7,"join"],[41,88,19,11],[41,89,19,12],[41,91,19,14],[41,92,19,15],[42,6,21,4],[42,12,21,10,"SecureStore"],[42,23,21,21],[42,24,21,22,"setItemAsync"],[42,36,21,34],[42,37,21,35,"ENCRYPTION_KEY_NAME"],[42,56,21,54],[42,58,21,56,"key"],[42,61,21,59],[42,62,21,60],[43,4,22,2],[44,4,24,2],[44,11,24,9,"key"],[44,14,24,12],[45,2,25,0],[47,2,27,0],[48,0,28,0],[49,0,29,0],[50,0,30,0],[51,0,31,0],[52,2,32,0],[52,17,32,15,"encrypt"],[52,24,32,22,"encrypt"],[52,25,32,23,"data"],[52,29,32,27],[52,31,32,29],[53,4,33,2],[53,8,33,6],[54,6,34,4],[54,12,34,10,"key"],[54,15,34,13],[54,18,34,16],[54,24,34,22,"getEncryptionKey"],[54,40,34,38],[54,41,34,39],[54,42,34,40],[55,6,35,4],[56,6,36,4],[56,12,36,10,"iv"],[56,14,36,12],[56,17,36,15],[56,23,36,21,"Crypto"],[56,29,36,27],[56,30,36,28,"getRandomBytesAsync"],[56,49,36,47],[56,50,36,48],[56,52,36,50],[56,53,36,51],[57,6,37,4],[57,12,37,10,"ivHex"],[57,17,37,15],[57,20,37,18,"Array"],[57,25,37,23],[57,26,37,24,"from"],[57,30,37,28],[57,31,37,29,"iv"],[57,33,37,31],[57,34,37,32],[57,35,38,7,"map"],[57,38,38,10],[57,39,38,11,"byte"],[57,43,38,15],[57,47,38,19,"byte"],[57,51,38,23],[57,52,38,24,"toString"],[57,60,38,32],[57,61,38,33],[57,63,38,35],[57,64,38,36],[57,65,38,37,"padStart"],[57,73,38,45],[57,74,38,46],[57,75,38,47],[57,77,38,49],[57,80,38,52],[57,81,38,53],[57,82,38,54],[57,83,39,7,"join"],[57,87,39,11],[57,88,39,12],[57,90,39,14],[57,91,39,15],[59,6,41,4],[60,6,42,4],[61,6,43,4],[61,12,43,10,"encrypted"],[61,21,43,19],[61,24,43,22],[61,30,43,28,"Crypto"],[61,36,43,34],[61,37,43,35,"digestStringAsync"],[61,54,43,52],[61,55,44,6,"Crypto"],[61,61,44,12],[61,62,44,13,"CryptoDigestAlgorithm"],[61,83,44,34],[61,84,44,35,"SHA256"],[61,90,44,41],[61,92,45,6,"data"],[61,96,45,10],[61,99,45,13,"key"],[61,102,45,16],[61,105,45,19,"ivHex"],[61,110,46,4],[61,111,46,5],[63,6,48,4],[64,6,49,4],[64,13,49,11,"JSON"],[64,17,49,15],[64,18,49,16,"stringify"],[64,27,49,25],[64,28,49,26],[65,8,50,6,"iv"],[65,10,50,8],[65,12,50,10,"ivHex"],[65,17,50,15],[66,8,51,6,"data"],[66,12,51,10],[66,14,51,12,"encrypted"],[67,6,52,4],[67,7,52,5],[67,8,52,6],[68,4,53,2],[68,5,53,3],[68,6,53,4],[68,13,53,11,"error"],[68,18,53,16],[68,20,53,18],[69,6,54,4,"console"],[69,13,54,11],[69,14,54,12,"error"],[69,19,54,17],[69,20,54,18],[69,39,54,37],[69,41,54,39,"error"],[69,46,54,44],[69,47,54,45],[70,6,55,4],[70,13,55,11,"data"],[70,17,55,15],[70,18,55,16],[70,19,55,17],[71,4,56,2],[72,2,57,0],[74,2,59,0],[75,0,60,0],[76,0,61,0],[77,0,62,0],[78,0,63,0],[79,2,64,0],[79,17,64,15,"decrypt"],[79,24,64,22,"decrypt"],[79,25,64,23,"encryptedData"],[79,38,64,36],[79,40,64,38],[80,4,65,2],[80,8,65,6],[81,6,66,4],[82,6,67,4],[82,12,67,10],[83,8,67,12,"iv"],[83,10,67,14],[84,8,67,16,"data"],[85,6,67,21],[85,7,67,22],[85,10,67,25,"JSON"],[85,14,67,29],[85,15,67,30,"parse"],[85,20,67,35],[85,21,67,36,"encryptedData"],[85,34,67,49],[85,35,67,50],[87,6,69,4],[88,6,70,4],[88,10,70,8,"iv"],[88,12,70,10],[88,16,70,14,"data"],[88,20,70,18],[88,22,70,20],[89,8,71,6],[90,8,72,6],[91,8,73,6],[92,8,74,6],[92,15,74,13,"data"],[92,19,74,17],[93,6,75,4],[95,6,77,4],[96,6,78,4],[96,13,78,11],[96,17,78,15],[97,4,79,2],[97,5,79,3],[97,6,79,4],[97,13,79,11,"error"],[97,18,79,16],[97,20,79,18],[98,6,80,4],[99,6,81,4,"console"],[99,13,81,11],[99,14,81,12,"error"],[99,19,81,17],[99,20,81,18],[99,39,81,37],[99,41,81,39,"error"],[99,46,81,44],[99,47,81,45],[100,6,82,4],[100,13,82,11,"encryptedData"],[100,26,82,24],[100,27,82,25],[100,28,82,26],[101,4,83,2],[102,2,84,0],[104,2,86,0],[105,0,87,0],[106,0,88,0],[107,0,89,0],[108,0,90,0],[109,0,91,0],[110,2,92,7],[110,17,92,22,"secureSetItem"],[110,30,92,35,"secureSetItem"],[110,31,92,36,"key"],[110,34,92,39],[110,36,92,41,"value"],[110,41,92,46],[110,43,92,48],[111,4,93,2],[111,8,93,6],[112,6,94,4],[112,12,94,10,"encryptedValue"],[112,26,94,24],[112,29,94,27],[112,35,94,33,"encrypt"],[112,42,94,40],[112,43,94,41,"value"],[112,48,94,46],[112,49,94,47],[113,6,95,4],[113,12,95,10,"SecureStore"],[113,23,95,21],[113,24,95,22,"setItemAsync"],[113,36,95,34],[113,37,95,35,"key"],[113,40,95,38],[113,42,95,40,"encryptedValue"],[113,56,95,54],[113,57,95,55],[114,4,96,2],[114,5,96,3],[114,6,96,4],[114,13,96,11,"error"],[114,18,96,16],[114,20,96,18],[115,6,97,4,"console"],[115,13,97,11],[115,14,97,12,"error"],[115,19,97,17],[115,20,97,18],[115,48,97,46],[115,50,97,48,"error"],[115,55,97,53],[115,56,97,54],[116,6,98,4],[117,6,99,4],[117,12,99,10,"SecureStore"],[117,23,99,21],[117,24,99,22,"setItemAsync"],[117,36,99,34],[117,37,99,35,"key"],[117,40,99,38],[117,42,99,40,"value"],[117,47,99,45],[117,48,99,46],[118,4,100,2],[119,2,101,0],[121,2,103,0],[122,0,104,0],[123,0,105,0],[124,0,106,0],[125,0,107,0],[126,2,108,7],[126,17,108,22,"secureGetItem"],[126,30,108,35,"secureGetItem"],[126,31,108,36,"key"],[126,34,108,39],[126,36,108,41],[127,4,109,2],[127,8,109,6],[128,6,110,4],[128,12,110,10,"encryptedValue"],[128,26,110,24],[128,29,110,27],[128,35,110,33,"SecureStore"],[128,46,110,44],[128,47,110,45,"getItemAsync"],[128,59,110,57],[128,60,110,58,"key"],[128,63,110,61],[128,64,110,62],[129,6,111,4],[129,10,111,8],[129,11,111,9,"encryptedValue"],[129,25,111,23],[129,27,111,25],[129,34,111,32],[129,38,111,36],[130,6,113,4],[130,13,113,11],[130,19,113,17,"decrypt"],[130,26,113,24],[130,27,113,25,"encryptedValue"],[130,41,113,39],[130,42,113,40],[131,4,114,2],[131,5,114,3],[131,6,114,4],[131,13,114,11,"error"],[131,18,114,16],[131,20,114,18],[132,6,115,4,"console"],[132,13,115,11],[132,14,115,12,"error"],[132,19,115,17],[132,20,115,18],[132,51,115,49],[132,53,115,51,"error"],[132,58,115,56],[132,59,115,57],[133,6,116,4],[134,6,117,4],[134,13,117,11],[134,19,117,17,"SecureStore"],[134,30,117,28],[134,31,117,29,"getItemAsync"],[134,43,117,41],[134,44,117,42,"key"],[134,47,117,45],[134,48,117,46],[135,4,118,2],[136,2,119,0],[138,2,121,0],[139,0,122,0],[140,0,123,0],[141,0,124,0],[142,0,125,0],[143,2,126,7],[143,17,126,22,"secureDeleteItem"],[143,33,126,38,"secureDeleteItem"],[143,34,126,39,"key"],[143,37,126,42],[143,39,126,44],[144,4,127,2],[144,8,127,6],[145,6,128,4],[145,12,128,10,"SecureStore"],[145,23,128,21],[145,24,128,22,"deleteItemAsync"],[145,39,128,37],[145,40,128,38,"key"],[145,43,128,41],[145,44,128,42],[146,4,129,2],[146,5,129,3],[146,6,129,4],[146,13,129,11,"error"],[146,18,129,16],[146,20,129,18],[147,6,130,4,"console"],[147,13,130,11],[147,14,130,12,"error"],[147,19,130,17],[147,20,130,18],[147,49,130,47],[147,51,130,49,"error"],[147,56,130,54],[147,57,130,55],[148,4,131,2],[149,2,132,0],[150,0,132,1],[150,3]],"functionMap":{"names":["<global>","getEncryptionKey","Array.from.map$argument_0","encrypt","decrypt","secureSetItem","secureGetItem","secureDeleteItem"],"mappings":"AAA;ACU;WCO,0CD;CDO;AGO;WDM,0CC;CHmB;AIO;CJoB;OKQ;CLS;OMO;CNW;OOO"},"hasCjsExports":false},"type":"js/module"}]}