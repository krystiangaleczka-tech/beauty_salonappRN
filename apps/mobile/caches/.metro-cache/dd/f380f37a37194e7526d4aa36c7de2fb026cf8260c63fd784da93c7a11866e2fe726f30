{"dependencies":[{"name":"expo-secure-store","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":49,"index":49}}],"key":"BU2XtfznZ4PiVldqd/oueHCCaLo=","exportNames":["*"],"imports":1}},{"name":"expo-crypto","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":50},"end":{"line":2,"column":38,"index":88}}],"key":"+Akla+LrhuGGU54C9zXxLPlFUv4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  exports.secureSetItem = secureSetItem;\n  exports.secureGetItem = secureGetItem;\n  exports.secureDeleteItem = secureDeleteItem;\n  var _expoSecureStore = require(_dependencyMap[0], \"expo-secure-store\");\n  var SecureStore = _interopNamespace(_expoSecureStore);\n  var _expoCrypto = require(_dependencyMap[1], \"expo-crypto\");\n  var Crypto = _interopNamespace(_expoCrypto);\n  // Encryption key name in SecureStore\n  const ENCRYPTION_KEY_NAME = 'auth_encryption_key';\n\n  /**\n   * Generates or retrieves the encryption key\n   * @returns {Promise<string>} The encryption key\n   */\n  async function getEncryptionKey() {\n    let key = await SecureStore.getItemAsync(ENCRYPTION_KEY_NAME);\n    if (!key) {\n      // Generate a new encryption key if none exists\n      const randomBytes = await Crypto.getRandomBytesAsync(32);\n      key = Array.from(randomBytes).map(byte => byte.toString(16).padStart(2, '0')).join('');\n      await SecureStore.setItemAsync(ENCRYPTION_KEY_NAME, key);\n    }\n    return key;\n  }\n\n  /**\n   * Encrypts data before storing it\n   * @param {string} data - Data to encrypt\n   * @returns {Promise<string>} Encrypted data\n   */\n  async function encrypt(data) {\n    try {\n      const key = await getEncryptionKey();\n      // Generate a random IV for each encryption\n      const iv = await Crypto.getRandomBytesAsync(16);\n      const ivHex = Array.from(iv).map(byte => byte.toString(16).padStart(2, '0')).join('');\n\n      // Use a simple XOR encryption with the key and IV\n      // In a production app, you would use a proper encryption algorithm like AES\n      let encrypted = '';\n      for (let i = 0; i < data.length; i++) {\n        const keyChar = key.charCodeAt(i % key.length);\n        const ivChar = parseInt(ivHex.charAt(i % ivHex.length), 16);\n        const dataChar = data.charCodeAt(i);\n        const encryptedChar = (dataChar ^ keyChar ^ ivChar) % 256;\n        encrypted += encryptedChar.toString(16).padStart(2, '0');\n      }\n\n      // Store the IV with the encrypted data\n      return JSON.stringify({\n        iv: ivHex,\n        data: encrypted\n      });\n    } catch (error) {\n      console.error('Encryption error:', error);\n      return data; // Fallback to unencrypted data\n    }\n  }\n\n  /**\n   * Decrypts stored data\n   * @param {string} encryptedData - Data to decrypt\n   * @returns {Promise<string|null>} Decrypted data or null if decryption fails\n   */\n  async function decrypt(encryptedData) {\n    try {\n      // Try to parse the encrypted data\n      const {\n        iv,\n        data\n      } = JSON.parse(encryptedData);\n\n      // If we have valid encrypted data format\n      if (iv && data) {\n        const key = await getEncryptionKey();\n\n        // Decrypt using the same XOR method\n        let decrypted = '';\n        for (let i = 0; i < data.length; i += 2) {\n          const encryptedByte = parseInt(data.substr(i, 2), 16);\n          const keyChar = key.charCodeAt(i / 2 % key.length);\n          const ivChar = parseInt(iv.charAt(i / 2 % iv.length), 16);\n          const decryptedChar = (encryptedByte ^ keyChar ^ ivChar) % 256;\n          decrypted += String.fromCharCode(decryptedChar);\n        }\n        return decrypted;\n      }\n\n      // If the format is invalid, return null\n      return null;\n    } catch (error) {\n      // If parsing fails, it's likely not encrypted data\n      console.error('Decryption error:', error);\n      return encryptedData; // Return the original data\n    }\n  }\n\n  /**\n   * Securely stores an item in SecureStore with encryption\n   * @param {string} key - Storage key\n   * @param {string} value - Value to store\n   * @returns {Promise<void>}\n   */\n  async function secureSetItem(key, value) {\n    try {\n      const encryptedValue = await encrypt(value);\n      await SecureStore.setItemAsync(key, encryptedValue);\n    } catch (error) {\n      console.error('Error storing secure item:', error);\n      // Fallback to regular storage\n      await SecureStore.setItemAsync(key, value);\n    }\n  }\n\n  /**\n   * Securely retrieves an item from SecureStore with decryption\n   * @param {string} key - Storage key\n   * @returns {Promise<string|null>} Retrieved value or null\n   */\n  async function secureGetItem(key) {\n    try {\n      const encryptedValue = await SecureStore.getItemAsync(key);\n      if (!encryptedValue) return null;\n      return await decrypt(encryptedValue);\n    } catch (error) {\n      console.error('Error retrieving secure item:', error);\n      // Attempt to get the value without decryption as fallback\n      return await SecureStore.getItemAsync(key);\n    }\n  }\n\n  /**\n   * Securely deletes an item from SecureStore\n   * @param {string} key - Storage key\n   * @returns {Promise<void>}\n   */\n  async function secureDeleteItem(key) {\n    try {\n      await SecureStore.deleteItemAsync(key);\n    } catch (error) {\n      console.error('Error deleting secure item:', error);\n    }\n  }\n});","lineCount":165,"map":[[22,2,105,0,"exports"],[22,9,105,0],[22,10,105,0,"secureSetItem"],[22,23,105,0],[22,26,105,0,"secureSetItem"],[22,39,105,0],[23,2,121,0,"exports"],[23,9,121,0],[23,10,121,0,"secureGetItem"],[23,23,121,0],[23,26,121,0,"secureGetItem"],[23,39,121,0],[24,2,139,0,"exports"],[24,9,139,0],[24,10,139,0,"secureDeleteItem"],[24,26,139,0],[24,29,139,0,"secureDeleteItem"],[24,45,139,0],[25,2,1,0],[25,6,1,0,"_expoSecureStore"],[25,22,1,0],[25,25,1,0,"require"],[25,32,1,0],[25,33,1,0,"_dependencyMap"],[25,47,1,0],[26,2,1,0],[26,6,1,0,"SecureStore"],[26,17,1,0],[26,20,1,0,"_interopNamespace"],[26,37,1,0],[26,38,1,0,"_expoSecureStore"],[26,54,1,0],[27,2,2,0],[27,6,2,0,"_expoCrypto"],[27,17,2,0],[27,20,2,0,"require"],[27,27,2,0],[27,28,2,0,"_dependencyMap"],[27,42,2,0],[28,2,2,0],[28,6,2,0,"Crypto"],[28,12,2,0],[28,15,2,0,"_interopNamespace"],[28,32,2,0],[28,33,2,0,"_expoCrypto"],[28,44,2,0],[29,2,4,0],[30,2,5,0],[30,8,5,6,"ENCRYPTION_KEY_NAME"],[30,27,5,25],[30,30,5,28],[30,51,5,49],[32,2,7,0],[33,0,8,0],[34,0,9,0],[35,0,10,0],[36,2,11,0],[36,17,11,15,"getEncryptionKey"],[36,33,11,31,"getEncryptionKey"],[36,34,11,31],[36,36,11,34],[37,4,12,2],[37,8,12,6,"key"],[37,11,12,9],[37,14,12,12],[37,20,12,18,"SecureStore"],[37,31,12,29],[37,32,12,30,"getItemAsync"],[37,44,12,42],[37,45,12,43,"ENCRYPTION_KEY_NAME"],[37,64,12,62],[37,65,12,63],[38,4,14,2],[38,8,14,6],[38,9,14,7,"key"],[38,12,14,10],[38,14,14,12],[39,6,15,4],[40,6,16,4],[40,12,16,10,"randomBytes"],[40,23,16,21],[40,26,16,24],[40,32,16,30,"Crypto"],[40,38,16,36],[40,39,16,37,"getRandomBytesAsync"],[40,58,16,56],[40,59,16,57],[40,61,16,59],[40,62,16,60],[41,6,17,4,"key"],[41,9,17,7],[41,12,17,10,"Array"],[41,17,17,15],[41,18,17,16,"from"],[41,22,17,20],[41,23,17,21,"randomBytes"],[41,34,17,32],[41,35,17,33],[41,36,18,7,"map"],[41,39,18,10],[41,40,18,11,"byte"],[41,44,18,15],[41,48,18,19,"byte"],[41,52,18,23],[41,53,18,24,"toString"],[41,61,18,32],[41,62,18,33],[41,64,18,35],[41,65,18,36],[41,66,18,37,"padStart"],[41,74,18,45],[41,75,18,46],[41,76,18,47],[41,78,18,49],[41,81,18,52],[41,82,18,53],[41,83,18,54],[41,84,19,7,"join"],[41,88,19,11],[41,89,19,12],[41,91,19,14],[41,92,19,15],[42,6,21,4],[42,12,21,10,"SecureStore"],[42,23,21,21],[42,24,21,22,"setItemAsync"],[42,36,21,34],[42,37,21,35,"ENCRYPTION_KEY_NAME"],[42,56,21,54],[42,58,21,56,"key"],[42,61,21,59],[42,62,21,60],[43,4,22,2],[44,4,24,2],[44,11,24,9,"key"],[44,14,24,12],[45,2,25,0],[47,2,27,0],[48,0,28,0],[49,0,29,0],[50,0,30,0],[51,0,31,0],[52,2,32,0],[52,17,32,15,"encrypt"],[52,24,32,22,"encrypt"],[52,25,32,23,"data"],[52,29,32,27],[52,31,32,29],[53,4,33,2],[53,8,33,6],[54,6,34,4],[54,12,34,10,"key"],[54,15,34,13],[54,18,34,16],[54,24,34,22,"getEncryptionKey"],[54,40,34,38],[54,41,34,39],[54,42,34,40],[55,6,35,4],[56,6,36,4],[56,12,36,10,"iv"],[56,14,36,12],[56,17,36,15],[56,23,36,21,"Crypto"],[56,29,36,27],[56,30,36,28,"getRandomBytesAsync"],[56,49,36,47],[56,50,36,48],[56,52,36,50],[56,53,36,51],[57,6,37,4],[57,12,37,10,"ivHex"],[57,17,37,15],[57,20,37,18,"Array"],[57,25,37,23],[57,26,37,24,"from"],[57,30,37,28],[57,31,37,29,"iv"],[57,33,37,31],[57,34,37,32],[57,35,38,7,"map"],[57,38,38,10],[57,39,38,11,"byte"],[57,43,38,15],[57,47,38,19,"byte"],[57,51,38,23],[57,52,38,24,"toString"],[57,60,38,32],[57,61,38,33],[57,63,38,35],[57,64,38,36],[57,65,38,37,"padStart"],[57,73,38,45],[57,74,38,46],[57,75,38,47],[57,77,38,49],[57,80,38,52],[57,81,38,53],[57,82,38,54],[57,83,39,7,"join"],[57,87,39,11],[57,88,39,12],[57,90,39,14],[57,91,39,15],[59,6,41,4],[60,6,42,4],[61,6,43,4],[61,10,43,8,"encrypted"],[61,19,43,17],[61,22,43,20],[61,24,43,22],[62,6,44,4],[62,11,44,9],[62,15,44,13,"i"],[62,16,44,14],[62,19,44,17],[62,20,44,18],[62,22,44,20,"i"],[62,23,44,21],[62,26,44,24,"data"],[62,30,44,28],[62,31,44,29,"length"],[62,37,44,35],[62,39,44,37,"i"],[62,40,44,38],[62,42,44,40],[62,44,44,42],[63,8,45,6],[63,14,45,12,"keyChar"],[63,21,45,19],[63,24,45,22,"key"],[63,27,45,25],[63,28,45,26,"charCodeAt"],[63,38,45,36],[63,39,45,37,"i"],[63,40,45,38],[63,43,45,41,"key"],[63,46,45,44],[63,47,45,45,"length"],[63,53,45,51],[63,54,45,52],[64,8,46,6],[64,14,46,12,"ivChar"],[64,20,46,18],[64,23,46,21,"parseInt"],[64,31,46,29],[64,32,46,30,"ivHex"],[64,37,46,35],[64,38,46,36,"charAt"],[64,44,46,42],[64,45,46,43,"i"],[64,46,46,44],[64,49,46,47,"ivHex"],[64,54,46,52],[64,55,46,53,"length"],[64,61,46,59],[64,62,46,60],[64,64,46,62],[64,66,46,64],[64,67,46,65],[65,8,47,6],[65,14,47,12,"dataChar"],[65,22,47,20],[65,25,47,23,"data"],[65,29,47,27],[65,30,47,28,"charCodeAt"],[65,40,47,38],[65,41,47,39,"i"],[65,42,47,40],[65,43,47,41],[66,8,48,6],[66,14,48,12,"encryptedChar"],[66,27,48,25],[66,30,48,28],[66,31,48,29,"dataChar"],[66,39,48,37],[66,42,48,40,"keyChar"],[66,49,48,47],[66,52,48,50,"ivChar"],[66,58,48,56],[66,62,48,60],[66,65,48,63],[67,8,49,6,"encrypted"],[67,17,49,15],[67,21,49,19,"encryptedChar"],[67,34,49,32],[67,35,49,33,"toString"],[67,43,49,41],[67,44,49,42],[67,46,49,44],[67,47,49,45],[67,48,49,46,"padStart"],[67,56,49,54],[67,57,49,55],[67,58,49,56],[67,60,49,58],[67,63,49,61],[67,64,49,62],[68,6,50,4],[70,6,52,4],[71,6,53,4],[71,13,53,11,"JSON"],[71,17,53,15],[71,18,53,16,"stringify"],[71,27,53,25],[71,28,53,26],[72,8,54,6,"iv"],[72,10,54,8],[72,12,54,10,"ivHex"],[72,17,54,15],[73,8,55,6,"data"],[73,12,55,10],[73,14,55,12,"encrypted"],[74,6,56,4],[74,7,56,5],[74,8,56,6],[75,4,57,2],[75,5,57,3],[75,6,57,4],[75,13,57,11,"error"],[75,18,57,16],[75,20,57,18],[76,6,58,4,"console"],[76,13,58,11],[76,14,58,12,"error"],[76,19,58,17],[76,20,58,18],[76,39,58,37],[76,41,58,39,"error"],[76,46,58,44],[76,47,58,45],[77,6,59,4],[77,13,59,11,"data"],[77,17,59,15],[77,18,59,16],[77,19,59,17],[78,4,60,2],[79,2,61,0],[81,2,63,0],[82,0,64,0],[83,0,65,0],[84,0,66,0],[85,0,67,0],[86,2,68,0],[86,17,68,15,"decrypt"],[86,24,68,22,"decrypt"],[86,25,68,23,"encryptedData"],[86,38,68,36],[86,40,68,38],[87,4,69,2],[87,8,69,6],[88,6,70,4],[89,6,71,4],[89,12,71,10],[90,8,71,12,"iv"],[90,10,71,14],[91,8,71,16,"data"],[92,6,71,21],[92,7,71,22],[92,10,71,25,"JSON"],[92,14,71,29],[92,15,71,30,"parse"],[92,20,71,35],[92,21,71,36,"encryptedData"],[92,34,71,49],[92,35,71,50],[94,6,73,4],[95,6,74,4],[95,10,74,8,"iv"],[95,12,74,10],[95,16,74,14,"data"],[95,20,74,18],[95,22,74,20],[96,8,75,6],[96,14,75,12,"key"],[96,17,75,15],[96,20,75,18],[96,26,75,24,"getEncryptionKey"],[96,42,75,40],[96,43,75,41],[96,44,75,42],[98,8,77,6],[99,8,78,6],[99,12,78,10,"decrypted"],[99,21,78,19],[99,24,78,22],[99,26,78,24],[100,8,79,6],[100,13,79,11],[100,17,79,15,"i"],[100,18,79,16],[100,21,79,19],[100,22,79,20],[100,24,79,22,"i"],[100,25,79,23],[100,28,79,26,"data"],[100,32,79,30],[100,33,79,31,"length"],[100,39,79,37],[100,41,79,39,"i"],[100,42,79,40],[100,46,79,44],[100,47,79,45],[100,49,79,47],[101,10,80,8],[101,16,80,14,"encryptedByte"],[101,29,80,27],[101,32,80,30,"parseInt"],[101,40,80,38],[101,41,80,39,"data"],[101,45,80,43],[101,46,80,44,"substr"],[101,52,80,50],[101,53,80,51,"i"],[101,54,80,52],[101,56,80,54],[101,57,80,55],[101,58,80,56],[101,60,80,58],[101,62,80,60],[101,63,80,61],[102,10,81,8],[102,16,81,14,"keyChar"],[102,23,81,21],[102,26,81,24,"key"],[102,29,81,27],[102,30,81,28,"charCodeAt"],[102,40,81,38],[102,41,81,40,"i"],[102,42,81,41],[102,45,81,44],[102,46,81,45],[102,49,81,49,"key"],[102,52,81,52],[102,53,81,53,"length"],[102,59,81,59],[102,60,81,60],[103,10,82,8],[103,16,82,14,"ivChar"],[103,22,82,20],[103,25,82,23,"parseInt"],[103,33,82,31],[103,34,82,32,"iv"],[103,36,82,34],[103,37,82,35,"charAt"],[103,43,82,41],[103,44,82,43,"i"],[103,45,82,44],[103,48,82,47],[103,49,82,48],[103,52,82,52,"iv"],[103,54,82,54],[103,55,82,55,"length"],[103,61,82,61],[103,62,82,62],[103,64,82,64],[103,66,82,66],[103,67,82,67],[104,10,83,8],[104,16,83,14,"decryptedChar"],[104,29,83,27],[104,32,83,30],[104,33,83,31,"encryptedByte"],[104,46,83,44],[104,49,83,47,"keyChar"],[104,56,83,54],[104,59,83,57,"ivChar"],[104,65,83,63],[104,69,83,67],[104,72,83,70],[105,10,84,8,"decrypted"],[105,19,84,17],[105,23,84,21,"String"],[105,29,84,27],[105,30,84,28,"fromCharCode"],[105,42,84,40],[105,43,84,41,"decryptedChar"],[105,56,84,54],[105,57,84,55],[106,8,85,6],[107,8,87,6],[107,15,87,13,"decrypted"],[107,24,87,22],[108,6,88,4],[110,6,90,4],[111,6,91,4],[111,13,91,11],[111,17,91,15],[112,4,92,2],[112,5,92,3],[112,6,92,4],[112,13,92,11,"error"],[112,18,92,16],[112,20,92,18],[113,6,93,4],[114,6,94,4,"console"],[114,13,94,11],[114,14,94,12,"error"],[114,19,94,17],[114,20,94,18],[114,39,94,37],[114,41,94,39,"error"],[114,46,94,44],[114,47,94,45],[115,6,95,4],[115,13,95,11,"encryptedData"],[115,26,95,24],[115,27,95,25],[115,28,95,26],[116,4,96,2],[117,2,97,0],[119,2,99,0],[120,0,100,0],[121,0,101,0],[122,0,102,0],[123,0,103,0],[124,0,104,0],[125,2,105,7],[125,17,105,22,"secureSetItem"],[125,30,105,35,"secureSetItem"],[125,31,105,36,"key"],[125,34,105,39],[125,36,105,41,"value"],[125,41,105,46],[125,43,105,48],[126,4,106,2],[126,8,106,6],[127,6,107,4],[127,12,107,10,"encryptedValue"],[127,26,107,24],[127,29,107,27],[127,35,107,33,"encrypt"],[127,42,107,40],[127,43,107,41,"value"],[127,48,107,46],[127,49,107,47],[128,6,108,4],[128,12,108,10,"SecureStore"],[128,23,108,21],[128,24,108,22,"setItemAsync"],[128,36,108,34],[128,37,108,35,"key"],[128,40,108,38],[128,42,108,40,"encryptedValue"],[128,56,108,54],[128,57,108,55],[129,4,109,2],[129,5,109,3],[129,6,109,4],[129,13,109,11,"error"],[129,18,109,16],[129,20,109,18],[130,6,110,4,"console"],[130,13,110,11],[130,14,110,12,"error"],[130,19,110,17],[130,20,110,18],[130,48,110,46],[130,50,110,48,"error"],[130,55,110,53],[130,56,110,54],[131,6,111,4],[132,6,112,4],[132,12,112,10,"SecureStore"],[132,23,112,21],[132,24,112,22,"setItemAsync"],[132,36,112,34],[132,37,112,35,"key"],[132,40,112,38],[132,42,112,40,"value"],[132,47,112,45],[132,48,112,46],[133,4,113,2],[134,2,114,0],[136,2,116,0],[137,0,117,0],[138,0,118,0],[139,0,119,0],[140,0,120,0],[141,2,121,7],[141,17,121,22,"secureGetItem"],[141,30,121,35,"secureGetItem"],[141,31,121,36,"key"],[141,34,121,39],[141,36,121,41],[142,4,122,2],[142,8,122,6],[143,6,123,4],[143,12,123,10,"encryptedValue"],[143,26,123,24],[143,29,123,27],[143,35,123,33,"SecureStore"],[143,46,123,44],[143,47,123,45,"getItemAsync"],[143,59,123,57],[143,60,123,58,"key"],[143,63,123,61],[143,64,123,62],[144,6,124,4],[144,10,124,8],[144,11,124,9,"encryptedValue"],[144,25,124,23],[144,27,124,25],[144,34,124,32],[144,38,124,36],[145,6,126,4],[145,13,126,11],[145,19,126,17,"decrypt"],[145,26,126,24],[145,27,126,25,"encryptedValue"],[145,41,126,39],[145,42,126,40],[146,4,127,2],[146,5,127,3],[146,6,127,4],[146,13,127,11,"error"],[146,18,127,16],[146,20,127,18],[147,6,128,4,"console"],[147,13,128,11],[147,14,128,12,"error"],[147,19,128,17],[147,20,128,18],[147,51,128,49],[147,53,128,51,"error"],[147,58,128,56],[147,59,128,57],[148,6,129,4],[149,6,130,4],[149,13,130,11],[149,19,130,17,"SecureStore"],[149,30,130,28],[149,31,130,29,"getItemAsync"],[149,43,130,41],[149,44,130,42,"key"],[149,47,130,45],[149,48,130,46],[150,4,131,2],[151,2,132,0],[153,2,134,0],[154,0,135,0],[155,0,136,0],[156,0,137,0],[157,0,138,0],[158,2,139,7],[158,17,139,22,"secureDeleteItem"],[158,33,139,38,"secureDeleteItem"],[158,34,139,39,"key"],[158,37,139,42],[158,39,139,44],[159,4,140,2],[159,8,140,6],[160,6,141,4],[160,12,141,10,"SecureStore"],[160,23,141,21],[160,24,141,22,"deleteItemAsync"],[160,39,141,37],[160,40,141,38,"key"],[160,43,141,41],[160,44,141,42],[161,4,142,2],[161,5,142,3],[161,6,142,4],[161,13,142,11,"error"],[161,18,142,16],[161,20,142,18],[162,6,143,4,"console"],[162,13,143,11],[162,14,143,12,"error"],[162,19,143,17],[162,20,143,18],[162,49,143,47],[162,51,143,49,"error"],[162,56,143,54],[162,57,143,55],[163,4,144,2],[164,2,145,0],[165,0,145,1],[165,3]],"functionMap":{"names":["<global>","getEncryptionKey","Array.from.map$argument_0","encrypt","decrypt","secureSetItem","secureGetItem","secureDeleteItem"],"mappings":"AAA;ACU;WCO,0CD;CDO;AGO;WDM,0CC;CHuB;AIO;CJ6B;OKQ;CLS;OMO;CNW;OOO"},"hasCjsExports":false},"type":"js/module"}]}