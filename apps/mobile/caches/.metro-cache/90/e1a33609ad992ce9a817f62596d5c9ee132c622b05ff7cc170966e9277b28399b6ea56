{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.resolveBlurhashString = resolveBlurhashString;\n  exports.resolveThumbhashString = resolveThumbhashString;\n  /**\n   * Converts a string in blurhash format (`blurhash:/<hash>/<width>/<height>`\n   * or <hash>/<width>/<height>) into an `ImageSource`.\n   *\n   * @return An ImageSource representing the provided blurhash.\n   * */\n  function resolveBlurhashString(str) {\n    const [hash, width, height] = str.replace(/^blurhash:\\//, '').split('/');\n    return {\n      uri: 'blurhash:/' + hash,\n      width: parseInt(width, 10) || 16,\n      height: parseInt(height, 10) || 16\n    };\n  }\n\n  /**\n   * Converts a string in thumbhash format (`thumbhash:/<hash>` or `<hash>`)\n   * into an `ImageSource`.\n   * Note: Unlike the `resolveBlurhashString` the `thumbhash:/` scheme has to be present,\n   * as the scheme has to be explicitly stated to be interpreted a `thumbhash` source.\n   *\n   * @return An ImageSource representing the provided thumbhash.\n   * */\n  function resolveThumbhashString(str) {\n    const hash = str.replace(/^thumbhash:\\//, '');\n    return {\n      uri: 'thumbhash:/' + hash\n    };\n  }\n});","lineCount":36,"map":[[7,2,3,0],[8,0,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,2,9,7],[13,11,9,16,"resolveBlurhashString"],[13,32,9,37,"resolveBlurhashString"],[13,33,9,38,"str"],[13,36,9,49],[13,38,9,64],[14,4,10,2],[14,10,10,8],[14,11,10,9,"hash"],[14,15,10,13],[14,17,10,15,"width"],[14,22,10,20],[14,24,10,22,"height"],[14,30,10,28],[14,31,10,29],[14,34,10,32,"str"],[14,37,10,35],[14,38,10,36,"replace"],[14,45,10,43],[14,46,10,44],[14,60,10,58],[14,62,10,60],[14,64,10,62],[14,65,10,63],[14,66,10,64,"split"],[14,71,10,69],[14,72,10,70],[14,75,10,73],[14,76,10,74],[15,4,11,2],[15,11,11,9],[16,6,12,4,"uri"],[16,9,12,7],[16,11,12,9],[16,23,12,21],[16,26,12,24,"hash"],[16,30,12,28],[17,6,13,4,"width"],[17,11,13,9],[17,13,13,11,"parseInt"],[17,21,13,19],[17,22,13,20,"width"],[17,27,13,25],[17,29,13,27],[17,31,13,29],[17,32,13,30],[17,36,13,34],[17,38,13,36],[18,6,14,4,"height"],[18,12,14,10],[18,14,14,12,"parseInt"],[18,22,14,20],[18,23,14,21,"height"],[18,29,14,27],[18,31,14,29],[18,33,14,31],[18,34,14,32],[18,38,14,36],[19,4,15,2],[19,5,15,3],[20,2,16,0],[22,2,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,2,26,7],[30,11,26,16,"resolveThumbhashString"],[30,33,26,38,"resolveThumbhashString"],[30,34,26,39,"str"],[30,37,26,50],[30,39,26,65],[31,4,27,2],[31,10,27,8,"hash"],[31,14,27,12],[31,17,27,15,"str"],[31,20,27,18],[31,21,27,19,"replace"],[31,28,27,26],[31,29,27,27],[31,44,27,42],[31,46,27,44],[31,48,27,46],[31,49,27,47],[32,4,28,2],[32,11,28,9],[33,6,29,4,"uri"],[33,9,29,7],[33,11,29,9],[33,24,29,22],[33,27,29,25,"hash"],[34,4,30,2],[34,5,30,3],[35,2,31,0],[36,0,31,1],[36,3]],"functionMap":{"names":["<global>","resolveBlurhashString","resolveThumbhashString"],"mappings":"AAA;OCQ;CDO;OEU;CFK"}},"type":"js/module"}]}