{"dependencies":[{"name":"lodash/inRange","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"X+kokBLlLFiZJmpT6+r9ZmROeos=","exportNames":["*"],"imports":1}},{"name":"xdate","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":26,"index":64}}],"key":"gTa7eBSzdZCpR7C6CXaJhVpu6vY=","exportNames":["*"],"imports":1}},{"name":"../commons/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":65},"end":{"line":3,"column":45,"index":110}}],"key":"SMwBhX4ALvbYIiiSbn97/4tbxzQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"HOUR_BLOCK_HEIGHT\", {\n    enumerable: true,\n    get: function () {\n      return HOUR_BLOCK_HEIGHT;\n    }\n  });\n  exports.populateEvents = populateEvents;\n  exports.buildUnavailableHoursBlocks = buildUnavailableHoursBlocks;\n  var _lodashInRange = require(_dependencyMap[0], \"lodash/inRange\");\n  var inRange = _interopDefault(_lodashInRange);\n  var _xdate = require(_dependencyMap[1], \"xdate\");\n  var XDate = _interopDefault(_xdate);\n  var _commonsConstants = require(_dependencyMap[2], \"../commons/constants\");\n  var constants = _interopDefault(_commonsConstants);\n  const HOUR_BLOCK_HEIGHT = 100;\n  const OVERLAP_EVENTS_SPACINGS = 10;\n  const RIGHT_EDGE_SPACING = 10;\n  function buildEvent(event, left, width, {\n    dayStart = 0,\n    hourBlockHeight = HOUR_BLOCK_HEIGHT\n  }) {\n    const startTime = new XDate.default(event.start);\n    const endTime = event.end ? new XDate.default(event.end) : new XDate.default(startTime).addHours(1);\n    const dayStartTime = new XDate.default(startTime).clearTime();\n    return {\n      ...event,\n      top: (dayStartTime.diffHours(startTime) - dayStart) * hourBlockHeight,\n      height: startTime.diffHours(endTime) * hourBlockHeight,\n      width,\n      left\n    };\n  }\n  function hasCollision(a, b) {\n    return a.end > b.start && a.start < b.end;\n  }\n  function calcColumnSpan(event, columnIndex, columns) {\n    let colSpan = 1;\n    for (let i = columnIndex + 1; i < columns.length; i++) {\n      const column = columns[i];\n      const foundCollision = column.find(ev => hasCollision(event, ev));\n      if (foundCollision) {\n        return colSpan;\n      }\n      colSpan++;\n    }\n    return colSpan;\n  }\n  function packOverlappingEventGroup(columns, calculatedEvents, populateOptions) {\n    const {\n      screenWidth = constants.default.screenWidth,\n      rightEdgeSpacing = RIGHT_EDGE_SPACING,\n      overlapEventsSpacing = OVERLAP_EVENTS_SPACINGS\n    } = populateOptions;\n    columns.forEach((column, columnIndex) => {\n      column.forEach(event => {\n        const totalWidth = screenWidth - rightEdgeSpacing;\n        const columnSpan = calcColumnSpan(event, columnIndex, columns);\n        const eventLeft = columnIndex / columns.length * totalWidth;\n        let eventWidth = totalWidth * (columnSpan / columns.length);\n        if (columnIndex + columnSpan <= columns.length - 1) {\n          eventWidth -= overlapEventsSpacing;\n        }\n        calculatedEvents.push(buildEvent(event, eventLeft, eventWidth, populateOptions));\n      });\n    });\n  }\n  function populateEvents(_events, populateOptions) {\n    let lastEnd = null;\n    let columns = [];\n    const calculatedEvents = [];\n    const events = _events.map((ev, index) => ({\n      ...ev,\n      index: index\n    })).sort(function (a, b) {\n      if (a.start < b.start) return -1;\n      if (a.start > b.start) return 1;\n      if (a.end < b.end) return -1;\n      if (a.end > b.end) return 1;\n      return 0;\n    });\n    events.forEach(function (ev) {\n      // Reset recent overlapping event group and start a new one\n      if (lastEnd !== null && ev.start >= lastEnd) {\n        packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n        columns = [];\n        lastEnd = null;\n      }\n\n      // Place current event in the right column where it doesn't overlap\n      let placed = false;\n      for (let i = 0; i < columns.length; i++) {\n        const col = columns[i];\n        if (!hasCollision(col[col.length - 1], ev)) {\n          col.push(ev);\n          placed = true;\n          break;\n        }\n      }\n\n      // If curr event wasn't placed in any of the columns, create a new column for it\n      if (!placed) {\n        columns.push([ev]);\n      }\n      if (lastEnd === null || ev.end > lastEnd) {\n        lastEnd = ev.end;\n      }\n    });\n    if (columns.length > 0) {\n      packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n    }\n    return calculatedEvents;\n  }\n  function buildUnavailableHoursBlocks(unavailableHours = [], options) {\n    const {\n      hourBlockHeight = HOUR_BLOCK_HEIGHT,\n      dayStart = 0,\n      dayEnd = 24\n    } = options || {};\n    const totalDayHours = dayEnd - dayStart;\n    const totalDayHeight = (dayEnd - dayStart) * hourBlockHeight;\n    return unavailableHours.map(hours => {\n      if (!(0, inRange.default)(hours.start, 0, 25) || !(0, inRange.default)(hours.end, 0, 25)) {\n        console.error('Calendar Timeline unavailableHours is invalid. Hours should be between 0 and 24');\n        return undefined;\n      }\n      if (hours.start >= hours.end) {\n        console.error('Calendar Timeline availableHours is invalid. start hour should be earlier than end hour');\n        return undefined;\n      }\n      const startFixed = Math.max(hours.start, dayStart);\n      const endFixed = Math.min(hours.end, dayEnd);\n      return {\n        top: (startFixed - dayStart) / totalDayHours * totalDayHeight,\n        height: (endFixed - startFixed) * hourBlockHeight\n      };\n    })\n    // Note: this filter falsy values (undefined blocks)\n    .filter(Boolean);\n  }\n});","lineCount":151,"map":[[12,2,26,0,"Object"],[12,8,26,0],[12,9,26,0,"defineProperty"],[12,23,26,0],[12,24,26,0,"exports"],[12,31,26,0],[13,4,26,0,"enumerable"],[13,14,26,0],[14,4,26,0,"get"],[14,7,26,0],[14,18,26,0,"get"],[14,19,26,0],[15,6,26,0],[15,13,26,0,"HOUR_BLOCK_HEIGHT"],[15,30,26,0],[16,4,26,0],[17,2,26,0],[18,2,97,0,"exports"],[18,9,97,0],[18,10,97,0,"populateEvents"],[18,24,97,0],[18,27,97,0,"populateEvents"],[18,41,97,0],[19,2,148,0,"exports"],[19,9,148,0],[19,10,148,0,"buildUnavailableHoursBlocks"],[19,37,148,0],[19,40,148,0,"buildUnavailableHoursBlocks"],[19,67,148,0],[20,2,1,0],[20,6,1,0,"_lodashInRange"],[20,20,1,0],[20,23,1,0,"require"],[20,30,1,0],[20,31,1,0,"_dependencyMap"],[20,45,1,0],[21,2,1,0],[21,6,1,0,"inRange"],[21,13,1,0],[21,16,1,0,"_interopDefault"],[21,31,1,0],[21,32,1,0,"_lodashInRange"],[21,46,1,0],[22,2,2,0],[22,6,2,0,"_xdate"],[22,12,2,0],[22,15,2,0,"require"],[22,22,2,0],[22,23,2,0,"_dependencyMap"],[22,37,2,0],[23,2,2,0],[23,6,2,0,"XDate"],[23,11,2,0],[23,14,2,0,"_interopDefault"],[23,29,2,0],[23,30,2,0,"_xdate"],[23,36,2,0],[24,2,3,0],[24,6,3,0,"_commonsConstants"],[24,23,3,0],[24,26,3,0,"require"],[24,33,3,0],[24,34,3,0,"_dependencyMap"],[24,48,3,0],[25,2,3,0],[25,6,3,0,"constants"],[25,15,3,0],[25,18,3,0,"_interopDefault"],[25,33,3,0],[25,34,3,0,"_commonsConstants"],[25,51,3,0],[26,2,26,7],[26,8,26,13,"HOUR_BLOCK_HEIGHT"],[26,25,26,30],[26,28,26,33],[26,31,26,36],[27,2,27,0],[27,8,27,6,"OVERLAP_EVENTS_SPACINGS"],[27,31,27,29],[27,34,27,32],[27,36,27,34],[28,2,28,0],[28,8,28,6,"RIGHT_EDGE_SPACING"],[28,26,28,24],[28,29,28,27],[28,31,28,29],[29,2,30,0],[29,11,30,9,"buildEvent"],[29,21,30,19,"buildEvent"],[29,22,31,2,"event"],[29,27,31,32],[29,29,32,2,"left"],[29,33,32,14],[29,35,33,2,"width"],[29,40,33,15],[29,42,34,2],[30,4,34,3,"dayStart"],[30,12,34,11],[30,15,34,14],[30,16,34,15],[31,4,34,17,"hourBlockHeight"],[31,19,34,32],[31,22,34,35,"HOUR_BLOCK_HEIGHT"],[32,2,34,69],[32,3,34,70],[32,5,35,15],[33,4,36,2],[33,10,36,8,"startTime"],[33,19,36,17],[33,22,36,20],[33,26,36,24,"XDate"],[33,31,36,29],[33,32,36,29,"default"],[33,39,36,29],[33,40,36,30,"event"],[33,45,36,35],[33,46,36,36,"start"],[33,51,36,41],[33,52,36,42],[34,4,37,2],[34,10,37,8,"endTime"],[34,17,37,15],[34,20,37,18,"event"],[34,25,37,23],[34,26,37,24,"end"],[34,29,37,27],[34,32,37,30],[34,36,37,34,"XDate"],[34,41,37,39],[34,42,37,39,"default"],[34,49,37,39],[34,50,37,40,"event"],[34,55,37,45],[34,56,37,46,"end"],[34,59,37,49],[34,60,37,50],[34,63,37,53],[34,67,37,57,"XDate"],[34,72,37,62],[34,73,37,62,"default"],[34,80,37,62],[34,81,37,63,"startTime"],[34,90,37,72],[34,91,37,73],[34,92,37,74,"addHours"],[34,100,37,82],[34,101,37,83],[34,102,37,84],[34,103,37,85],[35,4,39,2],[35,10,39,8,"dayStartTime"],[35,22,39,20],[35,25,39,23],[35,29,39,27,"XDate"],[35,34,39,32],[35,35,39,32,"default"],[35,42,39,32],[35,43,39,33,"startTime"],[35,52,39,42],[35,53,39,43],[35,54,39,44,"clearTime"],[35,63,39,53],[35,64,39,54],[35,65,39,55],[36,4,41,2],[36,11,41,9],[37,6,42,4],[37,9,42,7,"event"],[37,14,42,12],[38,6,43,4,"top"],[38,9,43,7],[38,11,43,9],[38,12,43,10,"dayStartTime"],[38,24,43,22],[38,25,43,23,"diffHours"],[38,34,43,32],[38,35,43,33,"startTime"],[38,44,43,42],[38,45,43,43],[38,48,43,46,"dayStart"],[38,56,43,54],[38,60,43,58,"hourBlockHeight"],[38,75,43,73],[39,6,44,4,"height"],[39,12,44,10],[39,14,44,12,"startTime"],[39,23,44,21],[39,24,44,22,"diffHours"],[39,33,44,31],[39,34,44,32,"endTime"],[39,41,44,39],[39,42,44,40],[39,45,44,43,"hourBlockHeight"],[39,60,44,58],[40,6,45,4,"width"],[40,11,45,9],[41,6,46,4,"left"],[42,4,47,2],[42,5,47,3],[43,2,48,0],[44,2,50,0],[44,11,50,9,"hasCollision"],[44,23,50,21,"hasCollision"],[44,24,50,22,"a"],[44,25,50,30],[44,27,50,32,"b"],[44,28,50,40],[44,30,50,42],[45,4,51,2],[45,11,51,9,"a"],[45,12,51,10],[45,13,51,11,"end"],[45,16,51,14],[45,19,51,17,"b"],[45,20,51,18],[45,21,51,19,"start"],[45,26,51,24],[45,30,51,28,"a"],[45,31,51,29],[45,32,51,30,"start"],[45,37,51,35],[45,40,51,38,"b"],[45,41,51,39],[45,42,51,40,"end"],[45,45,51,43],[46,2,52,0],[47,2,54,0],[47,11,54,9,"calcColumnSpan"],[47,25,54,23,"calcColumnSpan"],[47,26,54,24,"event"],[47,31,54,36],[47,33,54,38,"columnIndex"],[47,44,54,57],[47,46,54,59,"columns"],[47,53,54,77],[47,55,54,79],[48,4,55,2],[48,8,55,6,"colSpan"],[48,15,55,13],[48,18,55,16],[48,19,55,17],[49,4,57,2],[49,9,57,7],[49,13,57,11,"i"],[49,14,57,12],[49,17,57,15,"columnIndex"],[49,28,57,26],[49,31,57,29],[49,32,57,30],[49,34,57,32,"i"],[49,35,57,33],[49,38,57,36,"columns"],[49,45,57,43],[49,46,57,44,"length"],[49,52,57,50],[49,54,57,52,"i"],[49,55,57,53],[49,57,57,55],[49,59,57,57],[50,6,58,4],[50,12,58,10,"column"],[50,18,58,16],[50,21,58,19,"columns"],[50,28,58,26],[50,29,58,27,"i"],[50,30,58,28],[50,31,58,29],[51,6,60,4],[51,12,60,10,"foundCollision"],[51,26,60,24],[51,29,60,27,"column"],[51,35,60,33],[51,36,60,34,"find"],[51,40,60,38],[51,41,60,39,"ev"],[51,43,60,41],[51,47,60,45,"hasCollision"],[51,59,60,57],[51,60,60,58,"event"],[51,65,60,63],[51,67,60,65,"ev"],[51,69,60,67],[51,70,60,68],[51,71,60,69],[52,6,61,4],[52,10,61,8,"foundCollision"],[52,24,61,22],[52,26,61,24],[53,8,62,6],[53,15,62,13,"colSpan"],[53,22,62,20],[54,6,63,4],[55,6,65,4,"colSpan"],[55,13,65,11],[55,15,65,13],[56,4,66,2],[57,4,68,2],[57,11,68,9,"colSpan"],[57,18,68,16],[58,2,69,0],[59,2,71,0],[59,11,71,9,"packOverlappingEventGroup"],[59,36,71,34,"packOverlappingEventGroup"],[59,37,72,2,"columns"],[59,44,72,33],[59,46,73,2,"calculatedEvents"],[59,62,73,33],[59,64,74,2,"populateOptions"],[59,79,74,34],[59,81,75,2],[60,4,76,2],[60,10,76,8],[61,6,77,4,"screenWidth"],[61,17,77,15],[61,20,77,18,"constants"],[61,29,77,27],[61,30,77,27,"default"],[61,37,77,27],[61,38,77,28,"screenWidth"],[61,49,77,39],[62,6,78,4,"rightEdgeSpacing"],[62,22,78,20],[62,25,78,23,"RIGHT_EDGE_SPACING"],[62,43,78,41],[63,6,79,4,"overlapEventsSpacing"],[63,26,79,24],[63,29,79,27,"OVERLAP_EVENTS_SPACINGS"],[64,4,80,2],[64,5,80,3],[64,8,80,6,"populateOptions"],[64,23,80,21],[65,4,81,2,"columns"],[65,11,81,9],[65,12,81,10,"forEach"],[65,19,81,17],[65,20,81,18],[65,21,81,19,"column"],[65,27,81,25],[65,29,81,27,"columnIndex"],[65,40,81,38],[65,45,81,43],[66,6,82,4,"column"],[66,12,82,10],[66,13,82,11,"forEach"],[66,20,82,18],[66,21,82,19,"event"],[66,26,82,24],[66,30,82,28],[67,8,83,6],[67,14,83,12,"totalWidth"],[67,24,83,22],[67,27,83,25,"screenWidth"],[67,38,83,36],[67,41,83,39,"rightEdgeSpacing"],[67,57,83,55],[68,8,84,6],[68,14,84,12,"columnSpan"],[68,24,84,22],[68,27,84,25,"calcColumnSpan"],[68,41,84,39],[68,42,84,40,"event"],[68,47,84,45],[68,49,84,47,"columnIndex"],[68,60,84,58],[68,62,84,60,"columns"],[68,69,84,67],[68,70,84,68],[69,8,85,6],[69,14,85,12,"eventLeft"],[69,23,85,21],[69,26,85,25,"columnIndex"],[69,37,85,36],[69,40,85,39,"columns"],[69,47,85,46],[69,48,85,47,"length"],[69,54,85,53],[69,57,85,57,"totalWidth"],[69,67,85,67],[70,8,86,6],[70,12,86,10,"eventWidth"],[70,22,86,20],[70,25,86,23,"totalWidth"],[70,35,86,33],[70,39,86,37,"columnSpan"],[70,49,86,47],[70,52,86,50,"columns"],[70,59,86,57],[70,60,86,58,"length"],[70,66,86,64],[70,67,86,65],[71,8,88,6],[71,12,88,10,"columnIndex"],[71,23,88,21],[71,26,88,24,"columnSpan"],[71,36,88,34],[71,40,88,38,"columns"],[71,47,88,45],[71,48,88,46,"length"],[71,54,88,52],[71,57,88,55],[71,58,88,56],[71,60,88,58],[72,10,89,8,"eventWidth"],[72,20,89,18],[72,24,89,22,"overlapEventsSpacing"],[72,44,89,42],[73,8,90,6],[74,8,92,6,"calculatedEvents"],[74,24,92,22],[74,25,92,23,"push"],[74,29,92,27],[74,30,92,28,"buildEvent"],[74,40,92,38],[74,41,92,39,"event"],[74,46,92,44],[74,48,92,46,"eventLeft"],[74,57,92,55],[74,59,92,57,"eventWidth"],[74,69,92,67],[74,71,92,69,"populateOptions"],[74,86,92,84],[74,87,92,85],[74,88,92,86],[75,6,93,4],[75,7,93,5],[75,8,93,6],[76,4,94,2],[76,5,94,3],[76,6,94,4],[77,2,95,0],[78,2,97,7],[78,11,97,16,"populateEvents"],[78,25,97,30,"populateEvents"],[78,26,97,31,"_events"],[78,33,97,47],[78,35,97,49,"populateOptions"],[78,50,97,81],[78,52,97,83],[79,4,98,2],[79,8,98,6,"lastEnd"],[79,15,98,28],[79,18,98,31],[79,22,98,35],[80,4,99,2],[80,8,99,6,"columns"],[80,15,99,37],[80,18,99,40],[80,20,99,42],[81,4,100,2],[81,10,100,8,"calculatedEvents"],[81,26,100,39],[81,29,100,42],[81,31,100,44],[82,4,102,2],[82,10,102,8,"events"],[82,16,102,36],[82,19,102,39,"_events"],[82,26,102,46],[82,27,103,5,"map"],[82,30,103,8],[82,31,103,9],[82,32,103,10,"ev"],[82,34,103,19],[82,36,103,21,"index"],[82,41,103,34],[82,47,103,40],[83,6,103,41],[83,9,103,44,"ev"],[83,11,103,46],[84,6,103,48,"index"],[84,11,103,53],[84,13,103,55,"index"],[85,4,103,60],[85,5,103,61],[85,6,103,62],[85,7,103,63],[85,8,104,5,"sort"],[85,12,104,9],[85,13,104,10],[85,23,104,20,"a"],[85,24,104,28],[85,26,104,30,"b"],[85,27,104,38],[85,29,104,40],[86,6,105,6],[86,10,105,10,"a"],[86,11,105,11],[86,12,105,12,"start"],[86,17,105,17],[86,20,105,20,"b"],[86,21,105,21],[86,22,105,22,"start"],[86,27,105,27],[86,29,105,29],[86,36,105,36],[86,37,105,37],[86,38,105,38],[87,6,106,6],[87,10,106,10,"a"],[87,11,106,11],[87,12,106,12,"start"],[87,17,106,17],[87,20,106,20,"b"],[87,21,106,21],[87,22,106,22,"start"],[87,27,106,27],[87,29,106,29],[87,36,106,36],[87,37,106,37],[88,6,107,6],[88,10,107,10,"a"],[88,11,107,11],[88,12,107,12,"end"],[88,15,107,15],[88,18,107,18,"b"],[88,19,107,19],[88,20,107,20,"end"],[88,23,107,23],[88,25,107,25],[88,32,107,32],[88,33,107,33],[88,34,107,34],[89,6,108,6],[89,10,108,10,"a"],[89,11,108,11],[89,12,108,12,"end"],[89,15,108,15],[89,18,108,18,"b"],[89,19,108,19],[89,20,108,20,"end"],[89,23,108,23],[89,25,108,25],[89,32,108,32],[89,33,108,33],[90,6,109,6],[90,13,109,13],[90,14,109,14],[91,4,110,4],[91,5,110,5],[91,6,110,6],[92,4,112,2,"events"],[92,10,112,8],[92,11,112,9,"forEach"],[92,18,112,16],[92,19,112,17],[92,29,112,27,"ev"],[92,31,112,29],[92,33,112,31],[93,6,113,4],[94,6,114,4],[94,10,114,8,"lastEnd"],[94,17,114,15],[94,22,114,20],[94,26,114,24],[94,30,114,28,"ev"],[94,32,114,30],[94,33,114,31,"start"],[94,38,114,36],[94,42,114,40,"lastEnd"],[94,49,114,47],[94,51,114,49],[95,8,115,6,"packOverlappingEventGroup"],[95,33,115,31],[95,34,115,32,"columns"],[95,41,115,39],[95,43,115,41,"calculatedEvents"],[95,59,115,57],[95,61,115,59,"populateOptions"],[95,76,115,74],[95,77,115,75],[96,8,116,6,"columns"],[96,15,116,13],[96,18,116,16],[96,20,116,18],[97,8,117,6,"lastEnd"],[97,15,117,13],[97,18,117,16],[97,22,117,20],[98,6,118,4],[100,6,120,4],[101,6,121,4],[101,10,121,8,"placed"],[101,16,121,14],[101,19,121,17],[101,24,121,22],[102,6,122,4],[102,11,122,9],[102,15,122,13,"i"],[102,16,122,14],[102,19,122,17],[102,20,122,18],[102,22,122,20,"i"],[102,23,122,21],[102,26,122,24,"columns"],[102,33,122,31],[102,34,122,32,"length"],[102,40,122,38],[102,42,122,40,"i"],[102,43,122,41],[102,45,122,43],[102,47,122,45],[103,8,123,6],[103,14,123,12,"col"],[103,17,123,15],[103,20,123,18,"columns"],[103,27,123,25],[103,28,123,26,"i"],[103,29,123,27],[103,30,123,28],[104,8,124,6],[104,12,124,10],[104,13,124,11,"hasCollision"],[104,25,124,23],[104,26,124,24,"col"],[104,29,124,27],[104,30,124,28,"col"],[104,33,124,31],[104,34,124,32,"length"],[104,40,124,38],[104,43,124,41],[104,44,124,42],[104,45,124,43],[104,47,124,45,"ev"],[104,49,124,47],[104,50,124,48],[104,52,124,50],[105,10,125,8,"col"],[105,13,125,11],[105,14,125,12,"push"],[105,18,125,16],[105,19,125,17,"ev"],[105,21,125,19],[105,22,125,20],[106,10,126,8,"placed"],[106,16,126,14],[106,19,126,17],[106,23,126,21],[107,10,127,8],[108,8,128,6],[109,6,129,4],[111,6,131,4],[112,6,132,4],[112,10,132,8],[112,11,132,9,"placed"],[112,17,132,15],[112,19,132,17],[113,8,133,6,"columns"],[113,15,133,13],[113,16,133,14,"push"],[113,20,133,18],[113,21,133,19],[113,22,133,20,"ev"],[113,24,133,22],[113,25,133,23],[113,26,133,24],[114,6,134,4],[115,6,136,4],[115,10,136,8,"lastEnd"],[115,17,136,15],[115,22,136,20],[115,26,136,24],[115,30,136,28,"ev"],[115,32,136,30],[115,33,136,31,"end"],[115,36,136,34],[115,39,136,37,"lastEnd"],[115,46,136,44],[115,48,136,46],[116,8,137,6,"lastEnd"],[116,15,137,13],[116,18,137,16,"ev"],[116,20,137,18],[116,21,137,19,"end"],[116,24,137,22],[117,6,138,4],[118,4,139,2],[118,5,139,3],[118,6,139,4],[119,4,141,2],[119,8,141,6,"columns"],[119,15,141,13],[119,16,141,14,"length"],[119,22,141,20],[119,25,141,23],[119,26,141,24],[119,28,141,26],[120,6,142,4,"packOverlappingEventGroup"],[120,31,142,29],[120,32,142,30,"columns"],[120,39,142,37],[120,41,142,39,"calculatedEvents"],[120,57,142,55],[120,59,142,57,"populateOptions"],[120,74,142,72],[120,75,142,73],[121,4,143,2],[122,4,145,2],[122,11,145,9,"calculatedEvents"],[122,27,145,25],[123,2,146,0],[124,2,148,7],[124,11,148,16,"buildUnavailableHoursBlocks"],[124,38,148,43,"buildUnavailableHoursBlocks"],[124,39,149,2,"unavailableHours"],[124,55,149,38],[124,58,149,41],[124,60,149,43],[124,62,150,2,"options"],[124,69,150,34],[124,71,151,2],[125,4,152,2],[125,10,152,8],[126,6,152,9,"hourBlockHeight"],[126,21,152,24],[126,24,152,27,"HOUR_BLOCK_HEIGHT"],[126,41,152,44],[127,6,152,46,"dayStart"],[127,14,152,54],[127,17,152,57],[127,18,152,58],[128,6,152,60,"dayEnd"],[128,12,152,66],[128,15,152,69],[129,4,152,71],[129,5,152,72],[129,8,152,75,"options"],[129,15,152,82],[129,19,152,86],[129,20,152,87],[129,21,152,88],[130,4,153,2],[130,10,153,8,"totalDayHours"],[130,23,153,21],[130,26,153,24,"dayEnd"],[130,32,153,30],[130,35,153,33,"dayStart"],[130,43,153,41],[131,4,154,2],[131,10,154,8,"totalDayHeight"],[131,24,154,22],[131,27,154,25],[131,28,154,26,"dayEnd"],[131,34,154,32],[131,37,154,35,"dayStart"],[131,45,154,43],[131,49,154,47,"hourBlockHeight"],[131,64,154,62],[132,4,155,2],[132,11,156,4,"unavailableHours"],[132,27,156,20],[132,28,157,7,"map"],[132,31,157,10],[132,32,157,11,"hours"],[132,37,157,16],[132,41,157,20],[133,6,158,8],[133,10,158,12],[133,11,158,13],[133,15,158,13,"inRange"],[133,22,158,20],[133,23,158,20,"default"],[133,30,158,20],[133,32,158,21,"hours"],[133,37,158,26],[133,38,158,27,"start"],[133,43,158,32],[133,45,158,34],[133,46,158,35],[133,48,158,37],[133,50,158,39],[133,51,158,40],[133,55,158,44],[133,56,158,45],[133,60,158,45,"inRange"],[133,67,158,52],[133,68,158,52,"default"],[133,75,158,52],[133,77,158,53,"hours"],[133,82,158,58],[133,83,158,59,"end"],[133,86,158,62],[133,88,158,64],[133,89,158,65],[133,91,158,67],[133,93,158,69],[133,94,158,70],[133,96,158,72],[134,8,159,10,"console"],[134,15,159,17],[134,16,159,18,"error"],[134,21,159,23],[134,22,159,24],[134,103,159,105],[134,104,159,106],[135,8,160,10],[135,15,160,17,"undefined"],[135,24,160,26],[136,6,161,8],[137,6,163,8],[137,10,163,12,"hours"],[137,15,163,17],[137,16,163,18,"start"],[137,21,163,23],[137,25,163,27,"hours"],[137,30,163,32],[137,31,163,33,"end"],[137,34,163,36],[137,36,163,38],[138,8,164,10,"console"],[138,15,164,17],[138,16,164,18,"error"],[138,21,164,23],[138,22,164,24],[138,111,164,113],[138,112,164,114],[139,8,165,10],[139,15,165,17,"undefined"],[139,24,165,26],[140,6,166,8],[141,6,168,8],[141,12,168,14,"startFixed"],[141,22,168,24],[141,25,168,27,"Math"],[141,29,168,31],[141,30,168,32,"max"],[141,33,168,35],[141,34,168,36,"hours"],[141,39,168,41],[141,40,168,42,"start"],[141,45,168,47],[141,47,168,49,"dayStart"],[141,55,168,57],[141,56,168,58],[142,6,169,8],[142,12,169,14,"endFixed"],[142,20,169,22],[142,23,169,25,"Math"],[142,27,169,29],[142,28,169,30,"min"],[142,31,169,33],[142,32,169,34,"hours"],[142,37,169,39],[142,38,169,40,"end"],[142,41,169,43],[142,43,169,45,"dayEnd"],[142,49,169,51],[142,50,169,52],[143,6,171,8],[143,13,171,15],[144,8,172,10,"top"],[144,11,172,13],[144,13,172,16],[144,14,172,17,"startFixed"],[144,24,172,27],[144,27,172,30,"dayStart"],[144,35,172,38],[144,39,172,42,"totalDayHours"],[144,52,172,55],[144,55,172,59,"totalDayHeight"],[144,69,172,73],[145,8,173,10,"height"],[145,14,173,16],[145,16,173,18],[145,17,173,19,"endFixed"],[145,25,173,27],[145,28,173,30,"startFixed"],[145,38,173,40],[145,42,173,44,"hourBlockHeight"],[146,6,174,8],[146,7,174,9],[147,4,175,6],[147,5,175,7],[148,4,176,6],[149,4,176,6],[149,5,177,7,"filter"],[149,11,177,13],[149,12,177,14,"Boolean"],[149,19,177,21],[149,20,177,22],[150,2,179,0],[151,0,179,1],[151,3]],"functionMap":{"names":["<global>","buildEvent","hasCollision","calcColumnSpan","column.find$argument_0","packOverlappingEventGroup","columns.forEach$argument_0","column.forEach$argument_0","populateEvents","_events.map$argument_0","_events.map.sort$argument_0","events.forEach$argument_0","buildUnavailableHoursBlocks","unavailableHours.map$argument_0"],"mappings":"AAA;AC6B;CDkB;AEE;CFE;AGE;uCCM,6BD;CHS;AKE;kBCU;mBCC;KDW;GDC;CLC;OQE;SCM,qDD;UEC;KFM;iBGE;GH2B;CRO;OYE;WCS;ODkB;CZI"},"hasCjsExports":false},"type":"js/module"}]}