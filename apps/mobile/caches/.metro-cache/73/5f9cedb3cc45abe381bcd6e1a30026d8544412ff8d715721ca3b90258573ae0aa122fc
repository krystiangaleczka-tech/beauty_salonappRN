{"dependencies":[{"name":"lodash/inRange","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"X+kokBLlLFiZJmpT6+r9ZmROeos=","exportNames":["*"],"imports":1}},{"name":"xdate","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":26,"index":64}}],"key":"gTa7eBSzdZCpR7C6CXaJhVpu6vY=","exportNames":["*"],"imports":1}},{"name":"../commons/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":65},"end":{"line":3,"column":45,"index":110}}],"key":"SMwBhX4ALvbYIiiSbn97/4tbxzQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"HOUR_BLOCK_HEIGHT\", {\n    enumerable: true,\n    get: function () {\n      return HOUR_BLOCK_HEIGHT;\n    }\n  });\n  exports.populateEvents = populateEvents;\n  exports.buildUnavailableHoursBlocks = buildUnavailableHoursBlocks;\n  var _lodashInRange = require(_dependencyMap[0], \"lodash/inRange\");\n  var inRange = _interopDefault(_lodashInRange);\n  var _xdate = require(_dependencyMap[1], \"xdate\");\n  var XDate = _interopDefault(_xdate);\n  var _commonsConstants = require(_dependencyMap[2], \"../commons/constants\");\n  var constants = _interopDefault(_commonsConstants);\n  var HOUR_BLOCK_HEIGHT = 100;\n  var OVERLAP_EVENTS_SPACINGS = 10;\n  var RIGHT_EDGE_SPACING = 10;\n  function buildEvent(event, left, width, _ref) {\n    var _ref$dayStart = _ref.dayStart,\n      dayStart = _ref$dayStart === void 0 ? 0 : _ref$dayStart,\n      _ref$hourBlockHeight = _ref.hourBlockHeight,\n      hourBlockHeight = _ref$hourBlockHeight === void 0 ? HOUR_BLOCK_HEIGHT : _ref$hourBlockHeight;\n    var startTime = new XDate.default(event.start);\n    var endTime = event.end ? new XDate.default(event.end) : new XDate.default(startTime).addHours(1);\n    var dayStartTime = new XDate.default(startTime).clearTime();\n    return {\n      ...event,\n      top: (dayStartTime.diffHours(startTime) - dayStart) * hourBlockHeight,\n      height: startTime.diffHours(endTime) * hourBlockHeight,\n      width,\n      left\n    };\n  }\n  function hasCollision(a, b) {\n    return a.end > b.start && a.start < b.end;\n  }\n  function calcColumnSpan(event, columnIndex, columns) {\n    var colSpan = 1;\n    for (var i = columnIndex + 1; i < columns.length; i++) {\n      var column = columns[i];\n      var foundCollision = column.find(ev => hasCollision(event, ev));\n      if (foundCollision) {\n        return colSpan;\n      }\n      colSpan++;\n    }\n    return colSpan;\n  }\n  function packOverlappingEventGroup(columns, calculatedEvents, populateOptions) {\n    var _populateOptions$scre = populateOptions.screenWidth,\n      screenWidth = _populateOptions$scre === void 0 ? constants.default.screenWidth : _populateOptions$scre,\n      _populateOptions$righ = populateOptions.rightEdgeSpacing,\n      rightEdgeSpacing = _populateOptions$righ === void 0 ? RIGHT_EDGE_SPACING : _populateOptions$righ,\n      _populateOptions$over = populateOptions.overlapEventsSpacing,\n      overlapEventsSpacing = _populateOptions$over === void 0 ? OVERLAP_EVENTS_SPACINGS : _populateOptions$over;\n    columns.forEach((column, columnIndex) => {\n      column.forEach(event => {\n        var totalWidth = screenWidth - rightEdgeSpacing;\n        var columnSpan = calcColumnSpan(event, columnIndex, columns);\n        var eventLeft = columnIndex / columns.length * totalWidth;\n        var eventWidth = totalWidth * (columnSpan / columns.length);\n        if (columnIndex + columnSpan <= columns.length - 1) {\n          eventWidth -= overlapEventsSpacing;\n        }\n        calculatedEvents.push(buildEvent(event, eventLeft, eventWidth, populateOptions));\n      });\n    });\n  }\n  function populateEvents(_events, populateOptions) {\n    var lastEnd = null;\n    var columns = [];\n    var calculatedEvents = [];\n    var events = _events.map((ev, index) => ({\n      ...ev,\n      index: index\n    })).sort(function (a, b) {\n      if (a.start < b.start) return -1;\n      if (a.start > b.start) return 1;\n      if (a.end < b.end) return -1;\n      if (a.end > b.end) return 1;\n      return 0;\n    });\n    events.forEach(function (ev) {\n      // Reset recent overlapping event group and start a new one\n      if (lastEnd !== null && ev.start >= lastEnd) {\n        packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n        columns = [];\n        lastEnd = null;\n      }\n\n      // Place current event in the right column where it doesn't overlap\n      var placed = false;\n      for (var i = 0; i < columns.length; i++) {\n        var col = columns[i];\n        if (!hasCollision(col[col.length - 1], ev)) {\n          col.push(ev);\n          placed = true;\n          break;\n        }\n      }\n\n      // If curr event wasn't placed in any of the columns, create a new column for it\n      if (!placed) {\n        columns.push([ev]);\n      }\n      if (lastEnd === null || ev.end > lastEnd) {\n        lastEnd = ev.end;\n      }\n    });\n    if (columns.length > 0) {\n      packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n    }\n    return calculatedEvents;\n  }\n  function buildUnavailableHoursBlocks() {\n    var unavailableHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 ? arguments[1] : undefined;\n    var _ref2 = options || {},\n      _ref2$hourBlockHeight = _ref2.hourBlockHeight,\n      hourBlockHeight = _ref2$hourBlockHeight === void 0 ? HOUR_BLOCK_HEIGHT : _ref2$hourBlockHeight,\n      _ref2$dayStart = _ref2.dayStart,\n      dayStart = _ref2$dayStart === void 0 ? 0 : _ref2$dayStart,\n      _ref2$dayEnd = _ref2.dayEnd,\n      dayEnd = _ref2$dayEnd === void 0 ? 24 : _ref2$dayEnd;\n    var totalDayHours = dayEnd - dayStart;\n    var totalDayHeight = (dayEnd - dayStart) * hourBlockHeight;\n    return unavailableHours.map(hours => {\n      if (!(0, inRange.default)(hours.start, 0, 25) || !(0, inRange.default)(hours.end, 0, 25)) {\n        console.error('Calendar Timeline unavailableHours is invalid. Hours should be between 0 and 24');\n        return undefined;\n      }\n      if (hours.start >= hours.end) {\n        console.error('Calendar Timeline availableHours is invalid. start hour should be earlier than end hour');\n        return undefined;\n      }\n      var startFixed = Math.max(hours.start, dayStart);\n      var endFixed = Math.min(hours.end, dayEnd);\n      return {\n        top: (startFixed - dayStart) / totalDayHours * totalDayHeight,\n        height: (endFixed - startFixed) * hourBlockHeight\n      };\n    })\n    // Note: this filter falsy values (undefined blocks)\n    .filter(Boolean);\n  }\n});","lineCount":157,"map":[[12,2,26,0,"Object"],[12,8,26,0],[12,9,26,0,"defineProperty"],[12,23,26,0],[12,24,26,0,"exports"],[12,31,26,0],[13,4,26,0,"enumerable"],[13,14,26,0],[14,4,26,0,"get"],[14,7,26,0],[14,18,26,0,"get"],[14,19,26,0],[15,6,26,0],[15,13,26,0,"HOUR_BLOCK_HEIGHT"],[15,30,26,0],[16,4,26,0],[17,2,26,0],[18,2,97,0,"exports"],[18,9,97,0],[18,10,97,0,"populateEvents"],[18,24,97,0],[18,27,97,0,"populateEvents"],[18,41,97,0],[19,2,148,0,"exports"],[19,9,148,0],[19,10,148,0,"buildUnavailableHoursBlocks"],[19,37,148,0],[19,40,148,0,"buildUnavailableHoursBlocks"],[19,67,148,0],[20,2,1,0],[20,6,1,0,"_lodashInRange"],[20,20,1,0],[20,23,1,0,"require"],[20,30,1,0],[20,31,1,0,"_dependencyMap"],[20,45,1,0],[21,2,1,0],[21,6,1,0,"inRange"],[21,13,1,0],[21,16,1,0,"_interopDefault"],[21,31,1,0],[21,32,1,0,"_lodashInRange"],[21,46,1,0],[22,2,2,0],[22,6,2,0,"_xdate"],[22,12,2,0],[22,15,2,0,"require"],[22,22,2,0],[22,23,2,0,"_dependencyMap"],[22,37,2,0],[23,2,2,0],[23,6,2,0,"XDate"],[23,11,2,0],[23,14,2,0,"_interopDefault"],[23,29,2,0],[23,30,2,0,"_xdate"],[23,36,2,0],[24,2,3,0],[24,6,3,0,"_commonsConstants"],[24,23,3,0],[24,26,3,0,"require"],[24,33,3,0],[24,34,3,0,"_dependencyMap"],[24,48,3,0],[25,2,3,0],[25,6,3,0,"constants"],[25,15,3,0],[25,18,3,0,"_interopDefault"],[25,33,3,0],[25,34,3,0,"_commonsConstants"],[25,51,3,0],[26,2,26,7],[26,6,26,13,"HOUR_BLOCK_HEIGHT"],[26,23,26,30],[26,26,26,33],[26,29,26,36],[27,2,27,0],[27,6,27,6,"OVERLAP_EVENTS_SPACINGS"],[27,29,27,29],[27,32,27,32],[27,34,27,34],[28,2,28,0],[28,6,28,6,"RIGHT_EDGE_SPACING"],[28,24,28,24],[28,27,28,27],[28,29,28,29],[29,2,30,0],[29,11,30,9,"buildEvent"],[29,21,30,19,"buildEvent"],[29,22,31,2,"event"],[29,27,31,32],[29,29,32,2,"left"],[29,33,32,14],[29,35,33,2,"width"],[29,40,33,15],[29,42,33,15,"_ref"],[29,46,33,15],[29,48,35,15],[30,4,35,15],[30,8,35,15,"_ref$dayStart"],[30,21,35,15],[30,24,35,15,"_ref"],[30,28,35,15],[30,29,34,3,"dayStart"],[30,37,34,11],[31,6,34,3,"dayStart"],[31,14,34,11],[31,17,34,11,"_ref$dayStart"],[31,30,34,11],[31,44,34,14],[31,45,34,15],[31,48,34,15,"_ref$dayStart"],[31,61,34,15],[32,6,34,15,"_ref$hourBlockHeight"],[32,26,34,15],[32,29,34,15,"_ref"],[32,33,34,15],[32,34,34,17,"hourBlockHeight"],[32,49,34,32],[33,6,34,17,"hourBlockHeight"],[33,21,34,32],[33,24,34,32,"_ref$hourBlockHeight"],[33,44,34,32],[33,58,34,35,"HOUR_BLOCK_HEIGHT"],[33,75,34,52],[33,78,34,52,"_ref$hourBlockHeight"],[33,98,34,52],[34,4,36,2],[34,8,36,8,"startTime"],[34,17,36,17],[34,20,36,20],[34,24,36,24,"XDate"],[34,29,36,29],[34,30,36,29,"default"],[34,37,36,29],[34,38,36,30,"event"],[34,43,36,35],[34,44,36,36,"start"],[34,49,36,41],[34,50,36,42],[35,4,37,2],[35,8,37,8,"endTime"],[35,15,37,15],[35,18,37,18,"event"],[35,23,37,23],[35,24,37,24,"end"],[35,27,37,27],[35,30,37,30],[35,34,37,34,"XDate"],[35,39,37,39],[35,40,37,39,"default"],[35,47,37,39],[35,48,37,40,"event"],[35,53,37,45],[35,54,37,46,"end"],[35,57,37,49],[35,58,37,50],[35,61,37,53],[35,65,37,57,"XDate"],[35,70,37,62],[35,71,37,62,"default"],[35,78,37,62],[35,79,37,63,"startTime"],[35,88,37,72],[35,89,37,73],[35,90,37,74,"addHours"],[35,98,37,82],[35,99,37,83],[35,100,37,84],[35,101,37,85],[36,4,39,2],[36,8,39,8,"dayStartTime"],[36,20,39,20],[36,23,39,23],[36,27,39,27,"XDate"],[36,32,39,32],[36,33,39,32,"default"],[36,40,39,32],[36,41,39,33,"startTime"],[36,50,39,42],[36,51,39,43],[36,52,39,44,"clearTime"],[36,61,39,53],[36,62,39,54],[36,63,39,55],[37,4,41,2],[37,11,41,9],[38,6,42,4],[38,9,42,7,"event"],[38,14,42,12],[39,6,43,4,"top"],[39,9,43,7],[39,11,43,9],[39,12,43,10,"dayStartTime"],[39,24,43,22],[39,25,43,23,"diffHours"],[39,34,43,32],[39,35,43,33,"startTime"],[39,44,43,42],[39,45,43,43],[39,48,43,46,"dayStart"],[39,56,43,54],[39,60,43,58,"hourBlockHeight"],[39,75,43,73],[40,6,44,4,"height"],[40,12,44,10],[40,14,44,12,"startTime"],[40,23,44,21],[40,24,44,22,"diffHours"],[40,33,44,31],[40,34,44,32,"endTime"],[40,41,44,39],[40,42,44,40],[40,45,44,43,"hourBlockHeight"],[40,60,44,58],[41,6,45,4,"width"],[41,11,45,9],[42,6,46,4,"left"],[43,4,47,2],[43,5,47,3],[44,2,48,0],[45,2,50,0],[45,11,50,9,"hasCollision"],[45,23,50,21,"hasCollision"],[45,24,50,22,"a"],[45,25,50,30],[45,27,50,32,"b"],[45,28,50,40],[45,30,50,42],[46,4,51,2],[46,11,51,9,"a"],[46,12,51,10],[46,13,51,11,"end"],[46,16,51,14],[46,19,51,17,"b"],[46,20,51,18],[46,21,51,19,"start"],[46,26,51,24],[46,30,51,28,"a"],[46,31,51,29],[46,32,51,30,"start"],[46,37,51,35],[46,40,51,38,"b"],[46,41,51,39],[46,42,51,40,"end"],[46,45,51,43],[47,2,52,0],[48,2,54,0],[48,11,54,9,"calcColumnSpan"],[48,25,54,23,"calcColumnSpan"],[48,26,54,24,"event"],[48,31,54,36],[48,33,54,38,"columnIndex"],[48,44,54,57],[48,46,54,59,"columns"],[48,53,54,77],[48,55,54,79],[49,4,55,2],[49,8,55,6,"colSpan"],[49,15,55,13],[49,18,55,16],[49,19,55,17],[50,4,57,2],[50,9,57,7],[50,13,57,11,"i"],[50,14,57,12],[50,17,57,15,"columnIndex"],[50,28,57,26],[50,31,57,29],[50,32,57,30],[50,34,57,32,"i"],[50,35,57,33],[50,38,57,36,"columns"],[50,45,57,43],[50,46,57,44,"length"],[50,52,57,50],[50,54,57,52,"i"],[50,55,57,53],[50,57,57,55],[50,59,57,57],[51,6,58,4],[51,10,58,10,"column"],[51,16,58,16],[51,19,58,19,"columns"],[51,26,58,26],[51,27,58,27,"i"],[51,28,58,28],[51,29,58,29],[52,6,60,4],[52,10,60,10,"foundCollision"],[52,24,60,24],[52,27,60,27,"column"],[52,33,60,33],[52,34,60,34,"find"],[52,38,60,38],[52,39,60,39,"ev"],[52,41,60,41],[52,45,60,45,"hasCollision"],[52,57,60,57],[52,58,60,58,"event"],[52,63,60,63],[52,65,60,65,"ev"],[52,67,60,67],[52,68,60,68],[52,69,60,69],[53,6,61,4],[53,10,61,8,"foundCollision"],[53,24,61,22],[53,26,61,24],[54,8,62,6],[54,15,62,13,"colSpan"],[54,22,62,20],[55,6,63,4],[56,6,65,4,"colSpan"],[56,13,65,11],[56,15,65,13],[57,4,66,2],[58,4,68,2],[58,11,68,9,"colSpan"],[58,18,68,16],[59,2,69,0],[60,2,71,0],[60,11,71,9,"packOverlappingEventGroup"],[60,36,71,34,"packOverlappingEventGroup"],[60,37,72,2,"columns"],[60,44,72,33],[60,46,73,2,"calculatedEvents"],[60,62,73,33],[60,64,74,2,"populateOptions"],[60,79,74,34],[60,81,75,2],[61,4,76,2],[61,8,76,2,"_populateOptions$scre"],[61,29,76,2],[61,32,80,6,"populateOptions"],[61,47,80,21],[61,48,77,4,"screenWidth"],[61,59,77,15],[62,6,77,4,"screenWidth"],[62,17,77,15],[62,20,77,15,"_populateOptions$scre"],[62,41,77,15],[62,55,77,18,"constants"],[62,64,77,27],[62,65,77,27,"default"],[62,72,77,27],[62,73,77,28,"screenWidth"],[62,84,77,39],[62,87,77,39,"_populateOptions$scre"],[62,108,77,39],[63,6,77,39,"_populateOptions$righ"],[63,27,77,39],[63,30,80,6,"populateOptions"],[63,45,80,21],[63,46,78,4,"rightEdgeSpacing"],[63,62,78,20],[64,6,78,4,"rightEdgeSpacing"],[64,22,78,20],[64,25,78,20,"_populateOptions$righ"],[64,46,78,20],[64,60,78,23,"RIGHT_EDGE_SPACING"],[64,78,78,41],[64,81,78,41,"_populateOptions$righ"],[64,102,78,41],[65,6,78,41,"_populateOptions$over"],[65,27,78,41],[65,30,80,6,"populateOptions"],[65,45,80,21],[65,46,79,4,"overlapEventsSpacing"],[65,66,79,24],[66,6,79,4,"overlapEventsSpacing"],[66,26,79,24],[66,29,79,24,"_populateOptions$over"],[66,50,79,24],[66,64,79,27,"OVERLAP_EVENTS_SPACINGS"],[66,87,79,50],[66,90,79,50,"_populateOptions$over"],[66,111,79,50],[67,4,81,2,"columns"],[67,11,81,9],[67,12,81,10,"forEach"],[67,19,81,17],[67,20,81,18],[67,21,81,19,"column"],[67,27,81,25],[67,29,81,27,"columnIndex"],[67,40,81,38],[67,45,81,43],[68,6,82,4,"column"],[68,12,82,10],[68,13,82,11,"forEach"],[68,20,82,18],[68,21,82,19,"event"],[68,26,82,24],[68,30,82,28],[69,8,83,6],[69,12,83,12,"totalWidth"],[69,22,83,22],[69,25,83,25,"screenWidth"],[69,36,83,36],[69,39,83,39,"rightEdgeSpacing"],[69,55,83,55],[70,8,84,6],[70,12,84,12,"columnSpan"],[70,22,84,22],[70,25,84,25,"calcColumnSpan"],[70,39,84,39],[70,40,84,40,"event"],[70,45,84,45],[70,47,84,47,"columnIndex"],[70,58,84,58],[70,60,84,60,"columns"],[70,67,84,67],[70,68,84,68],[71,8,85,6],[71,12,85,12,"eventLeft"],[71,21,85,21],[71,24,85,25,"columnIndex"],[71,35,85,36],[71,38,85,39,"columns"],[71,45,85,46],[71,46,85,47,"length"],[71,52,85,53],[71,55,85,57,"totalWidth"],[71,65,85,67],[72,8,86,6],[72,12,86,10,"eventWidth"],[72,22,86,20],[72,25,86,23,"totalWidth"],[72,35,86,33],[72,39,86,37,"columnSpan"],[72,49,86,47],[72,52,86,50,"columns"],[72,59,86,57],[72,60,86,58,"length"],[72,66,86,64],[72,67,86,65],[73,8,88,6],[73,12,88,10,"columnIndex"],[73,23,88,21],[73,26,88,24,"columnSpan"],[73,36,88,34],[73,40,88,38,"columns"],[73,47,88,45],[73,48,88,46,"length"],[73,54,88,52],[73,57,88,55],[73,58,88,56],[73,60,88,58],[74,10,89,8,"eventWidth"],[74,20,89,18],[74,24,89,22,"overlapEventsSpacing"],[74,44,89,42],[75,8,90,6],[76,8,92,6,"calculatedEvents"],[76,24,92,22],[76,25,92,23,"push"],[76,29,92,27],[76,30,92,28,"buildEvent"],[76,40,92,38],[76,41,92,39,"event"],[76,46,92,44],[76,48,92,46,"eventLeft"],[76,57,92,55],[76,59,92,57,"eventWidth"],[76,69,92,67],[76,71,92,69,"populateOptions"],[76,86,92,84],[76,87,92,85],[76,88,92,86],[77,6,93,4],[77,7,93,5],[77,8,93,6],[78,4,94,2],[78,5,94,3],[78,6,94,4],[79,2,95,0],[80,2,97,7],[80,11,97,16,"populateEvents"],[80,25,97,30,"populateEvents"],[80,26,97,31,"_events"],[80,33,97,47],[80,35,97,49,"populateOptions"],[80,50,97,81],[80,52,97,83],[81,4,98,2],[81,8,98,6,"lastEnd"],[81,15,98,28],[81,18,98,31],[81,22,98,35],[82,4,99,2],[82,8,99,6,"columns"],[82,15,99,37],[82,18,99,40],[82,20,99,42],[83,4,100,2],[83,8,100,8,"calculatedEvents"],[83,24,100,39],[83,27,100,42],[83,29,100,44],[84,4,102,2],[84,8,102,8,"events"],[84,14,102,36],[84,17,102,39,"_events"],[84,24,102,46],[84,25,103,5,"map"],[84,28,103,8],[84,29,103,9],[84,30,103,10,"ev"],[84,32,103,19],[84,34,103,21,"index"],[84,39,103,34],[84,45,103,40],[85,6,103,41],[85,9,103,44,"ev"],[85,11,103,46],[86,6,103,48,"index"],[86,11,103,53],[86,13,103,55,"index"],[87,4,103,60],[87,5,103,61],[87,6,103,62],[87,7,103,63],[87,8,104,5,"sort"],[87,12,104,9],[87,13,104,10],[87,23,104,20,"a"],[87,24,104,28],[87,26,104,30,"b"],[87,27,104,38],[87,29,104,40],[88,6,105,6],[88,10,105,10,"a"],[88,11,105,11],[88,12,105,12,"start"],[88,17,105,17],[88,20,105,20,"b"],[88,21,105,21],[88,22,105,22,"start"],[88,27,105,27],[88,29,105,29],[88,36,105,36],[88,37,105,37],[88,38,105,38],[89,6,106,6],[89,10,106,10,"a"],[89,11,106,11],[89,12,106,12,"start"],[89,17,106,17],[89,20,106,20,"b"],[89,21,106,21],[89,22,106,22,"start"],[89,27,106,27],[89,29,106,29],[89,36,106,36],[89,37,106,37],[90,6,107,6],[90,10,107,10,"a"],[90,11,107,11],[90,12,107,12,"end"],[90,15,107,15],[90,18,107,18,"b"],[90,19,107,19],[90,20,107,20,"end"],[90,23,107,23],[90,25,107,25],[90,32,107,32],[90,33,107,33],[90,34,107,34],[91,6,108,6],[91,10,108,10,"a"],[91,11,108,11],[91,12,108,12,"end"],[91,15,108,15],[91,18,108,18,"b"],[91,19,108,19],[91,20,108,20,"end"],[91,23,108,23],[91,25,108,25],[91,32,108,32],[91,33,108,33],[92,6,109,6],[92,13,109,13],[92,14,109,14],[93,4,110,4],[93,5,110,5],[93,6,110,6],[94,4,112,2,"events"],[94,10,112,8],[94,11,112,9,"forEach"],[94,18,112,16],[94,19,112,17],[94,29,112,27,"ev"],[94,31,112,29],[94,33,112,31],[95,6,113,4],[96,6,114,4],[96,10,114,8,"lastEnd"],[96,17,114,15],[96,22,114,20],[96,26,114,24],[96,30,114,28,"ev"],[96,32,114,30],[96,33,114,31,"start"],[96,38,114,36],[96,42,114,40,"lastEnd"],[96,49,114,47],[96,51,114,49],[97,8,115,6,"packOverlappingEventGroup"],[97,33,115,31],[97,34,115,32,"columns"],[97,41,115,39],[97,43,115,41,"calculatedEvents"],[97,59,115,57],[97,61,115,59,"populateOptions"],[97,76,115,74],[97,77,115,75],[98,8,116,6,"columns"],[98,15,116,13],[98,18,116,16],[98,20,116,18],[99,8,117,6,"lastEnd"],[99,15,117,13],[99,18,117,16],[99,22,117,20],[100,6,118,4],[102,6,120,4],[103,6,121,4],[103,10,121,8,"placed"],[103,16,121,14],[103,19,121,17],[103,24,121,22],[104,6,122,4],[104,11,122,9],[104,15,122,13,"i"],[104,16,122,14],[104,19,122,17],[104,20,122,18],[104,22,122,20,"i"],[104,23,122,21],[104,26,122,24,"columns"],[104,33,122,31],[104,34,122,32,"length"],[104,40,122,38],[104,42,122,40,"i"],[104,43,122,41],[104,45,122,43],[104,47,122,45],[105,8,123,6],[105,12,123,12,"col"],[105,15,123,15],[105,18,123,18,"columns"],[105,25,123,25],[105,26,123,26,"i"],[105,27,123,27],[105,28,123,28],[106,8,124,6],[106,12,124,10],[106,13,124,11,"hasCollision"],[106,25,124,23],[106,26,124,24,"col"],[106,29,124,27],[106,30,124,28,"col"],[106,33,124,31],[106,34,124,32,"length"],[106,40,124,38],[106,43,124,41],[106,44,124,42],[106,45,124,43],[106,47,124,45,"ev"],[106,49,124,47],[106,50,124,48],[106,52,124,50],[107,10,125,8,"col"],[107,13,125,11],[107,14,125,12,"push"],[107,18,125,16],[107,19,125,17,"ev"],[107,21,125,19],[107,22,125,20],[108,10,126,8,"placed"],[108,16,126,14],[108,19,126,17],[108,23,126,21],[109,10,127,8],[110,8,128,6],[111,6,129,4],[113,6,131,4],[114,6,132,4],[114,10,132,8],[114,11,132,9,"placed"],[114,17,132,15],[114,19,132,17],[115,8,133,6,"columns"],[115,15,133,13],[115,16,133,14,"push"],[115,20,133,18],[115,21,133,19],[115,22,133,20,"ev"],[115,24,133,22],[115,25,133,23],[115,26,133,24],[116,6,134,4],[117,6,136,4],[117,10,136,8,"lastEnd"],[117,17,136,15],[117,22,136,20],[117,26,136,24],[117,30,136,28,"ev"],[117,32,136,30],[117,33,136,31,"end"],[117,36,136,34],[117,39,136,37,"lastEnd"],[117,46,136,44],[117,48,136,46],[118,8,137,6,"lastEnd"],[118,15,137,13],[118,18,137,16,"ev"],[118,20,137,18],[118,21,137,19,"end"],[118,24,137,22],[119,6,138,4],[120,4,139,2],[120,5,139,3],[120,6,139,4],[121,4,141,2],[121,8,141,6,"columns"],[121,15,141,13],[121,16,141,14,"length"],[121,22,141,20],[121,25,141,23],[121,26,141,24],[121,28,141,26],[122,6,142,4,"packOverlappingEventGroup"],[122,31,142,29],[122,32,142,30,"columns"],[122,39,142,37],[122,41,142,39,"calculatedEvents"],[122,57,142,55],[122,59,142,57,"populateOptions"],[122,74,142,72],[122,75,142,73],[123,4,143,2],[124,4,145,2],[124,11,145,9,"calculatedEvents"],[124,27,145,25],[125,2,146,0],[126,2,148,7],[126,11,148,16,"buildUnavailableHoursBlocks"],[126,38,148,43,"buildUnavailableHoursBlocks"],[126,39,148,43],[126,41,151,2],[127,4,151,2],[127,8,149,2,"unavailableHours"],[127,24,149,38],[127,27,149,38,"arguments"],[127,36,149,38],[127,37,149,38,"length"],[127,43,149,38],[127,51,149,38,"arguments"],[127,60,149,38],[127,68,149,38,"undefined"],[127,77,149,38],[127,80,149,38,"arguments"],[127,89,149,38],[127,95,149,41],[127,97,149,43],[128,4,149,43],[128,8,150,2,"options"],[128,15,150,34],[128,18,150,34,"arguments"],[128,27,150,34],[128,28,150,34,"length"],[128,34,150,34],[128,41,150,34,"arguments"],[128,50,150,34],[128,56,150,34,"undefined"],[128,65,150,34],[129,4,152,2],[129,8,152,2,"_ref2"],[129,13,152,2],[129,16,152,75,"options"],[129,23,152,82],[129,27,152,86],[129,28,152,87],[129,29,152,88],[130,6,152,88,"_ref2$hourBlockHeight"],[130,27,152,88],[130,30,152,88,"_ref2"],[130,35,152,88],[130,36,152,9,"hourBlockHeight"],[130,51,152,24],[131,6,152,9,"hourBlockHeight"],[131,21,152,24],[131,24,152,24,"_ref2$hourBlockHeight"],[131,45,152,24],[131,59,152,27,"HOUR_BLOCK_HEIGHT"],[131,76,152,44],[131,79,152,44,"_ref2$hourBlockHeight"],[131,100,152,44],[132,6,152,44,"_ref2$dayStart"],[132,20,152,44],[132,23,152,44,"_ref2"],[132,28,152,44],[132,29,152,46,"dayStart"],[132,37,152,54],[133,6,152,46,"dayStart"],[133,14,152,54],[133,17,152,54,"_ref2$dayStart"],[133,31,152,54],[133,45,152,57],[133,46,152,58],[133,49,152,58,"_ref2$dayStart"],[133,63,152,58],[134,6,152,58,"_ref2$dayEnd"],[134,18,152,58],[134,21,152,58,"_ref2"],[134,26,152,58],[134,27,152,60,"dayEnd"],[134,33,152,66],[135,6,152,60,"dayEnd"],[135,12,152,66],[135,15,152,66,"_ref2$dayEnd"],[135,27,152,66],[135,41,152,69],[135,43,152,71],[135,46,152,71,"_ref2$dayEnd"],[135,58,152,71],[136,4,153,2],[136,8,153,8,"totalDayHours"],[136,21,153,21],[136,24,153,24,"dayEnd"],[136,30,153,30],[136,33,153,33,"dayStart"],[136,41,153,41],[137,4,154,2],[137,8,154,8,"totalDayHeight"],[137,22,154,22],[137,25,154,25],[137,26,154,26,"dayEnd"],[137,32,154,32],[137,35,154,35,"dayStart"],[137,43,154,43],[137,47,154,47,"hourBlockHeight"],[137,62,154,62],[138,4,155,2],[138,11,156,4,"unavailableHours"],[138,27,156,20],[138,28,157,7,"map"],[138,31,157,10],[138,32,157,11,"hours"],[138,37,157,16],[138,41,157,20],[139,6,158,8],[139,10,158,12],[139,11,158,13],[139,15,158,13,"inRange"],[139,22,158,20],[139,23,158,20,"default"],[139,30,158,20],[139,32,158,21,"hours"],[139,37,158,26],[139,38,158,27,"start"],[139,43,158,32],[139,45,158,34],[139,46,158,35],[139,48,158,37],[139,50,158,39],[139,51,158,40],[139,55,158,44],[139,56,158,45],[139,60,158,45,"inRange"],[139,67,158,52],[139,68,158,52,"default"],[139,75,158,52],[139,77,158,53,"hours"],[139,82,158,58],[139,83,158,59,"end"],[139,86,158,62],[139,88,158,64],[139,89,158,65],[139,91,158,67],[139,93,158,69],[139,94,158,70],[139,96,158,72],[140,8,159,10,"console"],[140,15,159,17],[140,16,159,18,"error"],[140,21,159,23],[140,22,159,24],[140,103,159,105],[140,104,159,106],[141,8,160,10],[141,15,160,17,"undefined"],[141,24,160,26],[142,6,161,8],[143,6,163,8],[143,10,163,12,"hours"],[143,15,163,17],[143,16,163,18,"start"],[143,21,163,23],[143,25,163,27,"hours"],[143,30,163,32],[143,31,163,33,"end"],[143,34,163,36],[143,36,163,38],[144,8,164,10,"console"],[144,15,164,17],[144,16,164,18,"error"],[144,21,164,23],[144,22,164,24],[144,111,164,113],[144,112,164,114],[145,8,165,10],[145,15,165,17,"undefined"],[145,24,165,26],[146,6,166,8],[147,6,168,8],[147,10,168,14,"startFixed"],[147,20,168,24],[147,23,168,27,"Math"],[147,27,168,31],[147,28,168,32,"max"],[147,31,168,35],[147,32,168,36,"hours"],[147,37,168,41],[147,38,168,42,"start"],[147,43,168,47],[147,45,168,49,"dayStart"],[147,53,168,57],[147,54,168,58],[148,6,169,8],[148,10,169,14,"endFixed"],[148,18,169,22],[148,21,169,25,"Math"],[148,25,169,29],[148,26,169,30,"min"],[148,29,169,33],[148,30,169,34,"hours"],[148,35,169,39],[148,36,169,40,"end"],[148,39,169,43],[148,41,169,45,"dayEnd"],[148,47,169,51],[148,48,169,52],[149,6,171,8],[149,13,171,15],[150,8,172,10,"top"],[150,11,172,13],[150,13,172,16],[150,14,172,17,"startFixed"],[150,24,172,27],[150,27,172,30,"dayStart"],[150,35,172,38],[150,39,172,42,"totalDayHours"],[150,52,172,55],[150,55,172,59,"totalDayHeight"],[150,69,172,73],[151,8,173,10,"height"],[151,14,173,16],[151,16,173,18],[151,17,173,19,"endFixed"],[151,25,173,27],[151,28,173,30,"startFixed"],[151,38,173,40],[151,42,173,44,"hourBlockHeight"],[152,6,174,8],[152,7,174,9],[153,4,175,6],[153,5,175,7],[154,4,176,6],[155,4,176,6],[155,5,177,7,"filter"],[155,11,177,13],[155,12,177,14,"Boolean"],[155,19,177,21],[155,20,177,22],[156,2,179,0],[157,0,179,1],[157,3]],"functionMap":{"names":["<global>","buildEvent","hasCollision","calcColumnSpan","column.find$argument_0","packOverlappingEventGroup","columns.forEach$argument_0","column.forEach$argument_0","populateEvents","_events.map$argument_0","_events.map.sort$argument_0","events.forEach$argument_0","buildUnavailableHoursBlocks","unavailableHours.map$argument_0"],"mappings":"AAA;AC6B;CDkB;AEE;CFE;AGE;uCCM,6BD;CHS;AKE;kBCU;mBCC;KDW;GDC;CLC;OQE;SCM,qDD;UEC;KFM;iBGE;GH2B;CRO;OYE;WCS;ODkB;CZI"},"hasCjsExports":false},"type":"js/module"}]}