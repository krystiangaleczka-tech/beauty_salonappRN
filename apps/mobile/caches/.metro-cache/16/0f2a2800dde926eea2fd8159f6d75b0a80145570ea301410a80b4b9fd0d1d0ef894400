{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"defaultShouldDehydrateMutation\", {\n    enumerable: true,\n    get: function () {\n      return defaultShouldDehydrateMutation;\n    }\n  });\n  Object.defineProperty(exports, \"defaultShouldDehydrateQuery\", {\n    enumerable: true,\n    get: function () {\n      return defaultShouldDehydrateQuery;\n    }\n  });\n  Object.defineProperty(exports, \"dehydrate\", {\n    enumerable: true,\n    get: function () {\n      return dehydrate;\n    }\n  });\n  Object.defineProperty(exports, \"hydrate\", {\n    enumerable: true,\n    get: function () {\n      return hydrate;\n    }\n  });\n  // src/hydration.ts\n  function defaultTransformerFn(data) {\n    return data;\n  }\n  function dehydrateMutation(mutation) {\n    return {\n      mutationKey: mutation.options.mutationKey,\n      state: mutation.state,\n      ...(mutation.options.scope && {\n        scope: mutation.options.scope\n      }),\n      ...(mutation.meta && {\n        meta: mutation.meta\n      })\n    };\n  }\n  function dehydrateQuery(query, serializeData, shouldRedactErrors) {\n    return {\n      state: {\n        ...query.state,\n        ...(query.state.data !== void 0 && {\n          data: serializeData(query.state.data)\n        })\n      },\n      queryKey: query.queryKey,\n      queryHash: query.queryHash,\n      ...(query.state.status === \"pending\" && {\n        promise: query.promise?.then(serializeData).catch(error => {\n          if (!shouldRedactErrors(error)) {\n            return Promise.reject(error);\n          }\n          if (process.env.NODE_ENV !== \"production\") {\n            console.error(`A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`);\n          }\n          return Promise.reject(new Error(\"redacted\"));\n        })\n      }),\n      ...(query.meta && {\n        meta: query.meta\n      })\n    };\n  }\n  function defaultShouldDehydrateMutation(mutation) {\n    return mutation.state.isPaused;\n  }\n  function defaultShouldDehydrateQuery(query) {\n    return query.state.status === \"success\";\n  }\n  function defaultShouldRedactErrors(_) {\n    return true;\n  }\n  function dehydrate(client, options = {}) {\n    const filterMutation = options.shouldDehydrateMutation ?? client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;\n    const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n    const filterQuery = options.shouldDehydrateQuery ?? client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;\n    const shouldRedactErrors = options.shouldRedactErrors ?? client.getDefaultOptions().dehydrate?.shouldRedactErrors ?? defaultShouldRedactErrors;\n    const serializeData = options.serializeData ?? client.getDefaultOptions().dehydrate?.serializeData ?? defaultTransformerFn;\n    const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query, serializeData, shouldRedactErrors)] : []);\n    return {\n      mutations,\n      queries\n    };\n  }\n  function hydrate(client, dehydratedState, options) {\n    if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n      return;\n    }\n    const mutationCache = client.getMutationCache();\n    const queryCache = client.getQueryCache();\n    const deserializeData = options?.defaultOptions?.deserializeData ?? client.getDefaultOptions().hydrate?.deserializeData ?? defaultTransformerFn;\n    const mutations = dehydratedState.mutations || [];\n    const queries = dehydratedState.queries || [];\n    mutations.forEach(({\n      state,\n      ...mutationOptions\n    }) => {\n      mutationCache.build(client, {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions\n      }, state);\n    });\n    queries.forEach(({\n      queryKey,\n      state,\n      queryHash,\n      meta,\n      promise\n    }) => {\n      let query = queryCache.get(queryHash);\n      const data = state.data === void 0 ? state.data : deserializeData(state.data);\n      if (query) {\n        if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n          const {\n            fetchStatus: _ignored,\n            ...serializedState\n          } = state;\n          query.setState({\n            ...serializedState,\n            data\n          });\n        }\n      } else {\n        query = queryCache.build(client, {\n          ...client.getDefaultOptions().hydrate?.queries,\n          ...options?.defaultOptions?.queries,\n          queryKey,\n          queryHash,\n          meta\n        },\n        // Reset fetch status to idle to avoid\n        // query being stuck in fetching state upon hydration\n        {\n          ...state,\n          data,\n          fetchStatus: \"idle\"\n        });\n      }\n      if (promise) {\n        const initialPromise = Promise.resolve(promise).then(deserializeData);\n        void query.fetch(void 0, {\n          initialPromise\n        });\n      }\n    });\n  }\n});","lineCount":157,"map":[[7,2,117,0,"Object"],[7,8,117,0],[7,9,117,0,"defineProperty"],[7,23,117,0],[7,24,117,0,"exports"],[7,31,117,0],[8,4,117,0,"enumerable"],[8,14,117,0],[9,4,117,0,"get"],[9,7,117,0],[9,18,117,0,"get"],[9,19,117,0],[10,6,117,0],[10,13,118,2,"defaultShouldDehydrateMutation"],[10,43,118,32],[11,4,118,32],[12,2,118,32],[13,2,117,0,"Object"],[13,8,117,0],[13,9,117,0,"defineProperty"],[13,23,117,0],[13,24,117,0,"exports"],[13,31,117,0],[14,4,117,0,"enumerable"],[14,14,117,0],[15,4,117,0,"get"],[15,7,117,0],[15,18,117,0,"get"],[15,19,117,0],[16,6,117,0],[16,13,119,2,"defaultShouldDehydrateQuery"],[16,40,119,29],[17,4,119,29],[18,2,119,29],[19,2,117,0,"Object"],[19,8,117,0],[19,9,117,0,"defineProperty"],[19,23,117,0],[19,24,117,0,"exports"],[19,31,117,0],[20,4,117,0,"enumerable"],[20,14,117,0],[21,4,117,0,"get"],[21,7,117,0],[21,18,117,0,"get"],[21,19,117,0],[22,6,117,0],[22,13,120,2,"dehydrate"],[22,22,120,11],[23,4,120,11],[24,2,120,11],[25,2,117,0,"Object"],[25,8,117,0],[25,9,117,0,"defineProperty"],[25,23,117,0],[25,24,117,0,"exports"],[25,31,117,0],[26,4,117,0,"enumerable"],[26,14,117,0],[27,4,117,0,"get"],[27,7,117,0],[27,18,117,0,"get"],[27,19,117,0],[28,6,117,0],[28,13,121,2,"hydrate"],[28,20,121,9],[29,4,121,9],[30,2,121,9],[31,2,1,0],[32,2,2,0],[32,11,2,9,"defaultTransformerFn"],[32,31,2,29,"defaultTransformerFn"],[32,32,2,30,"data"],[32,36,2,34],[32,38,2,36],[33,4,3,2],[33,11,3,9,"data"],[33,15,3,13],[34,2,4,0],[35,2,5,0],[35,11,5,9,"dehydrateMutation"],[35,28,5,26,"dehydrateMutation"],[35,29,5,27,"mutation"],[35,37,5,35],[35,39,5,37],[36,4,6,2],[36,11,6,9],[37,6,7,4,"mutationKey"],[37,17,7,15],[37,19,7,17,"mutation"],[37,27,7,25],[37,28,7,26,"options"],[37,35,7,33],[37,36,7,34,"mutationKey"],[37,47,7,45],[38,6,8,4,"state"],[38,11,8,9],[38,13,8,11,"mutation"],[38,21,8,19],[38,22,8,20,"state"],[38,27,8,25],[39,6,9,4],[39,10,9,7,"mutation"],[39,18,9,15],[39,19,9,16,"options"],[39,26,9,23],[39,27,9,24,"scope"],[39,32,9,29],[39,36,9,33],[40,8,9,35,"scope"],[40,13,9,40],[40,15,9,42,"mutation"],[40,23,9,50],[40,24,9,51,"options"],[40,31,9,58],[40,32,9,59,"scope"],[41,6,9,65],[41,7,9,66],[42,6,10,4],[42,10,10,7,"mutation"],[42,18,10,15],[42,19,10,16,"meta"],[42,23,10,20],[42,27,10,24],[43,8,10,26,"meta"],[43,12,10,30],[43,14,10,32,"mutation"],[43,22,10,40],[43,23,10,41,"meta"],[44,6,10,46],[44,7,10,47],[45,4,11,2],[45,5,11,3],[46,2,12,0],[47,2,13,0],[47,11,13,9,"dehydrateQuery"],[47,25,13,23,"dehydrateQuery"],[47,26,13,24,"query"],[47,31,13,29],[47,33,13,31,"serializeData"],[47,46,13,44],[47,48,13,46,"shouldRedactErrors"],[47,66,13,64],[47,68,13,66],[48,4,14,2],[48,11,14,9],[49,6,15,4,"state"],[49,11,15,9],[49,13,15,11],[50,8,16,6],[50,11,16,9,"query"],[50,16,16,14],[50,17,16,15,"state"],[50,22,16,20],[51,8,17,6],[51,12,17,9,"query"],[51,17,17,14],[51,18,17,15,"state"],[51,23,17,20],[51,24,17,21,"data"],[51,28,17,25],[51,33,17,30],[51,38,17,35],[51,39,17,36],[51,43,17,40],[52,10,18,8,"data"],[52,14,18,12],[52,16,18,14,"serializeData"],[52,29,18,27],[52,30,18,28,"query"],[52,35,18,33],[52,36,18,34,"state"],[52,41,18,39],[52,42,18,40,"data"],[52,46,18,44],[53,8,19,6],[53,9,19,7],[54,6,20,4],[54,7,20,5],[55,6,21,4,"queryKey"],[55,14,21,12],[55,16,21,14,"query"],[55,21,21,19],[55,22,21,20,"queryKey"],[55,30,21,28],[56,6,22,4,"queryHash"],[56,15,22,13],[56,17,22,15,"query"],[56,22,22,20],[56,23,22,21,"queryHash"],[56,32,22,30],[57,6,23,4],[57,10,23,7,"query"],[57,15,23,12],[57,16,23,13,"state"],[57,21,23,18],[57,22,23,19,"status"],[57,28,23,25],[57,33,23,30],[57,42,23,39],[57,46,23,43],[58,8,24,6,"promise"],[58,15,24,13],[58,17,24,15,"query"],[58,22,24,20],[58,23,24,21,"promise"],[58,30,24,28],[58,32,24,30,"then"],[58,36,24,34],[58,37,24,35,"serializeData"],[58,50,24,48],[58,51,24,49],[58,52,24,50,"catch"],[58,57,24,55],[58,58,24,57,"error"],[58,63,24,62],[58,67,24,67],[59,10,25,8],[59,14,25,12],[59,15,25,13,"shouldRedactErrors"],[59,33,25,31],[59,34,25,32,"error"],[59,39,25,37],[59,40,25,38],[59,42,25,40],[60,12,26,10],[60,19,26,17,"Promise"],[60,26,26,24],[60,27,26,25,"reject"],[60,33,26,31],[60,34,26,32,"error"],[60,39,26,37],[60,40,26,38],[61,10,27,8],[62,10,28,8],[62,14,28,12,"process"],[62,21,28,19],[62,22,28,20,"env"],[62,25,28,23],[62,26,28,24,"NODE_ENV"],[62,34,28,32],[62,39,28,37],[62,51,28,49],[62,53,28,51],[63,12,29,10,"console"],[63,19,29,17],[63,20,29,18,"error"],[63,25,29,23],[63,26,30,12],[63,89,30,75,"query"],[63,94,30,80],[63,95,30,81,"queryHash"],[63,104,30,90],[63,110,30,96,"error"],[63,115,30,101],[63,166,31,10],[63,167,31,11],[64,10,32,8],[65,10,33,8],[65,17,33,15,"Promise"],[65,24,33,22],[65,25,33,23,"reject"],[65,31,33,29],[65,32,33,30],[65,36,33,34,"Error"],[65,41,33,39],[65,42,33,40],[65,52,33,50],[65,53,33,51],[65,54,33,52],[66,8,34,6],[66,9,34,7],[67,6,35,4],[67,7,35,5],[68,6,36,4],[68,10,36,7,"query"],[68,15,36,12],[68,16,36,13,"meta"],[68,20,36,17],[68,24,36,21],[69,8,36,23,"meta"],[69,12,36,27],[69,14,36,29,"query"],[69,19,36,34],[69,20,36,35,"meta"],[70,6,36,40],[70,7,36,41],[71,4,37,2],[71,5,37,3],[72,2,38,0],[73,2,39,0],[73,11,39,9,"defaultShouldDehydrateMutation"],[73,41,39,39,"defaultShouldDehydrateMutation"],[73,42,39,40,"mutation"],[73,50,39,48],[73,52,39,50],[74,4,40,2],[74,11,40,9,"mutation"],[74,19,40,17],[74,20,40,18,"state"],[74,25,40,23],[74,26,40,24,"isPaused"],[74,34,40,32],[75,2,41,0],[76,2,42,0],[76,11,42,9,"defaultShouldDehydrateQuery"],[76,38,42,36,"defaultShouldDehydrateQuery"],[76,39,42,37,"query"],[76,44,42,42],[76,46,42,44],[77,4,43,2],[77,11,43,9,"query"],[77,16,43,14],[77,17,43,15,"state"],[77,22,43,20],[77,23,43,21,"status"],[77,29,43,27],[77,34,43,32],[77,43,43,41],[78,2,44,0],[79,2,45,0],[79,11,45,9,"defaultShouldRedactErrors"],[79,36,45,34,"defaultShouldRedactErrors"],[79,37,45,35,"_"],[79,38,45,36],[79,40,45,38],[80,4,46,2],[80,11,46,9],[80,15,46,13],[81,2,47,0],[82,2,48,0],[82,11,48,9,"dehydrate"],[82,20,48,18,"dehydrate"],[82,21,48,19,"client"],[82,27,48,25],[82,29,48,27,"options"],[82,36,48,34],[82,39,48,37],[82,40,48,38],[82,41,48,39],[82,43,48,41],[83,4,49,2],[83,10,49,8,"filterMutation"],[83,24,49,22],[83,27,49,25,"options"],[83,34,49,32],[83,35,49,33,"shouldDehydrateMutation"],[83,58,49,56],[83,62,49,60,"client"],[83,68,49,66],[83,69,49,67,"getDefaultOptions"],[83,86,49,84],[83,87,49,85],[83,88,49,86],[83,89,49,87,"dehydrate"],[83,98,49,96],[83,100,49,98,"shouldDehydrateMutation"],[83,123,49,121],[83,127,49,125,"defaultShouldDehydrateMutation"],[83,157,49,155],[84,4,50,2],[84,10,50,8,"mutations"],[84,19,50,17],[84,22,50,20,"client"],[84,28,50,26],[84,29,50,27,"getMutationCache"],[84,45,50,43],[84,46,50,44],[84,47,50,45],[84,48,50,46,"getAll"],[84,54,50,52],[84,55,50,53],[84,56,50,54],[84,57,50,55,"flatMap"],[84,64,50,62],[84,65,51,5,"mutation"],[84,73,51,13],[84,77,51,18,"filterMutation"],[84,91,51,32],[84,92,51,33,"mutation"],[84,100,51,41],[84,101,51,42],[84,104,51,45],[84,105,51,46,"dehydrateMutation"],[84,122,51,63],[84,123,51,64,"mutation"],[84,131,51,72],[84,132,51,73],[84,133,51,74],[84,136,51,77],[84,138,52,2],[84,139,52,3],[85,4,53,2],[85,10,53,8,"filterQuery"],[85,21,53,19],[85,24,53,22,"options"],[85,31,53,29],[85,32,53,30,"shouldDehydrateQuery"],[85,52,53,50],[85,56,53,54,"client"],[85,62,53,60],[85,63,53,61,"getDefaultOptions"],[85,80,53,78],[85,81,53,79],[85,82,53,80],[85,83,53,81,"dehydrate"],[85,92,53,90],[85,94,53,92,"shouldDehydrateQuery"],[85,114,53,112],[85,118,53,116,"defaultShouldDehydrateQuery"],[85,145,53,143],[86,4,54,2],[86,10,54,8,"shouldRedactErrors"],[86,28,54,26],[86,31,54,29,"options"],[86,38,54,36],[86,39,54,37,"shouldRedactErrors"],[86,57,54,55],[86,61,54,59,"client"],[86,67,54,65],[86,68,54,66,"getDefaultOptions"],[86,85,54,83],[86,86,54,84],[86,87,54,85],[86,88,54,86,"dehydrate"],[86,97,54,95],[86,99,54,97,"shouldRedactErrors"],[86,117,54,115],[86,121,54,119,"defaultShouldRedactErrors"],[86,146,54,144],[87,4,55,2],[87,10,55,8,"serializeData"],[87,23,55,21],[87,26,55,24,"options"],[87,33,55,31],[87,34,55,32,"serializeData"],[87,47,55,45],[87,51,55,49,"client"],[87,57,55,55],[87,58,55,56,"getDefaultOptions"],[87,75,55,73],[87,76,55,74],[87,77,55,75],[87,78,55,76,"dehydrate"],[87,87,55,85],[87,89,55,87,"serializeData"],[87,102,55,100],[87,106,55,104,"defaultTransformerFn"],[87,126,55,124],[88,4,56,2],[88,10,56,8,"queries"],[88,17,56,15],[88,20,56,18,"client"],[88,26,56,24],[88,27,56,25,"getQueryCache"],[88,40,56,38],[88,41,56,39],[88,42,56,40],[88,43,56,41,"getAll"],[88,49,56,47],[88,50,56,48],[88,51,56,49],[88,52,56,50,"flatMap"],[88,59,56,57],[88,60,57,5,"query"],[88,65,57,10],[88,69,57,15,"filterQuery"],[88,80,57,26],[88,81,57,27,"query"],[88,86,57,32],[88,87,57,33],[88,90,57,36],[88,91,57,37,"dehydrateQuery"],[88,105,57,51],[88,106,57,52,"query"],[88,111,57,57],[88,113,57,59,"serializeData"],[88,126,57,72],[88,128,57,74,"shouldRedactErrors"],[88,146,57,92],[88,147,57,93],[88,148,57,94],[88,151,57,97],[88,153,58,2],[88,154,58,3],[89,4,59,2],[89,11,59,9],[90,6,59,11,"mutations"],[90,15,59,20],[91,6,59,22,"queries"],[92,4,59,30],[92,5,59,31],[93,2,60,0],[94,2,61,0],[94,11,61,9,"hydrate"],[94,18,61,16,"hydrate"],[94,19,61,17,"client"],[94,25,61,23],[94,27,61,25,"dehydratedState"],[94,42,61,40],[94,44,61,42,"options"],[94,51,61,49],[94,53,61,51],[95,4,62,2],[95,8,62,6],[95,15,62,13,"dehydratedState"],[95,30,62,28],[95,35,62,33],[95,43,62,41],[95,47,62,45,"dehydratedState"],[95,62,62,60],[95,67,62,65],[95,71,62,69],[95,73,62,71],[96,6,63,4],[97,4,64,2],[98,4,65,2],[98,10,65,8,"mutationCache"],[98,23,65,21],[98,26,65,24,"client"],[98,32,65,30],[98,33,65,31,"getMutationCache"],[98,49,65,47],[98,50,65,48],[98,51,65,49],[99,4,66,2],[99,10,66,8,"queryCache"],[99,20,66,18],[99,23,66,21,"client"],[99,29,66,27],[99,30,66,28,"getQueryCache"],[99,43,66,41],[99,44,66,42],[99,45,66,43],[100,4,67,2],[100,10,67,8,"deserializeData"],[100,25,67,23],[100,28,67,26,"options"],[100,35,67,33],[100,37,67,35,"defaultOptions"],[100,51,67,49],[100,53,67,51,"deserializeData"],[100,68,67,66],[100,72,67,70,"client"],[100,78,67,76],[100,79,67,77,"getDefaultOptions"],[100,96,67,94],[100,97,67,95],[100,98,67,96],[100,99,67,97,"hydrate"],[100,106,67,104],[100,108,67,106,"deserializeData"],[100,123,67,121],[100,127,67,125,"defaultTransformerFn"],[100,147,67,145],[101,4,68,2],[101,10,68,8,"mutations"],[101,19,68,17],[101,22,68,20,"dehydratedState"],[101,37,68,35],[101,38,68,36,"mutations"],[101,47,68,45],[101,51,68,49],[101,53,68,51],[102,4,69,2],[102,10,69,8,"queries"],[102,17,69,15],[102,20,69,18,"dehydratedState"],[102,35,69,33],[102,36,69,34,"queries"],[102,43,69,41],[102,47,69,45],[102,49,69,47],[103,4,70,2,"mutations"],[103,13,70,11],[103,14,70,12,"forEach"],[103,21,70,19],[103,22,70,20],[103,23,70,21],[104,6,70,23,"state"],[104,11,70,28],[105,6,70,30],[105,9,70,33,"mutationOptions"],[106,4,70,49],[106,5,70,50],[106,10,70,55],[107,6,71,4,"mutationCache"],[107,19,71,17],[107,20,71,18,"build"],[107,25,71,23],[107,26,72,6,"client"],[107,32,72,12],[107,34,73,6],[108,8,74,8],[108,11,74,11,"client"],[108,17,74,17],[108,18,74,18,"getDefaultOptions"],[108,35,74,35],[108,36,74,36],[108,37,74,37],[108,38,74,38,"hydrate"],[108,45,74,45],[108,47,74,47,"mutations"],[108,56,74,56],[109,8,75,8],[109,11,75,11,"options"],[109,18,75,18],[109,20,75,20,"defaultOptions"],[109,34,75,34],[109,36,75,36,"mutations"],[109,45,75,45],[110,8,76,8],[110,11,76,11,"mutationOptions"],[111,6,77,6],[111,7,77,7],[111,9,78,6,"state"],[111,14,79,4],[111,15,79,5],[112,4,80,2],[112,5,80,3],[112,6,80,4],[113,4,81,2,"queries"],[113,11,81,9],[113,12,81,10,"forEach"],[113,19,81,17],[113,20,81,18],[113,21,81,19],[114,6,81,21,"queryKey"],[114,14,81,29],[115,6,81,31,"state"],[115,11,81,36],[116,6,81,38,"queryHash"],[116,15,81,47],[117,6,81,49,"meta"],[117,10,81,53],[118,6,81,55,"promise"],[119,4,81,63],[119,5,81,64],[119,10,81,69],[120,6,82,4],[120,10,82,8,"query"],[120,15,82,13],[120,18,82,16,"queryCache"],[120,28,82,26],[120,29,82,27,"get"],[120,32,82,30],[120,33,82,31,"queryHash"],[120,42,82,40],[120,43,82,41],[121,6,83,4],[121,12,83,10,"data"],[121,16,83,14],[121,19,83,17,"state"],[121,24,83,22],[121,25,83,23,"data"],[121,29,83,27],[121,34,83,32],[121,39,83,37],[121,40,83,38],[121,43,83,41,"state"],[121,48,83,46],[121,49,83,47,"data"],[121,53,83,51],[121,56,83,54,"deserializeData"],[121,71,83,69],[121,72,83,70,"state"],[121,77,83,75],[121,78,83,76,"data"],[121,82,83,80],[121,83,83,81],[122,6,84,4],[122,10,84,8,"query"],[122,15,84,13],[122,17,84,15],[123,8,85,6],[123,12,85,10,"query"],[123,17,85,15],[123,18,85,16,"state"],[123,23,85,21],[123,24,85,22,"dataUpdatedAt"],[123,37,85,35],[123,40,85,38,"state"],[123,45,85,43],[123,46,85,44,"dataUpdatedAt"],[123,59,85,57],[123,61,85,59],[124,10,86,8],[124,16,86,14],[125,12,86,16,"fetchStatus"],[125,23,86,27],[125,25,86,29,"_ignored"],[125,33,86,37],[126,12,86,39],[126,15,86,42,"serializedState"],[127,10,86,58],[127,11,86,59],[127,14,86,62,"state"],[127,19,86,67],[128,10,87,8,"query"],[128,15,87,13],[128,16,87,14,"setState"],[128,24,87,22],[128,25,87,23],[129,12,88,10],[129,15,88,13,"serializedState"],[129,30,88,28],[130,12,89,10,"data"],[131,10,90,8],[131,11,90,9],[131,12,90,10],[132,8,91,6],[133,6,92,4],[133,7,92,5],[133,13,92,11],[134,8,93,6,"query"],[134,13,93,11],[134,16,93,14,"queryCache"],[134,26,93,24],[134,27,93,25,"build"],[134,32,93,30],[134,33,94,8,"client"],[134,39,94,14],[134,41,95,8],[135,10,96,10],[135,13,96,13,"client"],[135,19,96,19],[135,20,96,20,"getDefaultOptions"],[135,37,96,37],[135,38,96,38],[135,39,96,39],[135,40,96,40,"hydrate"],[135,47,96,47],[135,49,96,49,"queries"],[135,56,96,56],[136,10,97,10],[136,13,97,13,"options"],[136,20,97,20],[136,22,97,22,"defaultOptions"],[136,36,97,36],[136,38,97,38,"queries"],[136,45,97,45],[137,10,98,10,"queryKey"],[137,18,98,18],[138,10,99,10,"queryHash"],[138,19,99,19],[139,10,100,10,"meta"],[140,8,101,8],[140,9,101,9],[141,8,102,8],[142,8,103,8],[143,8,104,8],[144,10,105,10],[144,13,105,13,"state"],[144,18,105,18],[145,10,106,10,"data"],[145,14,106,14],[146,10,107,10,"fetchStatus"],[146,21,107,21],[146,23,107,23],[147,8,108,8],[147,9,109,6],[147,10,109,7],[148,6,110,4],[149,6,111,4],[149,10,111,8,"promise"],[149,17,111,15],[149,19,111,17],[150,8,112,6],[150,14,112,12,"initialPromise"],[150,28,112,26],[150,31,112,29,"Promise"],[150,38,112,36],[150,39,112,37,"resolve"],[150,46,112,44],[150,47,112,45,"promise"],[150,54,112,52],[150,55,112,53],[150,56,112,54,"then"],[150,60,112,58],[150,61,112,59,"deserializeData"],[150,76,112,74],[150,77,112,75],[151,8,113,6],[151,13,113,11,"query"],[151,18,113,16],[151,19,113,17,"fetch"],[151,24,113,22],[151,25,113,23],[151,30,113,28],[151,31,113,29],[151,33,113,31],[152,10,113,33,"initialPromise"],[153,8,113,48],[153,9,113,49],[153,10,113,50],[154,6,114,4],[155,4,115,2],[155,5,115,3],[155,6,115,4],[156,2,116,0],[157,0,116,1],[157,3]],"functionMap":{"names":["<global>","defaultTransformerFn","dehydrateMutation","dehydrateQuery","query.promise.then._catch$argument_0","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","defaultShouldRedactErrors","dehydrate","client.getMutationCache.getAll.flatMap$argument_0","client.getQueryCache.getAll.flatMap$argument_0","hydrate","mutations.forEach$argument_0","queries.forEach$argument_0"],"mappings":"AAA;ACC;CDE;AEC;CFO;AGC;wDCW;ODU;CHI;AKC;CLE;AMC;CNE;AOC;CPE;AQC;ICG,2ED;IEM,+FF;CRG;AWC;oBCS;GDU;kBEC;GFkC;CXC"},"hasCjsExports":false},"type":"js/module"}]}