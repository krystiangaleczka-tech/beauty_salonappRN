{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Topological sorting function\n   *\n   * @param {Array} edges\n   * @returns {Array}\n   */\n\n  module.exports = function (edges) {\n    return toposort(uniqueNodes(edges), edges);\n  };\n  module.exports.array = toposort;\n  function toposort(nodes, edges) {\n    var cursor = nodes.length,\n      sorted = new Array(cursor),\n      visited = {},\n      i = cursor\n      // Better data structures make algorithm much faster.\n      ,\n      outgoingEdges = makeOutgoingEdges(edges),\n      nodesHash = makeNodesHash(nodes);\n\n    // check for unknown nodes\n    edges.forEach(function (edge) {\n      if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {\n        throw new Error('Unknown node. There is an unknown node in the supplied edges.');\n      }\n    });\n    while (i--) {\n      if (!visited[i]) visit(nodes[i], i, new Set());\n    }\n    return sorted;\n    function visit(node, i, predecessors) {\n      if (predecessors.has(node)) {\n        var nodeRep;\n        try {\n          nodeRep = \", node was:\" + JSON.stringify(node);\n        } catch (e) {\n          nodeRep = \"\";\n        }\n        throw new Error('Cyclic dependency' + nodeRep);\n      }\n      if (!nodesHash.has(node)) {\n        throw new Error('Found unknown node. Make sure to provided all involved nodes. Unknown node: ' + JSON.stringify(node));\n      }\n      if (visited[i]) return;\n      visited[i] = true;\n      var outgoing = outgoingEdges.get(node) || new Set();\n      outgoing = Array.from(outgoing);\n      if (i = outgoing.length) {\n        predecessors.add(node);\n        do {\n          var child = outgoing[--i];\n          visit(child, nodesHash.get(child), predecessors);\n        } while (i);\n        predecessors.delete(node);\n      }\n      sorted[--cursor] = node;\n    }\n  }\n  function uniqueNodes(arr) {\n    var res = new Set();\n    for (var i = 0, len = arr.length; i < len; i++) {\n      var edge = arr[i];\n      res.add(edge[0]);\n      res.add(edge[1]);\n    }\n    return Array.from(res);\n  }\n  function makeOutgoingEdges(arr) {\n    var edges = new Map();\n    for (var i = 0, len = arr.length; i < len; i++) {\n      var edge = arr[i];\n      if (!edges.has(edge[0])) edges.set(edge[0], new Set());\n      if (!edges.has(edge[1])) edges.set(edge[1], new Set());\n      edges.get(edge[0]).add(edge[1]);\n    }\n    return edges;\n  }\n  function makeNodesHash(arr) {\n    var res = new Map();\n    for (var i = 0, len = arr.length; i < len; i++) {\n      res.set(arr[i], i);\n    }\n    return res;\n  }\n});","lineCount":87,"map":[[2,2,2,0],[3,0,3,0],[4,0,4,0],[5,0,5,0],[6,0,6,0],[7,0,7,0],[9,2,9,0,"module"],[9,8,9,6],[9,9,9,7,"exports"],[9,16,9,14],[9,19,9,17],[9,29,9,26,"edges"],[9,34,9,31],[9,36,9,33],[10,4,10,2],[10,11,10,9,"toposort"],[10,19,10,17],[10,20,10,18,"uniqueNodes"],[10,31,10,29],[10,32,10,30,"edges"],[10,37,10,35],[10,38,10,36],[10,40,10,38,"edges"],[10,45,10,43],[10,46,10,44],[11,2,11,0],[11,3,11,1],[12,2,13,0,"module"],[12,8,13,6],[12,9,13,7,"exports"],[12,16,13,14],[12,17,13,15,"array"],[12,22,13,20],[12,25,13,23,"toposort"],[12,33,13,31],[13,2,15,0],[13,11,15,9,"toposort"],[13,19,15,17,"toposort"],[13,20,15,18,"nodes"],[13,25,15,23],[13,27,15,25,"edges"],[13,32,15,30],[13,34,15,32],[14,4,16,2],[14,8,16,6,"cursor"],[14,14,16,12],[14,17,16,15,"nodes"],[14,22,16,20],[14,23,16,21,"length"],[14,29,16,27],[15,6,17,6,"sorted"],[15,12,17,12],[15,15,17,15],[15,19,17,19,"Array"],[15,24,17,24],[15,25,17,25,"cursor"],[15,31,17,31],[15,32,17,32],[16,6,18,6,"visited"],[16,13,18,13],[16,16,18,16],[16,17,18,17],[16,18,18,18],[17,6,19,6,"i"],[17,7,19,7],[17,10,19,10,"cursor"],[18,6,20,4],[19,6,20,4],[20,6,21,6,"outgoingEdges"],[20,19,21,19],[20,22,21,22,"makeOutgoingEdges"],[20,39,21,39],[20,40,21,40,"edges"],[20,45,21,45],[20,46,21,46],[21,6,22,6,"nodesHash"],[21,15,22,15],[21,18,22,18,"makeNodesHash"],[21,31,22,31],[21,32,22,32,"nodes"],[21,37,22,37],[21,38,22,38],[23,4,24,2],[24,4,25,2,"edges"],[24,9,25,7],[24,10,25,8,"forEach"],[24,17,25,15],[24,18,25,16],[24,28,25,25,"edge"],[24,32,25,29],[24,34,25,31],[25,6,26,4],[25,10,26,8],[25,11,26,9,"nodesHash"],[25,20,26,18],[25,21,26,19,"has"],[25,24,26,22],[25,25,26,23,"edge"],[25,29,26,27],[25,30,26,28],[25,31,26,29],[25,32,26,30],[25,33,26,31],[25,37,26,35],[25,38,26,36,"nodesHash"],[25,47,26,45],[25,48,26,46,"has"],[25,51,26,49],[25,52,26,50,"edge"],[25,56,26,54],[25,57,26,55],[25,58,26,56],[25,59,26,57],[25,60,26,58],[25,62,26,60],[26,8,27,6],[26,14,27,12],[26,18,27,16,"Error"],[26,23,27,21],[26,24,27,22],[26,87,27,85],[26,88,27,86],[27,6,28,4],[28,4,29,2],[28,5,29,3],[28,6,29,4],[29,4,31,2],[29,11,31,9,"i"],[29,12,31,10],[29,14,31,12],[29,16,31,14],[30,6,32,4],[30,10,32,8],[30,11,32,9,"visited"],[30,18,32,16],[30,19,32,17,"i"],[30,20,32,18],[30,21,32,19],[30,23,32,21,"visit"],[30,28,32,26],[30,29,32,27,"nodes"],[30,34,32,32],[30,35,32,33,"i"],[30,36,32,34],[30,37,32,35],[30,39,32,37,"i"],[30,40,32,38],[30,42,32,40],[30,46,32,44,"Set"],[30,49,32,47],[30,50,32,48],[30,51,32,49],[30,52,32,50],[31,4,33,2],[32,4,35,2],[32,11,35,9,"sorted"],[32,17,35,15],[33,4,37,2],[33,13,37,11,"visit"],[33,18,37,16,"visit"],[33,19,37,17,"node"],[33,23,37,21],[33,25,37,23,"i"],[33,26,37,24],[33,28,37,26,"predecessors"],[33,40,37,38],[33,42,37,40],[34,6,38,4],[34,10,38,7,"predecessors"],[34,22,38,19],[34,23,38,20,"has"],[34,26,38,23],[34,27,38,24,"node"],[34,31,38,28],[34,32,38,29],[34,34,38,31],[35,8,39,6],[35,12,39,10,"nodeRep"],[35,19,39,17],[36,8,40,6],[36,12,40,10],[37,10,41,8,"nodeRep"],[37,17,41,15],[37,20,41,18],[37,33,41,31],[37,36,41,34,"JSON"],[37,40,41,38],[37,41,41,39,"stringify"],[37,50,41,48],[37,51,41,49,"node"],[37,55,41,53],[37,56,41,54],[38,8,42,6],[38,9,42,7],[38,10,42,8],[38,17,42,14,"e"],[38,18,42,15],[38,20,42,17],[39,10,43,8,"nodeRep"],[39,17,43,15],[39,20,43,18],[39,22,43,20],[40,8,44,6],[41,8,45,6],[41,14,45,12],[41,18,45,16,"Error"],[41,23,45,21],[41,24,45,22],[41,43,45,41],[41,46,45,44,"nodeRep"],[41,53,45,51],[41,54,45,52],[42,6,46,4],[43,6,48,4],[43,10,48,8],[43,11,48,9,"nodesHash"],[43,20,48,18],[43,21,48,19,"has"],[43,24,48,22],[43,25,48,23,"node"],[43,29,48,27],[43,30,48,28],[43,32,48,30],[44,8,49,6],[44,14,49,12],[44,18,49,16,"Error"],[44,23,49,21],[44,24,49,22],[44,102,49,100],[44,105,49,101,"JSON"],[44,109,49,105],[44,110,49,106,"stringify"],[44,119,49,115],[44,120,49,116,"node"],[44,124,49,120],[44,125,49,121],[44,126,49,122],[45,6,50,4],[46,6,52,4],[46,10,52,8,"visited"],[46,17,52,15],[46,18,52,16,"i"],[46,19,52,17],[46,20,52,18],[46,22,52,20],[47,6,53,4,"visited"],[47,13,53,11],[47,14,53,12,"i"],[47,15,53,13],[47,16,53,14],[47,19,53,17],[47,23,53,21],[48,6,55,4],[48,10,55,8,"outgoing"],[48,18,55,16],[48,21,55,19,"outgoingEdges"],[48,34,55,32],[48,35,55,33,"get"],[48,38,55,36],[48,39,55,37,"node"],[48,43,55,41],[48,44,55,42],[48,48,55,46],[48,52,55,50,"Set"],[48,55,55,53],[48,56,55,54],[48,57,55,55],[49,6,56,4,"outgoing"],[49,14,56,12],[49,17,56,15,"Array"],[49,22,56,20],[49,23,56,21,"from"],[49,27,56,25],[49,28,56,26,"outgoing"],[49,36,56,34],[49,37,56,35],[50,6,58,4],[50,10,58,8,"i"],[50,11,58,9],[50,14,58,12,"outgoing"],[50,22,58,20],[50,23,58,21,"length"],[50,29,58,27],[50,31,58,29],[51,8,59,6,"predecessors"],[51,20,59,18],[51,21,59,19,"add"],[51,24,59,22],[51,25,59,23,"node"],[51,29,59,27],[51,30,59,28],[52,8,60,6],[52,11,60,9],[53,10,61,8],[53,14,61,12,"child"],[53,19,61,17],[53,22,61,20,"outgoing"],[53,30,61,28],[53,31,61,29],[53,33,61,31,"i"],[53,34,61,32],[53,35,61,33],[54,10,62,8,"visit"],[54,15,62,13],[54,16,62,14,"child"],[54,21,62,19],[54,23,62,21,"nodesHash"],[54,32,62,30],[54,33,62,31,"get"],[54,36,62,34],[54,37,62,35,"child"],[54,42,62,40],[54,43,62,41],[54,45,62,43,"predecessors"],[54,57,62,55],[54,58,62,56],[55,8,63,6],[55,9,63,7],[55,17,63,15,"i"],[55,18,63,16],[56,8,64,6,"predecessors"],[56,20,64,18],[56,21,64,19,"delete"],[56,27,64,25],[56,28,64,26,"node"],[56,32,64,30],[56,33,64,31],[57,6,65,4],[58,6,67,4,"sorted"],[58,12,67,10],[58,13,67,11],[58,15,67,13,"cursor"],[58,21,67,19],[58,22,67,20],[58,25,67,23,"node"],[58,29,67,27],[59,4,68,2],[60,2,69,0],[61,2,71,0],[61,11,71,9,"uniqueNodes"],[61,22,71,20,"uniqueNodes"],[61,23,71,21,"arr"],[61,26,71,24],[61,28,71,25],[62,4,72,2],[62,8,72,6,"res"],[62,11,72,9],[62,14,72,12],[62,18,72,16,"Set"],[62,21,72,19],[62,22,72,20],[62,23,72,21],[63,4,73,2],[63,9,73,7],[63,13,73,11,"i"],[63,14,73,12],[63,17,73,15],[63,18,73,16],[63,20,73,18,"len"],[63,23,73,21],[63,26,73,24,"arr"],[63,29,73,27],[63,30,73,28,"length"],[63,36,73,34],[63,38,73,36,"i"],[63,39,73,37],[63,42,73,40,"len"],[63,45,73,43],[63,47,73,45,"i"],[63,48,73,46],[63,50,73,48],[63,52,73,50],[64,6,74,4],[64,10,74,8,"edge"],[64,14,74,12],[64,17,74,15,"arr"],[64,20,74,18],[64,21,74,19,"i"],[64,22,74,20],[64,23,74,21],[65,6,75,4,"res"],[65,9,75,7],[65,10,75,8,"add"],[65,13,75,11],[65,14,75,12,"edge"],[65,18,75,16],[65,19,75,17],[65,20,75,18],[65,21,75,19],[65,22,75,20],[66,6,76,4,"res"],[66,9,76,7],[66,10,76,8,"add"],[66,13,76,11],[66,14,76,12,"edge"],[66,18,76,16],[66,19,76,17],[66,20,76,18],[66,21,76,19],[66,22,76,20],[67,4,77,2],[68,4,78,2],[68,11,78,9,"Array"],[68,16,78,14],[68,17,78,15,"from"],[68,21,78,19],[68,22,78,20,"res"],[68,25,78,23],[68,26,78,24],[69,2,79,0],[70,2,81,0],[70,11,81,9,"makeOutgoingEdges"],[70,28,81,26,"makeOutgoingEdges"],[70,29,81,27,"arr"],[70,32,81,30],[70,34,81,31],[71,4,82,2],[71,8,82,6,"edges"],[71,13,82,11],[71,16,82,14],[71,20,82,18,"Map"],[71,23,82,21],[71,24,82,22],[71,25,82,23],[72,4,83,2],[72,9,83,7],[72,13,83,11,"i"],[72,14,83,12],[72,17,83,15],[72,18,83,16],[72,20,83,18,"len"],[72,23,83,21],[72,26,83,24,"arr"],[72,29,83,27],[72,30,83,28,"length"],[72,36,83,34],[72,38,83,36,"i"],[72,39,83,37],[72,42,83,40,"len"],[72,45,83,43],[72,47,83,45,"i"],[72,48,83,46],[72,50,83,48],[72,52,83,50],[73,6,84,4],[73,10,84,8,"edge"],[73,14,84,12],[73,17,84,15,"arr"],[73,20,84,18],[73,21,84,19,"i"],[73,22,84,20],[73,23,84,21],[74,6,85,4],[74,10,85,8],[74,11,85,9,"edges"],[74,16,85,14],[74,17,85,15,"has"],[74,20,85,18],[74,21,85,19,"edge"],[74,25,85,23],[74,26,85,24],[74,27,85,25],[74,28,85,26],[74,29,85,27],[74,31,85,29,"edges"],[74,36,85,34],[74,37,85,35,"set"],[74,40,85,38],[74,41,85,39,"edge"],[74,45,85,43],[74,46,85,44],[74,47,85,45],[74,48,85,46],[74,50,85,48],[74,54,85,52,"Set"],[74,57,85,55],[74,58,85,56],[74,59,85,57],[74,60,85,58],[75,6,86,4],[75,10,86,8],[75,11,86,9,"edges"],[75,16,86,14],[75,17,86,15,"has"],[75,20,86,18],[75,21,86,19,"edge"],[75,25,86,23],[75,26,86,24],[75,27,86,25],[75,28,86,26],[75,29,86,27],[75,31,86,29,"edges"],[75,36,86,34],[75,37,86,35,"set"],[75,40,86,38],[75,41,86,39,"edge"],[75,45,86,43],[75,46,86,44],[75,47,86,45],[75,48,86,46],[75,50,86,48],[75,54,86,52,"Set"],[75,57,86,55],[75,58,86,56],[75,59,86,57],[75,60,86,58],[76,6,87,4,"edges"],[76,11,87,9],[76,12,87,10,"get"],[76,15,87,13],[76,16,87,14,"edge"],[76,20,87,18],[76,21,87,19],[76,22,87,20],[76,23,87,21],[76,24,87,22],[76,25,87,23,"add"],[76,28,87,26],[76,29,87,27,"edge"],[76,33,87,31],[76,34,87,32],[76,35,87,33],[76,36,87,34],[76,37,87,35],[77,4,88,2],[78,4,89,2],[78,11,89,9,"edges"],[78,16,89,14],[79,2,90,0],[80,2,92,0],[80,11,92,9,"makeNodesHash"],[80,24,92,22,"makeNodesHash"],[80,25,92,23,"arr"],[80,28,92,26],[80,30,92,27],[81,4,93,2],[81,8,93,6,"res"],[81,11,93,9],[81,14,93,12],[81,18,93,16,"Map"],[81,21,93,19],[81,22,93,20],[81,23,93,21],[82,4,94,2],[82,9,94,7],[82,13,94,11,"i"],[82,14,94,12],[82,17,94,15],[82,18,94,16],[82,20,94,18,"len"],[82,23,94,21],[82,26,94,24,"arr"],[82,29,94,27],[82,30,94,28,"length"],[82,36,94,34],[82,38,94,36,"i"],[82,39,94,37],[82,42,94,40,"len"],[82,45,94,43],[82,47,94,45,"i"],[82,48,94,46],[82,50,94,48],[82,52,94,50],[83,6,95,4,"res"],[83,9,95,7],[83,10,95,8,"set"],[83,13,95,11],[83,14,95,12,"arr"],[83,17,95,15],[83,18,95,16,"i"],[83,19,95,17],[83,20,95,18],[83,22,95,20,"i"],[83,23,95,21],[83,24,95,22],[84,4,96,2],[85,4,97,2],[85,11,97,9,"res"],[85,14,97,12],[86,2,98,0],[87,0,98,1],[87,3]],"functionMap":{"names":["<global>","module.exports","toposort","edges.forEach$argument_0","visit","uniqueNodes","makeOutgoingEdges","makeNodesHash"],"mappings":"AAA;iBCQ;CDE;AEI;gBCU;GDI;EEQ;GF+B;CFC;AKE;CLQ;AME;CNS;AOE;CPM"},"hasCjsExports":true},"type":"js/module"}]}