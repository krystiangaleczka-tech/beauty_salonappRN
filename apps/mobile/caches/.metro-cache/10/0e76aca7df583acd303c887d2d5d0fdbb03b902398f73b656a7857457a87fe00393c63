{"dependencies":[{"name":"./index.mjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"cuwnQ/7dLRmHTfWH1o/Hl4dROAg=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"cubicBezier\", {\n    enumerable: true,\n    get: function () {\n      return cubicBezier;\n    }\n  });\n  var _indexMjs = require(_dependencyMap[0], \"./index.mjs\");\n  var a = (a1, a2) => 1.0 - 3.0 * a2 + 3.0 * a1;\n  var b = (a1, a2) => 3.0 * a2 - 6.0 * a1;\n  var c = a1 => 3.0 * a1;\n  var calcBezier = (t, a1, a2) => ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\n  var getSlope = (t, a1, a2) => 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\n  var subdivisionPrecision = 0.0000001;\n  var subdivisionMaxIterations = 10;\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX;\n    var currentT;\n    var i = 0;\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);\n    return currentT;\n  }\n  var newtonIterations = 8;\n  var newtonMinSlope = 0.001;\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < newtonIterations; ++i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n  function cubicBezier(mX1, mY1, mX2, mY2) {\n    if (mX1 === mY1 && mX2 === mY2) return _indexMjs.linear;\n    var sampleValues = new Float32Array(kSplineTableSize);\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n    function getTForX(aX) {\n      var intervalStart = 0.0;\n      var currentSample = 1;\n      var lastSample = kSplineTableSize - 1;\n      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n        intervalStart += kSampleStepSize;\n      }\n      --currentSample;\n      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n      var guessForT = intervalStart + dist * kSampleStepSize;\n      var initialSlope = getSlope(guessForT, mX1, mX2);\n      if (initialSlope >= newtonMinSlope) {\n        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n      } else if (initialSlope === 0.0) {\n        return guessForT;\n      } else {\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n      }\n    }\n    return t => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n  }\n});","lineCount":78,"map":[[7,2,74,0,"Object"],[7,8,74,0],[7,9,74,0,"defineProperty"],[7,23,74,0],[7,24,74,0,"exports"],[7,31,74,0],[8,4,74,0,"enumerable"],[8,14,74,0],[9,4,74,0,"get"],[9,7,74,0],[9,18,74,0,"get"],[9,19,74,0],[10,6,74,0],[10,13,74,9,"cubicBezier"],[10,24,74,20],[11,4,74,20],[12,2,74,20],[13,2,1,0],[13,6,1,0,"_indexMjs"],[13,15,1,0],[13,18,1,0,"require"],[13,25,1,0],[13,26,1,0,"_dependencyMap"],[13,40,1,0],[14,2,3,0],[14,6,3,6,"a"],[14,7,3,7],[14,10,3,10,"a"],[14,11,3,11,"a1"],[14,13,3,13],[14,15,3,15,"a2"],[14,17,3,17],[14,22,3,22],[14,25,3,25],[14,28,3,28],[14,31,3,31],[14,34,3,34,"a2"],[14,36,3,36],[14,39,3,39],[14,42,3,42],[14,45,3,45,"a1"],[14,47,3,47],[15,2,4,0],[15,6,4,6,"b"],[15,7,4,7],[15,10,4,10,"b"],[15,11,4,11,"a1"],[15,13,4,13],[15,15,4,15,"a2"],[15,17,4,17],[15,22,4,22],[15,25,4,25],[15,28,4,28,"a2"],[15,30,4,30],[15,33,4,33],[15,36,4,36],[15,39,4,39,"a1"],[15,41,4,41],[16,2,5,0],[16,6,5,6,"c"],[16,7,5,7],[16,10,5,11,"a1"],[16,12,5,13],[16,16,5,18],[16,19,5,21],[16,22,5,24,"a1"],[16,24,5,26],[17,2,6,0],[17,6,6,6,"calcBezier"],[17,16,6,16],[17,19,6,19,"calcBezier"],[17,20,6,20,"t"],[17,21,6,21],[17,23,6,23,"a1"],[17,25,6,25],[17,27,6,27,"a2"],[17,29,6,29],[17,34,6,34],[17,35,6,35],[17,36,6,36,"a"],[17,37,6,37],[17,38,6,38,"a1"],[17,40,6,40],[17,42,6,42,"a2"],[17,44,6,44],[17,45,6,45],[17,48,6,48,"t"],[17,49,6,49],[17,52,6,52,"b"],[17,53,6,53],[17,54,6,54,"a1"],[17,56,6,56],[17,58,6,58,"a2"],[17,60,6,60],[17,61,6,61],[17,65,6,65,"t"],[17,66,6,66],[17,69,6,69,"c"],[17,70,6,70],[17,71,6,71,"a1"],[17,73,6,73],[17,74,6,74],[17,78,6,78,"t"],[17,79,6,79],[18,2,7,0],[18,6,7,6,"getSlope"],[18,14,7,14],[18,17,7,17,"getSlope"],[18,18,7,18,"t"],[18,19,7,19],[18,21,7,21,"a1"],[18,23,7,23],[18,25,7,25,"a2"],[18,27,7,27],[18,32,7,32],[18,35,7,35],[18,38,7,38,"a"],[18,39,7,39],[18,40,7,40,"a1"],[18,42,7,42],[18,44,7,44,"a2"],[18,46,7,46],[18,47,7,47],[18,50,7,50,"t"],[18,51,7,51],[18,54,7,54,"t"],[18,55,7,55],[18,58,7,58],[18,61,7,61],[18,64,7,64,"b"],[18,65,7,65],[18,66,7,66,"a1"],[18,68,7,68],[18,70,7,70,"a2"],[18,72,7,72],[18,73,7,73],[18,76,7,76,"t"],[18,77,7,77],[18,80,7,80,"c"],[18,81,7,81],[18,82,7,82,"a1"],[18,84,7,84],[18,85,7,85],[19,2,8,0],[19,6,8,6,"subdivisionPrecision"],[19,26,8,26],[19,29,8,29],[19,38,8,38],[20,2,9,0],[20,6,9,6,"subdivisionMaxIterations"],[20,30,9,30],[20,33,9,33],[20,35,9,35],[21,2,10,0],[21,11,10,9,"binarySubdivide"],[21,26,10,24,"binarySubdivide"],[21,27,10,25,"aX"],[21,29,10,27],[21,31,10,29,"aA"],[21,33,10,31],[21,35,10,33,"aB"],[21,37,10,35],[21,39,10,37,"mX1"],[21,42,10,40],[21,44,10,42,"mX2"],[21,47,10,45],[21,49,10,47],[22,4,11,4],[22,8,11,8,"currentX"],[22,16,11,16],[23,4,12,4],[23,8,12,8,"currentT"],[23,16,12,16],[24,4,13,4],[24,8,13,8,"i"],[24,9,13,9],[24,12,13,12],[24,13,13,13],[25,4,14,4],[25,7,14,7],[26,6,15,8,"currentT"],[26,14,15,16],[26,17,15,19,"aA"],[26,19,15,21],[26,22,15,24],[26,23,15,25,"aB"],[26,25,15,27],[26,28,15,30,"aA"],[26,30,15,32],[26,34,15,36],[26,37,15,39],[27,6,16,8,"currentX"],[27,14,16,16],[27,17,16,19,"calcBezier"],[27,27,16,29],[27,28,16,30,"currentT"],[27,36,16,38],[27,38,16,40,"mX1"],[27,41,16,43],[27,43,16,45,"mX2"],[27,46,16,48],[27,47,16,49],[27,50,16,52,"aX"],[27,52,16,54],[28,6,17,8],[28,10,17,12,"currentX"],[28,18,17,20],[28,21,17,23],[28,24,17,26],[28,26,17,28],[29,8,18,12,"aB"],[29,10,18,14],[29,13,18,17,"currentT"],[29,21,18,25],[30,6,19,8],[30,7,19,9],[30,13,20,13],[31,8,21,12,"aA"],[31,10,21,14],[31,13,21,17,"currentT"],[31,21,21,25],[32,6,22,8],[33,4,23,4],[33,5,23,5],[33,13,23,13,"Math"],[33,17,23,17],[33,18,23,18,"abs"],[33,21,23,21],[33,22,23,22,"currentX"],[33,30,23,30],[33,31,23,31],[33,34,23,34,"subdivisionPrecision"],[33,54,23,54],[33,58,24,8],[33,60,24,10,"i"],[33,61,24,11],[33,64,24,14,"subdivisionMaxIterations"],[33,88,24,38],[34,4,25,4],[34,11,25,11,"currentT"],[34,19,25,19],[35,2,26,0],[36,2,27,0],[36,6,27,6,"newtonIterations"],[36,22,27,22],[36,25,27,25],[36,26,27,26],[37,2,28,0],[37,6,28,6,"newtonMinSlope"],[37,20,28,20],[37,23,28,23],[37,28,28,28],[38,2,29,0],[38,11,29,9,"newtonRaphsonIterate"],[38,31,29,29,"newtonRaphsonIterate"],[38,32,29,30,"aX"],[38,34,29,32],[38,36,29,34,"aGuessT"],[38,43,29,41],[38,45,29,43,"mX1"],[38,48,29,46],[38,50,29,48,"mX2"],[38,53,29,51],[38,55,29,53],[39,4,30,4],[39,9,30,9],[39,13,30,13,"i"],[39,14,30,14],[39,17,30,17],[39,18,30,18],[39,20,30,20,"i"],[39,21,30,21],[39,24,30,24,"newtonIterations"],[39,40,30,40],[39,42,30,42],[39,44,30,44,"i"],[39,45,30,45],[39,47,30,47],[40,6,31,8],[40,10,31,14,"currentSlope"],[40,22,31,26],[40,25,31,29,"getSlope"],[40,33,31,37],[40,34,31,38,"aGuessT"],[40,41,31,45],[40,43,31,47,"mX1"],[40,46,31,50],[40,48,31,52,"mX2"],[40,51,31,55],[40,52,31,56],[41,6,32,8],[41,10,32,12,"currentSlope"],[41,22,32,24],[41,27,32,29],[41,30,32,32],[41,32,32,34],[42,8,33,12],[42,15,33,19,"aGuessT"],[42,22,33,26],[43,6,34,8],[44,6,35,8],[44,10,35,14,"currentX"],[44,18,35,22],[44,21,35,25,"calcBezier"],[44,31,35,35],[44,32,35,36,"aGuessT"],[44,39,35,43],[44,41,35,45,"mX1"],[44,44,35,48],[44,46,35,50,"mX2"],[44,49,35,53],[44,50,35,54],[44,53,35,57,"aX"],[44,55,35,59],[45,6,36,8,"aGuessT"],[45,13,36,15],[45,17,36,19,"currentX"],[45,25,36,27],[45,28,36,30,"currentSlope"],[45,40,36,42],[46,4,37,4],[47,4,38,4],[47,11,38,11,"aGuessT"],[47,18,38,18],[48,2,39,0],[49,2,40,0],[49,6,40,6,"kSplineTableSize"],[49,22,40,22],[49,25,40,25],[49,27,40,27],[50,2,41,0],[50,6,41,6,"kSampleStepSize"],[50,21,41,21],[50,24,41,24],[50,27,41,27],[50,31,41,31,"kSplineTableSize"],[50,47,41,47],[50,50,41,50],[50,53,41,53],[50,54,41,54],[51,2,42,0],[51,11,42,9,"cubicBezier"],[51,22,42,20,"cubicBezier"],[51,23,42,21,"mX1"],[51,26,42,24],[51,28,42,26,"mY1"],[51,31,42,29],[51,33,42,31,"mX2"],[51,36,42,34],[51,38,42,36,"mY2"],[51,41,42,39],[51,43,42,41],[52,4,43,4],[52,8,43,8,"mX1"],[52,11,43,11],[52,16,43,16,"mY1"],[52,19,43,19],[52,23,43,23,"mX2"],[52,26,43,26],[52,31,43,31,"mY2"],[52,34,43,34],[52,36,44,8],[52,43,44,15,"linear"],[52,52,44,21],[52,53,44,21,"linear"],[52,59,44,21],[53,4,45,4],[53,8,45,10,"sampleValues"],[53,20,45,22],[53,23,45,25],[53,27,45,29,"Float32Array"],[53,39,45,41],[53,40,45,42,"kSplineTableSize"],[53,56,45,58],[53,57,45,59],[54,4,46,4],[54,9,46,9],[54,13,46,13,"i"],[54,14,46,14],[54,17,46,17],[54,18,46,18],[54,20,46,20,"i"],[54,21,46,21],[54,24,46,24,"kSplineTableSize"],[54,40,46,40],[54,42,46,42],[54,44,46,44,"i"],[54,45,46,45],[54,47,46,47],[55,6,47,8,"sampleValues"],[55,18,47,20],[55,19,47,21,"i"],[55,20,47,22],[55,21,47,23],[55,24,47,26,"calcBezier"],[55,34,47,36],[55,35,47,37,"i"],[55,36,47,38],[55,39,47,41,"kSampleStepSize"],[55,54,47,56],[55,56,47,58,"mX1"],[55,59,47,61],[55,61,47,63,"mX2"],[55,64,47,66],[55,65,47,67],[56,4,48,4],[57,4,49,4],[57,13,49,13,"getTForX"],[57,21,49,21,"getTForX"],[57,22,49,22,"aX"],[57,24,49,24],[57,26,49,26],[58,6,50,8],[58,10,50,12,"intervalStart"],[58,23,50,25],[58,26,50,28],[58,29,50,31],[59,6,51,8],[59,10,51,12,"currentSample"],[59,23,51,25],[59,26,51,28],[59,27,51,29],[60,6,52,8],[60,10,52,14,"lastSample"],[60,20,52,24],[60,23,52,27,"kSplineTableSize"],[60,39,52,43],[60,42,52,46],[60,43,52,47],[61,6,53,8],[61,13,53,15,"currentSample"],[61,26,53,28],[61,31,53,33,"lastSample"],[61,41,53,43],[61,45,53,47,"sampleValues"],[61,57,53,59],[61,58,53,60,"currentSample"],[61,71,53,73],[61,72,53,74],[61,76,53,78,"aX"],[61,78,53,80],[61,80,53,82],[61,82,53,84,"currentSample"],[61,95,53,97],[61,97,53,99],[62,8,54,12,"intervalStart"],[62,21,54,25],[62,25,54,29,"kSampleStepSize"],[62,40,54,44],[63,6,55,8],[64,6,56,8],[64,8,56,10,"currentSample"],[64,21,56,23],[65,6,57,8],[65,10,57,14,"dist"],[65,14,57,18],[65,17,57,21],[65,18,57,22,"aX"],[65,20,57,24],[65,23,57,27,"sampleValues"],[65,35,57,39],[65,36,57,40,"currentSample"],[65,49,57,53],[65,50,57,54],[65,55,58,13,"sampleValues"],[65,67,58,25],[65,68,58,26,"currentSample"],[65,81,58,39],[65,84,58,42],[65,85,58,43],[65,86,58,44],[65,89,58,47,"sampleValues"],[65,101,58,59],[65,102,58,60,"currentSample"],[65,115,58,73],[65,116,58,74],[65,117,58,75],[66,6,59,8],[66,10,59,14,"guessForT"],[66,19,59,23],[66,22,59,26,"intervalStart"],[66,35,59,39],[66,38,59,42,"dist"],[66,42,59,46],[66,45,59,49,"kSampleStepSize"],[66,60,59,64],[67,6,60,8],[67,10,60,14,"initialSlope"],[67,22,60,26],[67,25,60,29,"getSlope"],[67,33,60,37],[67,34,60,38,"guessForT"],[67,43,60,47],[67,45,60,49,"mX1"],[67,48,60,52],[67,50,60,54,"mX2"],[67,53,60,57],[67,54,60,58],[68,6,61,8],[68,10,61,12,"initialSlope"],[68,22,61,24],[68,26,61,28,"newtonMinSlope"],[68,40,61,42],[68,42,61,44],[69,8,62,12],[69,15,62,19,"newtonRaphsonIterate"],[69,35,62,39],[69,36,62,40,"aX"],[69,38,62,42],[69,40,62,44,"guessForT"],[69,49,62,53],[69,51,62,55,"mX1"],[69,54,62,58],[69,56,62,60,"mX2"],[69,59,62,63],[69,60,62,64],[70,6,63,8],[70,7,63,9],[70,13,64,13],[70,17,64,17,"initialSlope"],[70,29,64,29],[70,34,64,34],[70,37,64,37],[70,39,64,39],[71,8,65,12],[71,15,65,19,"guessForT"],[71,24,65,28],[72,6,66,8],[72,7,66,9],[72,13,67,13],[73,8,68,12],[73,15,68,19,"binarySubdivide"],[73,30,68,34],[73,31,68,35,"aX"],[73,33,68,37],[73,35,68,39,"intervalStart"],[73,48,68,52],[73,50,68,54,"intervalStart"],[73,63,68,67],[73,66,68,70,"kSampleStepSize"],[73,81,68,85],[73,83,68,87,"mX1"],[73,86,68,90],[73,88,68,92,"mX2"],[73,91,68,95],[73,92,68,96],[74,6,69,8],[75,4,70,4],[76,4,71,4],[76,11,71,12,"t"],[76,12,71,13],[76,16,71,18,"t"],[76,17,71,19],[76,22,71,24],[76,23,71,25],[76,27,71,29,"t"],[76,28,71,30],[76,33,71,35],[76,34,71,36],[76,37,71,39,"t"],[76,38,71,40],[76,41,71,43,"calcBezier"],[76,51,71,53],[76,52,71,54,"getTForX"],[76,60,71,62],[76,61,71,63,"t"],[76,62,71,64],[76,63,71,65],[76,65,71,67,"mY1"],[76,68,71,70],[76,70,71,72,"mY2"],[76,73,71,75],[76,74,71,76],[77,2,72,0],[78,0,72,1],[78,3]],"functionMap":{"names":["<global>","a","b","c","calcBezier","getSlope","binarySubdivide","newtonRaphsonIterate","cubicBezier","getTForX","<anonymous>"],"mappings":"AAA;UCE,qCD;UEC,+BF;UGC,gBH;mBIC,4DJ;iBKC,oEL;AMG;CNgB;AOG;CPU;AQG;ICO;KDqB;WEC,iEF;CRC"},"hasCjsExports":false},"type":"js/module"}]}