{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":68,"index":83}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"./Image","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":85},"end":{"line":5,"column":32,"index":117}}],"key":"I2Mr3f3chxmh02krEQCRqYY9hRA=","exportNames":["*"]}},{"name":"./utils/resolveSources","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":196},"end":{"line":7,"column":55,"index":251}}],"key":"DpM65pxwg+MyXfeuGazS5AMaNMU=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use client';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useImage = useImage;\n  var _react = require(_dependencyMap[0], \"react\");\n  var _Image = require(_dependencyMap[1], \"./Image\");\n  var _resolveSources = require(_dependencyMap[2], \"./utils/resolveSources\");\n  /**\n   * A hook that loads an image from the given source and returns a reference\n   * to the native image instance, or `null` until the first image is successfully loaded.\n   *\n   * It loads a new image every time the `uri` of the provided source changes.\n   * To trigger reloads in some other scenarios, you can provide an additional dependency list.\n   * @platform android\n   * @platform ios\n   * @platform web\n   *\n   * @example\n   * ```ts\n   * import { useImage, Image } from 'expo-image';\n   * import { Text } from 'react-native';\n   *\n   * export default function MyImage() {\n   *   const image = useImage('https://picsum.photos/1000/800', {\n   *     maxWidth: 800,\n   *     onError(error, retry) {\n   *       console.error('Loading failed:', error.message);\n   *     }\n   *   });\n   *\n   *   if (!image) {\n   *     return <Text>Image is loading...</Text>;\n   *   }\n   *\n   *   return <Image source={image} style={{ width: image.width / 2, height: image.height / 2 }} />;\n   * }\n   * ```\n   */\n  function useImage(source, options = {}, dependencies = []) {\n    const resolvedSource = (0, _resolveSources.resolveSource)(source);\n    const [image, setImage] = (0, _react.useState)(null);\n\n    // Since options are not dependencies of the below effect, we store them in a ref.\n    // Once the image is asynchronously loaded, the effect will use the most recent options,\n    // instead of the captured ones (especially important for callbacks that may change in subsequent renders).\n    const optionsRef = (0, _react.useRef)(options);\n    optionsRef.current = options;\n    (0, _react.useEffect)(() => {\n      // We're doing some asynchronous action in this effect, so we should keep track\n      // if the effect was already cleaned up. In that case, the async action shouldn't change the state.\n      let isEffectValid = true;\n      function loadImage() {\n        _Image.Image.loadAsync(resolvedSource, options).then(image => {\n          if (isEffectValid) {\n            setImage(image);\n          }\n        }).catch(error => {\n          if (!isEffectValid) {\n            return;\n          }\n          if (optionsRef.current.onError) {\n            optionsRef.current.onError(error, loadImage);\n          } else {\n            // Print unhandled errors to the console.\n            console.error(`Loading an image from '${resolvedSource.uri}' failed, use 'onError' option to handle errors and suppress this message`);\n            console.error(error);\n          }\n        });\n      }\n      loadImage();\n      return () => {\n        // Invalidate the effect and release the shared object to free up memory.\n        isEffectValid = false;\n        image?.release();\n      };\n    }, [resolvedSource.uri, ...dependencies]);\n    return image;\n  }\n});","lineCount":82,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13,"exports"],[7,9,1,13],[7,10,1,13,"useImage"],[7,18,1,13],[7,21,1,13,"useImage"],[7,29,1,13],[8,2,3,0],[8,6,3,0,"_react"],[8,12,3,0],[8,15,3,0,"require"],[8,22,3,0],[8,23,3,0,"_dependencyMap"],[8,37,3,0],[9,2,5,0],[9,6,5,0,"_Image"],[9,12,5,0],[9,15,5,0,"require"],[9,22,5,0],[9,23,5,0,"_dependencyMap"],[9,37,5,0],[10,2,7,0],[10,6,7,0,"_resolveSources"],[10,21,7,0],[10,24,7,0,"require"],[10,31,7,0],[10,32,7,0,"_dependencyMap"],[10,46,7,0],[11,2,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,0,18,0],[21,0,19,0],[22,0,20,0],[23,0,21,0],[24,0,22,0],[25,0,23,0],[26,0,24,0],[27,0,25,0],[28,0,26,0],[29,0,27,0],[30,0,28,0],[31,0,29,0],[32,0,30,0],[33,0,31,0],[34,0,32,0],[35,0,33,0],[36,0,34,0],[37,0,35,0],[38,0,36,0],[39,0,37,0],[40,0,38,0],[41,0,39,0],[42,2,40,7],[42,11,40,16,"useImage"],[42,19,40,24,"useImage"],[42,20,41,2,"source"],[42,26,41,39],[42,28,42,2,"options"],[42,35,42,27],[42,38,42,30],[42,39,42,31],[42,40,42,32],[42,42,43,2,"dependencies"],[42,54,43,30],[42,57,43,33],[42,59,43,35],[42,61,44,19],[43,4,45,2],[43,10,45,8,"resolvedSource"],[43,24,45,22],[43,27,45,25],[43,31,45,25,"resolveSource"],[43,60,45,38],[43,62,45,39,"source"],[43,68,45,45],[43,69,45,61],[44,4,46,2],[44,10,46,8],[44,11,46,9,"image"],[44,16,46,14],[44,18,46,16,"setImage"],[44,26,46,24],[44,27,46,25],[44,30,46,28],[44,34,46,28,"useState"],[44,49,46,36],[44,51,46,54],[44,55,46,58],[44,56,46,59],[46,4,48,2],[47,4,49,2],[48,4,50,2],[49,4,51,2],[49,10,51,8,"optionsRef"],[49,20,51,18],[49,23,51,21],[49,27,51,21,"useRef"],[49,40,51,27],[49,42,51,46,"options"],[49,49,51,53],[49,50,51,54],[50,4,52,2,"optionsRef"],[50,14,52,12],[50,15,52,13,"current"],[50,22,52,20],[50,25,52,23,"options"],[50,32,52,30],[51,4,54,2],[51,8,54,2,"useEffect"],[51,24,54,11],[51,26,54,12],[51,32,54,18],[52,6,55,4],[53,6,56,4],[54,6,57,4],[54,10,57,8,"isEffectValid"],[54,23,57,21],[54,26,57,24],[54,30,57,28],[55,6,59,4],[55,15,59,13,"loadImage"],[55,24,59,22,"loadImage"],[55,25,59,22],[55,27,59,25],[56,8,60,6,"Image"],[56,20,60,11],[56,21,60,12,"loadAsync"],[56,30,60,21],[56,31,60,22,"resolvedSource"],[56,45,60,36],[56,47,60,38,"options"],[56,54,60,45],[56,55,60,46],[56,56,61,9,"then"],[56,60,61,13],[56,61,61,15,"image"],[56,66,61,20],[56,70,61,25],[57,10,62,10],[57,14,62,14,"isEffectValid"],[57,27,62,27],[57,29,62,29],[58,12,63,12,"setImage"],[58,20,63,20],[58,21,63,21,"image"],[58,26,63,26],[58,27,63,27],[59,10,64,10],[60,8,65,8],[60,9,65,9],[60,10,65,10],[60,11,66,9,"catch"],[60,16,66,14],[60,17,66,16,"error"],[60,22,66,21],[60,26,66,26],[61,10,67,10],[61,14,67,14],[61,15,67,15,"isEffectValid"],[61,28,67,28],[61,30,67,30],[62,12,68,12],[63,10,69,10],[64,10,70,10],[64,14,70,14,"optionsRef"],[64,24,70,24],[64,25,70,25,"current"],[64,32,70,32],[64,33,70,33,"onError"],[64,40,70,40],[64,42,70,42],[65,12,71,12,"optionsRef"],[65,22,71,22],[65,23,71,23,"current"],[65,30,71,30],[65,31,71,31,"onError"],[65,38,71,38],[65,39,71,39,"error"],[65,44,71,44],[65,46,71,46,"loadImage"],[65,55,71,55],[65,56,71,56],[66,10,72,10],[66,11,72,11],[66,17,72,17],[67,12,73,12],[68,12,74,12,"console"],[68,19,74,19],[68,20,74,20,"error"],[68,25,74,25],[68,26,75,14],[68,52,75,40,"resolvedSource"],[68,66,75,54],[68,67,75,55,"uri"],[68,70,75,58],[68,145,76,12],[68,146,76,13],[69,12,77,12,"console"],[69,19,77,19],[69,20,77,20,"error"],[69,25,77,25],[69,26,77,26,"error"],[69,31,77,31],[69,32,77,32],[70,10,78,10],[71,8,79,8],[71,9,79,9],[71,10,79,10],[72,6,80,4],[73,6,82,4,"loadImage"],[73,15,82,13],[73,16,82,14],[73,17,82,15],[74,6,84,4],[74,13,84,11],[74,19,84,17],[75,8,85,6],[76,8,86,6,"isEffectValid"],[76,21,86,19],[76,24,86,22],[76,29,86,27],[77,8,87,6,"image"],[77,13,87,11],[77,15,87,13,"release"],[77,22,87,20],[77,23,87,21],[77,24,87,22],[78,6,88,4],[78,7,88,5],[79,4,89,2],[79,5,89,3],[79,7,89,5],[79,8,89,6,"resolvedSource"],[79,22,89,20],[79,23,89,21,"uri"],[79,26,89,24],[79,28,89,26],[79,31,89,29,"dependencies"],[79,43,89,41],[79,44,89,42],[79,45,89,43],[80,4,91,2],[80,11,91,9,"image"],[80,16,91,14],[81,2,92,0],[82,0,92,1],[82,3]],"functionMap":{"names":["<global>","useImage","useEffect$argument_0","loadImage","Image.loadAsync.then$argument_0","Image.loadAsync.then._catch$argument_0","<anonymous>"],"mappings":"AAA;OCuC;YCc;ICK;cCE;SDI;eEC;SFa;KDC;WII;KJI;GDC;CDG"}},"type":"js/module"}]}