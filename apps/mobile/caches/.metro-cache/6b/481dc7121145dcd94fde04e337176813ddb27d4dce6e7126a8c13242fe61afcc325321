{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.getRandomBytesAsync = getRandomBytesAsync;\n  Object.defineProperty(exports, \"CryptoDigestAlgorithm\", {\n    enumerable: true,\n    get: function () {\n      return CryptoDigestAlgorithm;\n    }\n  });\n  exports.digestStringAsync = digestStringAsync;\n  // Web polyfill for expo-crypto\n\n  /**\n   * Generate random bytes\n   * @param length Number of bytes to generate\n   * @returns Uint8Array of random bytes\n   */\n  async function getRandomBytesAsync(length) {\n    const array = new Uint8Array(length);\n    if (window.crypto && window.crypto.getRandomValues) {\n      window.crypto.getRandomValues(array);\n    } else {\n      // Fallback for older browsers\n      for (let i = 0; i < length; i++) {\n        array[i] = Math.floor(Math.random() * 256);\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Crypto digest algorithms\n   */\n  let CryptoDigestAlgorithm = /*#__PURE__*/function (CryptoDigestAlgorithm) {\n    CryptoDigestAlgorithm[\"SHA1\"] = \"SHA-1\";\n    CryptoDigestAlgorithm[\"SHA256\"] = \"SHA-256\";\n    CryptoDigestAlgorithm[\"SHA384\"] = \"SHA-384\";\n    CryptoDigestAlgorithm[\"SHA512\"] = \"SHA-512\";\n    return CryptoDigestAlgorithm;\n  }({});\n  /**\n   * Digest a string using the specified algorithm\n   * @param algorithm Digest algorithm to use\n   * @param data String to digest\n   * @returns Hex string of the digest\n   */\n  async function digestStringAsync(algorithm, data) {\n    if (window.crypto && window.crypto.subtle) {\n      const encoder = new TextEncoder();\n      const dataBuffer = encoder.encode(data);\n      const hashBuffer = await window.crypto.subtle.digest(algorithm, dataBuffer);\n      const hashArray = Array.from(new Uint8Array(hashBuffer));\n      return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n    } else {\n      // Simple fallback for browsers without crypto.subtle\n      // Note: This is NOT cryptographically secure\n      let hash = 0;\n      for (let i = 0; i < data.length; i++) {\n        const char = data.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash; // Convert to 32bit integer\n      }\n      return Math.abs(hash).toString(16).padStart(8, '0');\n    }\n  }\n});","lineCount":70,"map":[[7,2,8,0,"exports"],[7,9,8,0],[7,10,8,0,"getRandomBytesAsync"],[7,29,8,0],[7,32,8,0,"getRandomBytesAsync"],[7,51,8,0],[8,2,24,0,"Object"],[8,8,24,0],[8,9,24,0,"defineProperty"],[8,23,24,0],[8,24,24,0,"exports"],[8,31,24,0],[9,4,24,0,"enumerable"],[9,14,24,0],[10,4,24,0,"get"],[10,7,24,0],[10,18,24,0,"get"],[10,19,24,0],[11,6,24,0],[11,13,24,0,"CryptoDigestAlgorithm"],[11,34,24,0],[12,4,24,0],[13,2,24,0],[14,2,37,0,"exports"],[14,9,37,0],[14,10,37,0,"digestStringAsync"],[14,27,37,0],[14,30,37,0,"digestStringAsync"],[14,47,37,0],[15,2,1,0],[17,2,3,0],[18,0,4,0],[19,0,5,0],[20,0,6,0],[21,0,7,0],[22,2,8,7],[22,17,8,22,"getRandomBytesAsync"],[22,36,8,41,"getRandomBytesAsync"],[22,37,8,42,"length"],[22,43,8,56],[22,45,8,79],[23,4,9,2],[23,10,9,8,"array"],[23,15,9,13],[23,18,9,16],[23,22,9,20,"Uint8Array"],[23,32,9,30],[23,33,9,31,"length"],[23,39,9,37],[23,40,9,38],[24,4,10,2],[24,8,10,6,"window"],[24,14,10,12],[24,15,10,13,"crypto"],[24,21,10,19],[24,25,10,23,"window"],[24,31,10,29],[24,32,10,30,"crypto"],[24,38,10,36],[24,39,10,37,"getRandomValues"],[24,54,10,52],[24,56,10,54],[25,6,11,4,"window"],[25,12,11,10],[25,13,11,11,"crypto"],[25,19,11,17],[25,20,11,18,"getRandomValues"],[25,35,11,33],[25,36,11,34,"array"],[25,41,11,39],[25,42,11,40],[26,4,12,2],[26,5,12,3],[26,11,12,9],[27,6,13,4],[28,6,14,4],[28,11,14,9],[28,15,14,13,"i"],[28,16,14,14],[28,19,14,17],[28,20,14,18],[28,22,14,20,"i"],[28,23,14,21],[28,26,14,24,"length"],[28,32,14,30],[28,34,14,32,"i"],[28,35,14,33],[28,37,14,35],[28,39,14,37],[29,8,15,6,"array"],[29,13,15,11],[29,14,15,12,"i"],[29,15,15,13],[29,16,15,14],[29,19,15,17,"Math"],[29,23,15,21],[29,24,15,22,"floor"],[29,29,15,27],[29,30,15,28,"Math"],[29,34,15,32],[29,35,15,33,"random"],[29,41,15,39],[29,42,15,40],[29,43,15,41],[29,46,15,44],[29,49,15,47],[29,50,15,48],[30,6,16,4],[31,4,17,2],[32,4,18,2],[32,11,18,9,"array"],[32,16,18,14],[33,2,19,0],[35,2,21,0],[36,0,22,0],[37,0,23,0],[38,2,21,0],[38,6,24,12,"CryptoDigestAlgorithm"],[38,27,24,33],[38,53,24,12,"CryptoDigestAlgorithm"],[38,74,24,33],[39,4,24,12,"CryptoDigestAlgorithm"],[39,25,24,33],[40,4,24,12,"CryptoDigestAlgorithm"],[40,25,24,33],[41,4,24,12,"CryptoDigestAlgorithm"],[41,25,24,33],[42,4,24,12,"CryptoDigestAlgorithm"],[42,25,24,33],[43,4,24,33],[43,11,24,12,"CryptoDigestAlgorithm"],[43,32,24,33],[44,2,24,33],[45,2,31,0],[46,0,32,0],[47,0,33,0],[48,0,34,0],[49,0,35,0],[50,0,36,0],[51,2,37,7],[51,17,37,22,"digestStringAsync"],[51,34,37,39,"digestStringAsync"],[51,35,38,2,"algorithm"],[51,44,38,34],[51,46,39,2,"data"],[51,50,39,14],[51,52,40,19],[52,4,41,2],[52,8,41,6,"window"],[52,14,41,12],[52,15,41,13,"crypto"],[52,21,41,19],[52,25,41,23,"window"],[52,31,41,29],[52,32,41,30,"crypto"],[52,38,41,36],[52,39,41,37,"subtle"],[52,45,41,43],[52,47,41,45],[53,6,42,4],[53,12,42,10,"encoder"],[53,19,42,17],[53,22,42,20],[53,26,42,24,"TextEncoder"],[53,37,42,35],[53,38,42,36],[53,39,42,37],[54,6,43,4],[54,12,43,10,"dataBuffer"],[54,22,43,20],[54,25,43,23,"encoder"],[54,32,43,30],[54,33,43,31,"encode"],[54,39,43,37],[54,40,43,38,"data"],[54,44,43,42],[54,45,43,43],[55,6,44,4],[55,12,44,10,"hashBuffer"],[55,22,44,20],[55,25,44,23],[55,31,44,29,"window"],[55,37,44,35],[55,38,44,36,"crypto"],[55,44,44,42],[55,45,44,43,"subtle"],[55,51,44,49],[55,52,44,50,"digest"],[55,58,44,56],[55,59,44,57,"algorithm"],[55,68,44,66],[55,70,44,68,"dataBuffer"],[55,80,44,78],[55,81,44,79],[56,6,45,4],[56,12,45,10,"hashArray"],[56,21,45,19],[56,24,45,22,"Array"],[56,29,45,27],[56,30,45,28,"from"],[56,34,45,32],[56,35,45,33],[56,39,45,37,"Uint8Array"],[56,49,45,47],[56,50,45,48,"hashBuffer"],[56,60,45,58],[56,61,45,59],[56,62,45,60],[57,6,46,4],[57,13,46,11,"hashArray"],[57,22,46,20],[57,23,46,21,"map"],[57,26,46,24],[57,27,46,25,"b"],[57,28,46,26],[57,32,46,30,"b"],[57,33,46,31],[57,34,46,32,"toString"],[57,42,46,40],[57,43,46,41],[57,45,46,43],[57,46,46,44],[57,47,46,45,"padStart"],[57,55,46,53],[57,56,46,54],[57,57,46,55],[57,59,46,57],[57,62,46,60],[57,63,46,61],[57,64,46,62],[57,65,46,63,"join"],[57,69,46,67],[57,70,46,68],[57,72,46,70],[57,73,46,71],[58,4,47,2],[58,5,47,3],[58,11,47,9],[59,6,48,4],[60,6,49,4],[61,6,50,4],[61,10,50,8,"hash"],[61,14,50,12],[61,17,50,15],[61,18,50,16],[62,6,51,4],[62,11,51,9],[62,15,51,13,"i"],[62,16,51,14],[62,19,51,17],[62,20,51,18],[62,22,51,20,"i"],[62,23,51,21],[62,26,51,24,"data"],[62,30,51,28],[62,31,51,29,"length"],[62,37,51,35],[62,39,51,37,"i"],[62,40,51,38],[62,42,51,40],[62,44,51,42],[63,8,52,6],[63,14,52,12,"char"],[63,18,52,16],[63,21,52,19,"data"],[63,25,52,23],[63,26,52,24,"charCodeAt"],[63,36,52,34],[63,37,52,35,"i"],[63,38,52,36],[63,39,52,37],[64,8,53,6,"hash"],[64,12,53,10],[64,15,53,14],[64,16,53,15,"hash"],[64,20,53,19],[64,24,53,23],[64,25,53,24],[64,29,53,28,"hash"],[64,33,53,32],[64,36,53,36,"char"],[64,40,53,40],[65,8,54,6,"hash"],[65,12,54,10],[65,15,54,13,"hash"],[65,19,54,17],[65,22,54,20,"hash"],[65,26,54,24],[65,27,54,25],[65,28,54,26],[66,6,55,4],[67,6,56,4],[67,13,56,11,"Math"],[67,17,56,15],[67,18,56,16,"abs"],[67,21,56,19],[67,22,56,20,"hash"],[67,26,56,24],[67,27,56,25],[67,28,56,26,"toString"],[67,36,56,34],[67,37,56,35],[67,39,56,37],[67,40,56,38],[67,41,56,39,"padStart"],[67,49,56,47],[67,50,56,48],[67,51,56,49],[67,53,56,51],[67,56,56,54],[67,57,56,55],[68,4,57,2],[69,2,58,0],[70,0,58,1],[70,3]],"functionMap":{"names":["<global>","getRandomBytesAsync","digestStringAsync","hashArray.map$argument_0"],"mappings":"AAA;OCO;CDW;OEkB;yBCS,oCD"},"hasCjsExports":false},"type":"js/module"}]}