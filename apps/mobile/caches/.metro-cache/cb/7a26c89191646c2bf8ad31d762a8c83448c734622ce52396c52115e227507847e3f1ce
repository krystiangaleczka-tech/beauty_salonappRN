{"dependencies":[{"name":"@motionone/utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":12,"index":27},"end":{"line":3,"column":39,"index":54}}],"key":"FS/MZgsOo2zLy6PbOiduH8x3eaQ=","exportNames":["*"],"imports":1}},{"name":"../utils/velocity.cjs.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":15,"index":71},"end":{"line":4,"column":50,"index":106}}],"key":"iQjjLp7CGInYbOOzhxfBWLWZ2WU=","exportNames":["*"],"imports":1}},{"name":"../spring/index.cjs.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":12,"index":120},"end":{"line":5,"column":45,"index":153}}],"key":"3o7N4rPAMoEnfEYHSelUU0TmCaM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var utils = require(_dependencyMap[0], \"@motionone/utils\");\n  var velocity = require(_dependencyMap[1], \"../utils/velocity.cjs.js\");\n  var index = require(_dependencyMap[2], \"../spring/index.cjs.js\");\n  var glide = _ref => {\n    var _ref$from = _ref.from,\n      from = _ref$from === void 0 ? 0 : _ref$from,\n      _ref$velocity = _ref.velocity,\n      velocity$1 = _ref$velocity === void 0 ? 0.0 : _ref$velocity,\n      _ref$power = _ref.power,\n      power = _ref$power === void 0 ? 0.8 : _ref$power,\n      _ref$decay = _ref.decay,\n      decay = _ref$decay === void 0 ? 0.325 : _ref$decay,\n      bounceDamping = _ref.bounceDamping,\n      bounceStiffness = _ref.bounceStiffness,\n      changeTarget = _ref.changeTarget,\n      min = _ref.min,\n      max = _ref.max,\n      _ref$restDistance = _ref.restDistance,\n      restDistance = _ref$restDistance === void 0 ? 0.5 : _ref$restDistance,\n      restSpeed = _ref.restSpeed;\n    decay = utils.time.ms(decay);\n    var state = {\n      hasReachedTarget: false,\n      done: false,\n      current: from,\n      target: from\n    };\n    var isOutOfBounds = v => min !== undefined && v < min || max !== undefined && v > max;\n    var nearestBoundary = v => {\n      if (min === undefined) return max;\n      if (max === undefined) return min;\n      return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    var amplitude = power * velocity$1;\n    var ideal = from + amplitude;\n    var target = changeTarget === undefined ? ideal : changeTarget(ideal);\n    state.target = target;\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal) amplitude = target - from;\n    var calcDelta = t => -amplitude * Math.exp(-t / decay);\n    var calcLatest = t => target + calcDelta(t);\n    var applyFriction = t => {\n      var delta = calcDelta(t);\n      var latest = calcLatest(t);\n      state.done = Math.abs(delta) <= restDistance;\n      state.current = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    var timeReachedBoundary;\n    var spring;\n    var checkCatchBoundary = t => {\n      if (!isOutOfBounds(state.current)) return;\n      timeReachedBoundary = t;\n      spring = index.spring({\n        from: state.current,\n        to: nearestBoundary(state.current),\n        velocity: velocity.calcGeneratorVelocity(calcLatest, t, state.current),\n        // TODO: This should be passing * 1000\n        damping: bounceDamping,\n        stiffness: bounceStiffness,\n        restDistance,\n        restSpeed\n      });\n    };\n    checkCatchBoundary(0);\n    return t => {\n      /**\n       * We need to resolve the friction to figure out if we need a\n       * spring but we don't want to do this twice per frame. So here\n       * we flag if we updated for this frame and later if we did\n       * we can skip doing it again.\n       */\n      var hasUpdatedFrame = false;\n      if (!spring && timeReachedBoundary === undefined) {\n        hasUpdatedFrame = true;\n        applyFriction(t);\n        checkCatchBoundary(t);\n      }\n      /**\n       * If we have a spring and the provided t is beyond the moment the friction\n       * animation crossed the min/max boundary, use the spring.\n       */\n      if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n        state.hasReachedTarget = true;\n        return spring(t - timeReachedBoundary);\n      } else {\n        state.hasReachedTarget = false;\n        !hasUpdatedFrame && applyFriction(t);\n        return state;\n      }\n    };\n  };\n  exports.glide = glide;\n});","lineCount":105,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"utils"],[4,11,3,9],[4,14,3,12,"require"],[4,21,3,19],[4,22,3,19,"_dependencyMap"],[4,36,3,19],[4,59,3,38],[4,60,3,39],[5,2,4,0],[5,6,4,4,"velocity"],[5,14,4,12],[5,17,4,15,"require"],[5,24,4,22],[5,25,4,22,"_dependencyMap"],[5,39,4,22],[5,70,4,49],[5,71,4,50],[6,2,5,0],[6,6,5,4,"index"],[6,11,5,9],[6,14,5,12,"require"],[6,21,5,19],[6,22,5,19,"_dependencyMap"],[6,36,5,19],[6,65,5,44],[6,66,5,45],[7,2,7,0],[7,6,7,6,"glide"],[7,11,7,11],[7,14,7,14,"_ref"],[7,18,7,14],[7,22,7,176],[8,4,7,176],[8,8,7,176,"_ref$from"],[8,17,7,176],[8,20,7,176,"_ref"],[8,24,7,176],[8,25,7,17,"from"],[8,29,7,21],[9,6,7,17,"from"],[9,10,7,21],[9,13,7,21,"_ref$from"],[9,22,7,21],[9,36,7,24],[9,37,7,25],[9,40,7,25,"_ref$from"],[9,49,7,25],[10,6,7,25,"_ref$velocity"],[10,19,7,25],[10,22,7,25,"_ref"],[10,26,7,25],[10,27,7,27,"velocity"],[10,35,7,35],[11,6,7,37,"velocity$1"],[11,16,7,47],[11,19,7,47,"_ref$velocity"],[11,32,7,47],[11,46,7,50],[11,49,7,53],[11,52,7,53,"_ref$velocity"],[11,65,7,53],[12,6,7,53,"_ref$power"],[12,16,7,53],[12,19,7,53,"_ref"],[12,23,7,53],[12,24,7,55,"power"],[12,29,7,60],[13,6,7,55,"power"],[13,11,7,60],[13,14,7,60,"_ref$power"],[13,24,7,60],[13,38,7,63],[13,41,7,66],[13,44,7,66,"_ref$power"],[13,54,7,66],[14,6,7,66,"_ref$decay"],[14,16,7,66],[14,19,7,66,"_ref"],[14,23,7,66],[14,24,7,68,"decay"],[14,29,7,73],[15,6,7,68,"decay"],[15,11,7,73],[15,14,7,73,"_ref$decay"],[15,24,7,73],[15,38,7,76],[15,43,7,81],[15,46,7,81,"_ref$decay"],[15,56,7,81],[16,6,7,83,"bounceDamping"],[16,19,7,96],[16,22,7,96,"_ref"],[16,26,7,96],[16,27,7,83,"bounceDamping"],[16,40,7,96],[17,6,7,98,"bounceStiffness"],[17,21,7,113],[17,24,7,113,"_ref"],[17,28,7,113],[17,29,7,98,"bounceStiffness"],[17,44,7,113],[18,6,7,115,"changeTarget"],[18,18,7,127],[18,21,7,127,"_ref"],[18,25,7,127],[18,26,7,115,"changeTarget"],[18,38,7,127],[19,6,7,129,"min"],[19,9,7,132],[19,12,7,132,"_ref"],[19,16,7,132],[19,17,7,129,"min"],[19,20,7,132],[20,6,7,134,"max"],[20,9,7,137],[20,12,7,137,"_ref"],[20,16,7,137],[20,17,7,134,"max"],[20,20,7,137],[21,6,7,137,"_ref$restDistance"],[21,23,7,137],[21,26,7,137,"_ref"],[21,30,7,137],[21,31,7,139,"restDistance"],[21,43,7,151],[22,6,7,139,"restDistance"],[22,18,7,151],[22,21,7,151,"_ref$restDistance"],[22,38,7,151],[22,52,7,154],[22,55,7,157],[22,58,7,157,"_ref$restDistance"],[22,75,7,157],[23,6,7,159,"restSpeed"],[23,15,7,168],[23,18,7,168,"_ref"],[23,22,7,168],[23,23,7,159,"restSpeed"],[23,32,7,168],[24,4,8,4,"decay"],[24,9,8,9],[24,12,8,12,"utils"],[24,17,8,17],[24,18,8,18,"time"],[24,22,8,22],[24,23,8,23,"ms"],[24,25,8,25],[24,26,8,26,"decay"],[24,31,8,31],[24,32,8,32],[25,4,9,4],[25,8,9,10,"state"],[25,13,9,15],[25,16,9,18],[26,6,10,8,"hasReachedTarget"],[26,22,10,24],[26,24,10,26],[26,29,10,31],[27,6,11,8,"done"],[27,10,11,12],[27,12,11,14],[27,17,11,19],[28,6,12,8,"current"],[28,13,12,15],[28,15,12,17,"from"],[28,19,12,21],[29,6,13,8,"target"],[29,12,13,14],[29,14,13,16,"from"],[30,4,14,4],[30,5,14,5],[31,4,15,4],[31,8,15,10,"isOutOfBounds"],[31,21,15,23],[31,24,15,27,"v"],[31,25,15,28],[31,29,15,34,"min"],[31,32,15,37],[31,37,15,42,"undefined"],[31,46,15,51],[31,50,15,55,"v"],[31,51,15,56],[31,54,15,59,"min"],[31,57,15,62],[31,61,15,68,"max"],[31,64,15,71],[31,69,15,76,"undefined"],[31,78,15,85],[31,82,15,89,"v"],[31,83,15,90],[31,86,15,93,"max"],[31,89,15,97],[32,4,16,4],[32,8,16,10,"nearestBoundary"],[32,23,16,25],[32,26,16,29,"v"],[32,27,16,30],[32,31,16,35],[33,6,17,8],[33,10,17,12,"min"],[33,13,17,15],[33,18,17,20,"undefined"],[33,27,17,29],[33,29,18,12],[33,36,18,19,"max"],[33,39,18,22],[34,6,19,8],[34,10,19,12,"max"],[34,13,19,15],[34,18,19,20,"undefined"],[34,27,19,29],[34,29,20,12],[34,36,20,19,"min"],[34,39,20,22],[35,6,21,8],[35,13,21,15,"Math"],[35,17,21,19],[35,18,21,20,"abs"],[35,21,21,23],[35,22,21,24,"min"],[35,25,21,27],[35,28,21,30,"v"],[35,29,21,31],[35,30,21,32],[35,33,21,35,"Math"],[35,37,21,39],[35,38,21,40,"abs"],[35,41,21,43],[35,42,21,44,"max"],[35,45,21,47],[35,48,21,50,"v"],[35,49,21,51],[35,50,21,52],[35,53,21,55,"min"],[35,56,21,58],[35,59,21,61,"max"],[35,62,21,64],[36,4,22,4],[36,5,22,5],[37,4,23,4],[37,8,23,8,"amplitude"],[37,17,23,17],[37,20,23,20,"power"],[37,25,23,25],[37,28,23,28,"velocity$1"],[37,38,23,38],[38,4,24,4],[38,8,24,10,"ideal"],[38,13,24,15],[38,16,24,18,"from"],[38,20,24,22],[38,23,24,25,"amplitude"],[38,32,24,34],[39,4,25,4],[39,8,25,10,"target"],[39,14,25,16],[39,17,25,19,"changeTarget"],[39,29,25,31],[39,34,25,36,"undefined"],[39,43,25,45],[39,46,25,48,"ideal"],[39,51,25,53],[39,54,25,56,"changeTarget"],[39,66,25,68],[39,67,25,69,"ideal"],[39,72,25,74],[39,73,25,75],[40,4,26,4,"state"],[40,9,26,9],[40,10,26,10,"target"],[40,16,26,16],[40,19,26,19,"target"],[40,25,26,25],[41,4,27,4],[42,0,28,0],[43,0,29,0],[44,0,30,0],[45,4,31,4],[45,8,31,8,"target"],[45,14,31,14],[45,19,31,19,"ideal"],[45,24,31,24],[45,26,32,8,"amplitude"],[45,35,32,17],[45,38,32,20,"target"],[45,44,32,26],[45,47,32,29,"from"],[45,51,32,33],[46,4,33,4],[46,8,33,10,"calcDelta"],[46,17,33,19],[46,20,33,23,"t"],[46,21,33,24],[46,25,33,29],[46,26,33,30,"amplitude"],[46,35,33,39],[46,38,33,42,"Math"],[46,42,33,46],[46,43,33,47,"exp"],[46,46,33,50],[46,47,33,51],[46,48,33,52,"t"],[46,49,33,53],[46,52,33,56,"decay"],[46,57,33,61],[46,58,33,62],[47,4,34,4],[47,8,34,10,"calcLatest"],[47,18,34,20],[47,21,34,24,"t"],[47,22,34,25],[47,26,34,30,"target"],[47,32,34,36],[47,35,34,39,"calcDelta"],[47,44,34,48],[47,45,34,49,"t"],[47,46,34,50],[47,47,34,51],[48,4,35,4],[48,8,35,10,"applyFriction"],[48,21,35,23],[48,24,35,27,"t"],[48,25,35,28],[48,29,35,33],[49,6,36,8],[49,10,36,14,"delta"],[49,15,36,19],[49,18,36,22,"calcDelta"],[49,27,36,31],[49,28,36,32,"t"],[49,29,36,33],[49,30,36,34],[50,6,37,8],[50,10,37,14,"latest"],[50,16,37,20],[50,19,37,23,"calcLatest"],[50,29,37,33],[50,30,37,34,"t"],[50,31,37,35],[50,32,37,36],[51,6,38,8,"state"],[51,11,38,13],[51,12,38,14,"done"],[51,16,38,18],[51,19,38,21,"Math"],[51,23,38,25],[51,24,38,26,"abs"],[51,27,38,29],[51,28,38,30,"delta"],[51,33,38,35],[51,34,38,36],[51,38,38,40,"restDistance"],[51,50,38,52],[52,6,39,8,"state"],[52,11,39,13],[52,12,39,14,"current"],[52,19,39,21],[52,22,39,24,"state"],[52,27,39,29],[52,28,39,30,"done"],[52,32,39,34],[52,35,39,37,"target"],[52,41,39,43],[52,44,39,46,"latest"],[52,50,39,52],[53,4,40,4],[53,5,40,5],[54,4,41,4],[55,0,42,0],[56,0,43,0],[57,0,44,0],[58,0,45,0],[59,0,46,0],[60,4,47,4],[60,8,47,8,"timeReachedBoundary"],[60,27,47,27],[61,4,48,4],[61,8,48,8,"spring"],[61,14,48,14],[62,4,49,4],[62,8,49,10,"checkCatchBoundary"],[62,26,49,28],[62,29,49,32,"t"],[62,30,49,33],[62,34,49,38],[63,6,50,8],[63,10,50,12],[63,11,50,13,"isOutOfBounds"],[63,24,50,26],[63,25,50,27,"state"],[63,30,50,32],[63,31,50,33,"current"],[63,38,50,40],[63,39,50,41],[63,41,51,12],[64,6,52,8,"timeReachedBoundary"],[64,25,52,27],[64,28,52,30,"t"],[64,29,52,31],[65,6,53,8,"spring"],[65,12,53,14],[65,15,53,17,"index"],[65,20,53,22],[65,21,53,23,"spring"],[65,27,53,29],[65,28,53,30],[66,8,54,12,"from"],[66,12,54,16],[66,14,54,18,"state"],[66,19,54,23],[66,20,54,24,"current"],[66,27,54,31],[67,8,55,12,"to"],[67,10,55,14],[67,12,55,16,"nearestBoundary"],[67,27,55,31],[67,28,55,32,"state"],[67,33,55,37],[67,34,55,38,"current"],[67,41,55,45],[67,42,55,46],[68,8,56,12,"velocity"],[68,16,56,20],[68,18,56,22,"velocity"],[68,26,56,30],[68,27,56,31,"calcGeneratorVelocity"],[68,48,56,52],[68,49,56,53,"calcLatest"],[68,59,56,63],[68,61,56,65,"t"],[68,62,56,66],[68,64,56,68,"state"],[68,69,56,73],[68,70,56,74,"current"],[68,77,56,81],[68,78,56,82],[69,8,56,84],[70,8,57,12,"damping"],[70,15,57,19],[70,17,57,21,"bounceDamping"],[70,30,57,34],[71,8,58,12,"stiffness"],[71,17,58,21],[71,19,58,23,"bounceStiffness"],[71,34,58,38],[72,8,59,12,"restDistance"],[72,20,59,24],[73,8,60,12,"restSpeed"],[74,6,61,8],[74,7,61,9],[74,8,61,10],[75,4,62,4],[75,5,62,5],[76,4,63,4,"checkCatchBoundary"],[76,22,63,22],[76,23,63,23],[76,24,63,24],[76,25,63,25],[77,4,64,4],[77,11,64,12,"t"],[77,12,64,13],[77,16,64,18],[78,6,65,8],[79,0,66,0],[80,0,67,0],[81,0,68,0],[82,0,69,0],[83,0,70,0],[84,6,71,8],[84,10,71,12,"hasUpdatedFrame"],[84,25,71,27],[84,28,71,30],[84,33,71,35],[85,6,72,8],[85,10,72,12],[85,11,72,13,"spring"],[85,17,72,19],[85,21,72,23,"timeReachedBoundary"],[85,40,72,42],[85,45,72,47,"undefined"],[85,54,72,56],[85,56,72,58],[86,8,73,12,"hasUpdatedFrame"],[86,23,73,27],[86,26,73,30],[86,30,73,34],[87,8,74,12,"applyFriction"],[87,21,74,25],[87,22,74,26,"t"],[87,23,74,27],[87,24,74,28],[88,8,75,12,"checkCatchBoundary"],[88,26,75,30],[88,27,75,31,"t"],[88,28,75,32],[88,29,75,33],[89,6,76,8],[90,6,77,8],[91,0,78,0],[92,0,79,0],[93,0,80,0],[94,6,81,8],[94,10,81,12,"timeReachedBoundary"],[94,29,81,31],[94,34,81,36,"undefined"],[94,43,81,45],[94,47,81,49,"t"],[94,48,81,50],[94,51,81,53,"timeReachedBoundary"],[94,70,81,72],[94,72,81,74],[95,8,82,12,"state"],[95,13,82,17],[95,14,82,18,"hasReachedTarget"],[95,30,82,34],[95,33,82,37],[95,37,82,41],[96,8,83,12],[96,15,83,19,"spring"],[96,21,83,25],[96,22,83,26,"t"],[96,23,83,27],[96,26,83,30,"timeReachedBoundary"],[96,45,83,49],[96,46,83,50],[97,6,84,8],[97,7,84,9],[97,13,85,13],[98,8,86,12,"state"],[98,13,86,17],[98,14,86,18,"hasReachedTarget"],[98,30,86,34],[98,33,86,37],[98,38,86,42],[99,8,87,12],[99,9,87,13,"hasUpdatedFrame"],[99,24,87,28],[99,28,87,32,"applyFriction"],[99,41,87,45],[99,42,87,46,"t"],[99,43,87,47],[99,44,87,48],[100,8,88,12],[100,15,88,19,"state"],[100,20,88,24],[101,6,89,8],[102,4,90,4],[102,5,90,5],[103,2,91,0],[103,3,91,1],[104,2,93,0,"exports"],[104,9,93,7],[104,10,93,8,"glide"],[104,15,93,13],[104,18,93,16,"glide"],[104,23,93,21],[105,0,93,22],[105,3]],"functionMap":{"names":["<global>","glide","isOutOfBounds","nearestBoundary","calcDelta","calcLatest","applyFriction","checkCatchBoundary","<anonymous>"],"mappings":"AAA;cCM;0BCQ,uED;4BEC;KFM;sBGW,wCH;uBIC,4BJ;0BKC;KLK;+BMS;KNa;WOE;KP0B;CDC"},"hasCjsExports":true},"type":"js/module"}]}