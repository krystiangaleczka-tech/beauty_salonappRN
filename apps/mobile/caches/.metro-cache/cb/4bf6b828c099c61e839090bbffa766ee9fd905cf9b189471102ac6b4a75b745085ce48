{"dependencies":[{"name":"./_baseTimes","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":16,"index":16},"end":{"line":1,"column":39,"index":39}}],"key":"H/0aTKHftqcav3mm/9qsS8ZW+UQ=","exportNames":["*"]}},{"name":"./_castFunction","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":19,"index":60},"end":{"line":2,"column":45,"index":86}}],"key":"1dFIHVwj4HbdFRhWjWndKDbVn9o=","exportNames":["*"]}},{"name":"./toInteger","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":104},"end":{"line":3,"column":38,"index":126}}],"key":"7q74FT3KOenrPt1kztNMUTmUjuc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var baseTimes = require(_dependencyMap[0], \"./_baseTimes\"),\n    castFunction = require(_dependencyMap[1], \"./_castFunction\"),\n    toInteger = require(_dependencyMap[2], \"./toInteger\");\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER = 9007199254740991;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295;\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMin = Math.min;\n\n  /**\n   * Invokes the iteratee `n` times, returning an array of the results of\n   * each invocation. The iteratee is invoked with one argument; (index).\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Util\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   * @example\n   *\n   * _.times(3, String);\n   * // => ['0', '1', '2']\n   *\n   *  _.times(4, _.constant(0));\n   * // => [0, 0, 0, 0]\n   */\n  function times(n, iteratee) {\n    n = toInteger(n);\n    if (n < 1 || n > MAX_SAFE_INTEGER) {\n      return [];\n    }\n    var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n    iteratee = castFunction(iteratee);\n    n -= MAX_ARRAY_LENGTH;\n    var result = baseTimes(length, iteratee);\n    while (++index < n) {\n      iteratee(index);\n    }\n    return result;\n  }\n  module.exports = times;\n});","lineCount":50,"map":[[2,2,1,0],[2,6,1,4,"baseTimes"],[2,15,1,13],[2,18,1,16,"require"],[2,25,1,23],[2,26,1,23,"_dependencyMap"],[2,40,1,23],[2,59,1,38],[2,60,1,39],[3,4,2,4,"castFunction"],[3,16,2,16],[3,19,2,19,"require"],[3,26,2,26],[3,27,2,26,"_dependencyMap"],[3,41,2,26],[3,63,2,44],[3,64,2,45],[4,4,3,4,"toInteger"],[4,13,3,13],[4,16,3,16,"require"],[4,23,3,23],[4,24,3,23,"_dependencyMap"],[4,38,3,23],[4,56,3,37],[4,57,3,38],[6,2,5,0],[7,2,6,0],[7,6,6,4,"MAX_SAFE_INTEGER"],[7,22,6,20],[7,25,6,23],[7,41,6,39],[9,2,8,0],[10,2,9,0],[10,6,9,4,"MAX_ARRAY_LENGTH"],[10,22,9,20],[10,25,9,23],[10,35,9,33],[12,2,11,0],[13,2,12,0],[13,6,12,4,"nativeMin"],[13,15,12,13],[13,18,12,16,"Math"],[13,22,12,20],[13,23,12,21,"min"],[13,26,12,24],[15,2,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,2,33,0],[34,11,33,9,"times"],[34,16,33,14,"times"],[34,17,33,15,"n"],[34,18,33,16],[34,20,33,18,"iteratee"],[34,28,33,26],[34,30,33,28],[35,4,34,2,"n"],[35,5,34,3],[35,8,34,6,"toInteger"],[35,17,34,15],[35,18,34,16,"n"],[35,19,34,17],[35,20,34,18],[36,4,35,2],[36,8,35,6,"n"],[36,9,35,7],[36,12,35,10],[36,13,35,11],[36,17,35,15,"n"],[36,18,35,16],[36,21,35,19,"MAX_SAFE_INTEGER"],[36,37,35,35],[36,39,35,37],[37,6,36,4],[37,13,36,11],[37,15,36,13],[38,4,37,2],[39,4,38,2],[39,8,38,6,"index"],[39,13,38,11],[39,16,38,14,"MAX_ARRAY_LENGTH"],[39,32,38,30],[40,6,39,6,"length"],[40,12,39,12],[40,15,39,15,"nativeMin"],[40,24,39,24],[40,25,39,25,"n"],[40,26,39,26],[40,28,39,28,"MAX_ARRAY_LENGTH"],[40,44,39,44],[40,45,39,45],[41,4,41,2,"iteratee"],[41,12,41,10],[41,15,41,13,"castFunction"],[41,27,41,25],[41,28,41,26,"iteratee"],[41,36,41,34],[41,37,41,35],[42,4,42,2,"n"],[42,5,42,3],[42,9,42,7,"MAX_ARRAY_LENGTH"],[42,25,42,23],[43,4,44,2],[43,8,44,6,"result"],[43,14,44,12],[43,17,44,15,"baseTimes"],[43,26,44,24],[43,27,44,25,"length"],[43,33,44,31],[43,35,44,33,"iteratee"],[43,43,44,41],[43,44,44,42],[44,4,45,2],[44,11,45,9],[44,13,45,11,"index"],[44,18,45,16],[44,21,45,19,"n"],[44,22,45,20],[44,24,45,22],[45,6,46,4,"iteratee"],[45,14,46,12],[45,15,46,13,"index"],[45,20,46,18],[45,21,46,19],[46,4,47,2],[47,4,48,2],[47,11,48,9,"result"],[47,17,48,15],[48,2,49,0],[49,2,51,0,"module"],[49,8,51,6],[49,9,51,7,"exports"],[49,16,51,14],[49,19,51,17,"times"],[49,24,51,22],[50,0,51,23],[50,3]],"functionMap":{"names":["<global>","times"],"mappings":"AAA;ACgC;CDgB"}},"type":"js/module"}]}