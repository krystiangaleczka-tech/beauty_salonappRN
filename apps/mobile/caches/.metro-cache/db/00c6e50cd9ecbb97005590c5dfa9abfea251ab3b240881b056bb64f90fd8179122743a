{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":68,"index":83}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"./Image","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":85},"end":{"line":5,"column":32,"index":117}}],"key":"I2Mr3f3chxmh02krEQCRqYY9hRA=","exportNames":["*"],"imports":1}},{"name":"./utils/resolveSources","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":196},"end":{"line":7,"column":55,"index":251}}],"key":"DpM65pxwg+MyXfeuGazS5AMaNMU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use client';\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.useImage = useImage;\n  var _react = require(_dependencyMap[0], \"react\");\n  var _Image = require(_dependencyMap[1], \"./Image\");\n  var _utilsResolveSources = require(_dependencyMap[2], \"./utils/resolveSources\");\n  /**\n   * A hook that loads an image from the given source and returns a reference\n   * to the native image instance, or `null` until the first image is successfully loaded.\n   *\n   * It loads a new image every time the `uri` of the provided source changes.\n   * To trigger reloads in some other scenarios, you can provide an additional dependency list.\n   * @platform android\n   * @platform ios\n   * @platform web\n   *\n   * @example\n   * ```ts\n   * import { useImage, Image } from 'expo-image';\n   * import { Text } from 'react-native';\n   *\n   * export default function MyImage() {\n   *   const image = useImage('https://picsum.photos/1000/800', {\n   *     maxWidth: 800,\n   *     onError(error, retry) {\n   *       console.error('Loading failed:', error.message);\n   *     }\n   *   });\n   *\n   *   if (!image) {\n   *     return <Text>Image is loading...</Text>;\n   *   }\n   *\n   *   return <Image source={image} style={{ width: image.width / 2, height: image.height / 2 }} />;\n   * }\n   * ```\n   */\n  function useImage(source, options = {}, dependencies = []) {\n    const resolvedSource = (0, _utilsResolveSources.resolveSource)(source);\n    const [image, setImage] = (0, _react.useState)(null);\n\n    // Since options are not dependencies of the below effect, we store them in a ref.\n    // Once the image is asynchronously loaded, the effect will use the most recent options,\n    // instead of the captured ones (especially important for callbacks that may change in subsequent renders).\n    const optionsRef = (0, _react.useRef)(options);\n    optionsRef.current = options;\n    (0, _react.useEffect)(() => {\n      // We're doing some asynchronous action in this effect, so we should keep track\n      // if the effect was already cleaned up. In that case, the async action shouldn't change the state.\n      let isEffectValid = true;\n      function loadImage() {\n        _Image.Image.loadAsync(resolvedSource, options).then(image => {\n          if (isEffectValid) {\n            setImage(image);\n          }\n        }).catch(error => {\n          if (!isEffectValid) {\n            return;\n          }\n          if (optionsRef.current.onError) {\n            optionsRef.current.onError(error, loadImage);\n          } else {\n            // Print unhandled errors to the console.\n            console.error(`Loading an image from '${resolvedSource.uri}' failed, use 'onError' option to handle errors and suppress this message`);\n            console.error(error);\n          }\n        });\n      }\n      loadImage();\n      return () => {\n        // Invalidate the effect and release the shared object to free up memory.\n        isEffectValid = false;\n        image?.release();\n      };\n    }, [resolvedSource.uri, ...dependencies]);\n    return image;\n  }\n});","lineCount":83,"map":[[2,2,1,0],[2,14,1,12],[3,2,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,40,0,"exports"],[8,9,40,0],[8,10,40,0,"useImage"],[8,18,40,0],[8,21,40,0,"useImage"],[8,29,40,0],[9,2,3,0],[9,6,3,0,"_react"],[9,12,3,0],[9,15,3,0,"require"],[9,22,3,0],[9,23,3,0,"_dependencyMap"],[9,37,3,0],[10,2,5,0],[10,6,5,0,"_Image"],[10,12,5,0],[10,15,5,0,"require"],[10,22,5,0],[10,23,5,0,"_dependencyMap"],[10,37,5,0],[11,2,7,0],[11,6,7,0,"_utilsResolveSources"],[11,26,7,0],[11,29,7,0,"require"],[11,36,7,0],[11,37,7,0,"_dependencyMap"],[11,51,7,0],[12,2,9,0],[13,0,10,0],[14,0,11,0],[15,0,12,0],[16,0,13,0],[17,0,14,0],[18,0,15,0],[19,0,16,0],[20,0,17,0],[21,0,18,0],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,0,22,0],[26,0,23,0],[27,0,24,0],[28,0,25,0],[29,0,26,0],[30,0,27,0],[31,0,28,0],[32,0,29,0],[33,0,30,0],[34,0,31,0],[35,0,32,0],[36,0,33,0],[37,0,34,0],[38,0,35,0],[39,0,36,0],[40,0,37,0],[41,0,38,0],[42,0,39,0],[43,2,40,7],[43,11,40,16,"useImage"],[43,19,40,24,"useImage"],[43,20,41,2,"source"],[43,26,41,39],[43,28,42,2,"options"],[43,35,42,27],[43,38,42,30],[43,39,42,31],[43,40,42,32],[43,42,43,2,"dependencies"],[43,54,43,30],[43,57,43,33],[43,59,43,35],[43,61,44,19],[44,4,45,2],[44,10,45,8,"resolvedSource"],[44,24,45,22],[44,27,45,25],[44,31,45,25,"resolveSource"],[44,51,45,38],[44,52,45,38,"resolveSource"],[44,65,45,38],[44,67,45,39,"source"],[44,73,45,45],[44,74,45,61],[45,4,46,2],[45,10,46,8],[45,11,46,9,"image"],[45,16,46,14],[45,18,46,16,"setImage"],[45,26,46,24],[45,27,46,25],[45,30,46,28],[45,34,46,28,"useState"],[45,40,46,36],[45,41,46,36,"useState"],[45,49,46,36],[45,51,46,54],[45,55,46,58],[45,56,46,59],[47,4,48,2],[48,4,49,2],[49,4,50,2],[50,4,51,2],[50,10,51,8,"optionsRef"],[50,20,51,18],[50,23,51,21],[50,27,51,21,"useRef"],[50,33,51,27],[50,34,51,27,"useRef"],[50,40,51,27],[50,42,51,46,"options"],[50,49,51,53],[50,50,51,54],[51,4,52,2,"optionsRef"],[51,14,52,12],[51,15,52,13,"current"],[51,22,52,20],[51,25,52,23,"options"],[51,32,52,30],[52,4,54,2],[52,8,54,2,"useEffect"],[52,14,54,11],[52,15,54,11,"useEffect"],[52,24,54,11],[52,26,54,12],[52,32,54,18],[53,6,55,4],[54,6,56,4],[55,6,57,4],[55,10,57,8,"isEffectValid"],[55,23,57,21],[55,26,57,24],[55,30,57,28],[56,6,59,4],[56,15,59,13,"loadImage"],[56,24,59,22,"loadImage"],[56,25,59,22],[56,27,59,25],[57,8,60,6,"Image"],[57,14,60,11],[57,15,60,11,"Image"],[57,20,60,11],[57,21,60,12,"loadAsync"],[57,30,60,21],[57,31,60,22,"resolvedSource"],[57,45,60,36],[57,47,60,38,"options"],[57,54,60,45],[57,55,60,46],[57,56,61,9,"then"],[57,60,61,13],[57,61,61,15,"image"],[57,66,61,20],[57,70,61,25],[58,10,62,10],[58,14,62,14,"isEffectValid"],[58,27,62,27],[58,29,62,29],[59,12,63,12,"setImage"],[59,20,63,20],[59,21,63,21,"image"],[59,26,63,26],[59,27,63,27],[60,10,64,10],[61,8,65,8],[61,9,65,9],[61,10,65,10],[61,11,66,9,"catch"],[61,16,66,14],[61,17,66,16,"error"],[61,22,66,21],[61,26,66,26],[62,10,67,10],[62,14,67,14],[62,15,67,15,"isEffectValid"],[62,28,67,28],[62,30,67,30],[63,12,68,12],[64,10,69,10],[65,10,70,10],[65,14,70,14,"optionsRef"],[65,24,70,24],[65,25,70,25,"current"],[65,32,70,32],[65,33,70,33,"onError"],[65,40,70,40],[65,42,70,42],[66,12,71,12,"optionsRef"],[66,22,71,22],[66,23,71,23,"current"],[66,30,71,30],[66,31,71,31,"onError"],[66,38,71,38],[66,39,71,39,"error"],[66,44,71,44],[66,46,71,46,"loadImage"],[66,55,71,55],[66,56,71,56],[67,10,72,10],[67,11,72,11],[67,17,72,17],[68,12,73,12],[69,12,74,12,"console"],[69,19,74,19],[69,20,74,20,"error"],[69,25,74,25],[69,26,75,14],[69,52,75,40,"resolvedSource"],[69,66,75,54],[69,67,75,55,"uri"],[69,70,75,58],[69,145,76,12],[69,146,76,13],[70,12,77,12,"console"],[70,19,77,19],[70,20,77,20,"error"],[70,25,77,25],[70,26,77,26,"error"],[70,31,77,31],[70,32,77,32],[71,10,78,10],[72,8,79,8],[72,9,79,9],[72,10,79,10],[73,6,80,4],[74,6,82,4,"loadImage"],[74,15,82,13],[74,16,82,14],[74,17,82,15],[75,6,84,4],[75,13,84,11],[75,19,84,17],[76,8,85,6],[77,8,86,6,"isEffectValid"],[77,21,86,19],[77,24,86,22],[77,29,86,27],[78,8,87,6,"image"],[78,13,87,11],[78,15,87,13,"release"],[78,22,87,20],[78,23,87,21],[78,24,87,22],[79,6,88,4],[79,7,88,5],[80,4,89,2],[80,5,89,3],[80,7,89,5],[80,8,89,6,"resolvedSource"],[80,22,89,20],[80,23,89,21,"uri"],[80,26,89,24],[80,28,89,26],[80,31,89,29,"dependencies"],[80,43,89,41],[80,44,89,42],[80,45,89,43],[81,4,91,2],[81,11,91,9,"image"],[81,16,91,14],[82,2,92,0],[83,0,92,1],[83,3]],"functionMap":{"names":["<global>","useImage","useEffect$argument_0","loadImage","Image.loadAsync.then$argument_0","Image.loadAsync.then._catch$argument_0","<anonymous>"],"mappings":"AAA;OCuC;YCc;ICK;cCE;SDI;eEC;SFa;KDC;WII;KJI;GDC;CDG"},"hasCjsExports":false},"type":"js/module"}]}