{"dependencies":[{"name":"./_MapCache","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":15,"index":15},"end":{"line":1,"column":37,"index":37}}],"key":"Erkzgzuh63BX11LhXGH4R+oArak=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var MapCache = require(_dependencyMap[0], \"./_MapCache\");\n\n  /** Error message constants. */\n  var FUNC_ERROR_TEXT = 'Expected a function';\n\n  /**\n   * Creates a function that memoizes the result of `func`. If `resolver` is\n   * provided, it determines the cache key for storing the result based on the\n   * arguments provided to the memoized function. By default, the first argument\n   * provided to the memoized function is used as the map cache key. The `func`\n   * is invoked with the `this` binding of the memoized function.\n   *\n   * **Note:** The cache is exposed as the `cache` property on the memoized\n   * function. Its creation may be customized by replacing the `_.memoize.Cache`\n   * constructor with one whose instances implement the\n   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n   * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to have its output memoized.\n   * @param {Function} [resolver] The function to resolve the cache key.\n   * @returns {Function} Returns the new memoized function.\n   * @example\n   *\n   * var object = { 'a': 1, 'b': 2 };\n   * var other = { 'c': 3, 'd': 4 };\n   *\n   * var values = _.memoize(_.values);\n   * values(object);\n   * // => [1, 2]\n   *\n   * values(other);\n   * // => [3, 4]\n   *\n   * object.a = 2;\n   * values(object);\n   * // => [1, 2]\n   *\n   * // Modify the result cache.\n   * values.cache.set(object, ['a', 'b']);\n   * values(object);\n   * // => ['a', 'b']\n   *\n   * // Replace `_.memoize.Cache`.\n   * _.memoize.Cache = WeakMap;\n   */\n  function memoize(func, resolver) {\n    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n    var memoized = function () {\n      var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n      if (cache.has(key)) {\n        return cache.get(key);\n      }\n      var result = func.apply(this, args);\n      memoized.cache = cache.set(key, result) || cache;\n      return result;\n    };\n    memoized.cache = new (memoize.Cache || MapCache)();\n    return memoized;\n  }\n\n  // Expose `MapCache`.\n  memoize.Cache = MapCache;\n  module.exports = memoize;\n});","lineCount":73,"map":[[2,2,1,0],[2,6,1,4,"MapCache"],[2,14,1,12],[2,17,1,15,"require"],[2,24,1,22],[2,25,1,22,"_dependencyMap"],[2,39,1,22],[2,57,1,36],[2,58,1,37],[4,2,3,0],[5,2,4,0],[5,6,4,4,"FUNC_ERROR_TEXT"],[5,21,4,19],[5,24,4,22],[5,45,4,43],[7,2,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,0,36,0],[38,0,37,0],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,0,41,0],[43,0,42,0],[44,0,43,0],[45,0,44,0],[46,0,45,0],[47,0,46,0],[48,0,47,0],[49,0,48,0],[50,0,49,0],[51,2,50,0],[51,11,50,9,"memoize"],[51,18,50,16,"memoize"],[51,19,50,17,"func"],[51,23,50,21],[51,25,50,23,"resolver"],[51,33,50,31],[51,35,50,33],[52,4,51,2],[52,8,51,6],[52,15,51,13,"func"],[52,19,51,17],[52,23,51,21],[52,33,51,31],[52,37,51,36,"resolver"],[52,45,51,44],[52,49,51,48],[52,53,51,52],[52,57,51,56],[52,64,51,63,"resolver"],[52,72,51,71],[52,76,51,75],[52,86,51,86],[52,88,51,88],[53,6,52,4],[53,12,52,10],[53,16,52,14,"TypeError"],[53,25,52,23],[53,26,52,24,"FUNC_ERROR_TEXT"],[53,41,52,39],[53,42,52,40],[54,4,53,2],[55,4,54,2],[55,8,54,6,"memoized"],[55,16,54,14],[55,19,54,17],[55,28,54,17,"memoized"],[55,29,54,17],[55,31,54,28],[56,6,55,4],[56,10,55,8,"args"],[56,14,55,12],[56,17,55,15,"arguments"],[56,26,55,24],[57,8,56,8,"key"],[57,11,56,11],[57,14,56,14,"resolver"],[57,22,56,22],[57,25,56,25,"resolver"],[57,33,56,33],[57,34,56,34,"apply"],[57,39,56,39],[57,40,56,40],[57,44,56,44],[57,46,56,46,"args"],[57,50,56,50],[57,51,56,51],[57,54,56,54,"args"],[57,58,56,58],[57,59,56,59],[57,60,56,60],[57,61,56,61],[58,8,57,8,"cache"],[58,13,57,13],[58,16,57,16,"memoized"],[58,24,57,24],[58,25,57,25,"cache"],[58,30,57,30],[59,6,59,4],[59,10,59,8,"cache"],[59,15,59,13],[59,16,59,14,"has"],[59,19,59,17],[59,20,59,18,"key"],[59,23,59,21],[59,24,59,22],[59,26,59,24],[60,8,60,6],[60,15,60,13,"cache"],[60,20,60,18],[60,21,60,19,"get"],[60,24,60,22],[60,25,60,23,"key"],[60,28,60,26],[60,29,60,27],[61,6,61,4],[62,6,62,4],[62,10,62,8,"result"],[62,16,62,14],[62,19,62,17,"func"],[62,23,62,21],[62,24,62,22,"apply"],[62,29,62,27],[62,30,62,28],[62,34,62,32],[62,36,62,34,"args"],[62,40,62,38],[62,41,62,39],[63,6,63,4,"memoized"],[63,14,63,12],[63,15,63,13,"cache"],[63,20,63,18],[63,23,63,21,"cache"],[63,28,63,26],[63,29,63,27,"set"],[63,32,63,30],[63,33,63,31,"key"],[63,36,63,34],[63,38,63,36,"result"],[63,44,63,42],[63,45,63,43],[63,49,63,47,"cache"],[63,54,63,52],[64,6,64,4],[64,13,64,11,"result"],[64,19,64,17],[65,4,65,2],[65,5,65,3],[66,4,66,2,"memoized"],[66,12,66,10],[66,13,66,11,"cache"],[66,18,66,16],[66,21,66,19],[66,26,66,24,"memoize"],[66,33,66,31],[66,34,66,32,"Cache"],[66,39,66,37],[66,43,66,41,"MapCache"],[66,51,66,49],[66,54,66,50],[67,4,67,2],[67,11,67,9,"memoized"],[67,19,67,17],[68,2,68,0],[70,2,70,0],[71,2,71,0,"memoize"],[71,9,71,7],[71,10,71,8,"Cache"],[71,15,71,13],[71,18,71,16,"MapCache"],[71,26,71,24],[72,2,73,0,"module"],[72,8,73,6],[72,9,73,7,"exports"],[72,16,73,14],[72,19,73,17,"memoize"],[72,26,73,24],[73,0,73,25],[73,3]],"functionMap":{"names":["<global>","memoize","memoized"],"mappings":"AAA;ACiD;iBCI;GDW;CDG"}},"type":"js/module"}]}