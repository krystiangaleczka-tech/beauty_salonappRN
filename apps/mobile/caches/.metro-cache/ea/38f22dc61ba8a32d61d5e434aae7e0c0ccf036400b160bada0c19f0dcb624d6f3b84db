{"dependencies":[{"name":"../core/exceptions/CustomError","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":20,"index":97},"end":{"line":3,"column":61,"index":138}}],"key":"2oI0/7Vq1F9RGEK4MC6TuovyFDA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var CustomError_1 = require(_dependencyMap[0], \"../core/exceptions/CustomError\");\n  var BinarySearch = /** @class */function () {\n    function BinarySearch() {}\n    BinarySearch.findClosestHigherValueIndex = function (size, targetValue, valueExtractor) {\n      var low = 0;\n      var high = size - 1;\n      var mid = Math.floor((low + high) / 2);\n      var lastValue = 0;\n      var absoluteLastDiff = Math.abs(valueExtractor(mid) - targetValue);\n      var result = mid;\n      var diff = 0;\n      var absoluteDiff = 0;\n      if (absoluteLastDiff === 0) {\n        return result;\n      }\n      if (high < 0) {\n        throw new CustomError_1.default({\n          message: \"The collection cannot be empty\",\n          type: \"InvalidStateException\"\n        });\n      }\n      while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        lastValue = valueExtractor(mid);\n        diff = lastValue - targetValue;\n        absoluteDiff = Math.abs(diff);\n        if (diff >= 0 && absoluteDiff < absoluteLastDiff) {\n          absoluteLastDiff = absoluteDiff;\n          result = mid;\n        }\n        if (targetValue < lastValue) {\n          high = mid - 1;\n        } else if (targetValue > lastValue) {\n          low = mid + 1;\n        } else {\n          return mid;\n        }\n      }\n      return result;\n    };\n    BinarySearch.findClosestValueToTarget = function (values, target) {\n      var low = 0;\n      var high = values.length - 1;\n      var mid = Math.floor((low + high) / 2);\n      var midValue = values[mid];\n      var lastMidValue = midValue + 1;\n      while (low <= high && midValue !== lastMidValue) {\n        if (midValue === target) {\n          break;\n        } else if (midValue < target) {\n          low = mid;\n        } else if (midValue > target) {\n          high = mid;\n        }\n        mid = Math.floor((low + high) / 2);\n        lastMidValue = midValue;\n        midValue = values[mid];\n      }\n      return {\n        value: midValue,\n        index: mid\n      };\n    };\n    /**\n     * Largest value from given values that is smaller or equal to the target number.\n     */\n    BinarySearch.findValueSmallerThanTarget = function (values, target) {\n      var low = 0;\n      var high = values.length - 1;\n      if (target >= values[high]) {\n        return {\n          value: values[high],\n          index: high\n        };\n      } else if (target < values[low]) {\n        return undefined;\n      }\n      var midValueAndIndex = this.findClosestValueToTarget(values, target);\n      var midValue = midValueAndIndex.value;\n      var mid = midValueAndIndex.index;\n      if (midValue <= target) {\n        return {\n          value: midValue,\n          index: mid\n        };\n      } else {\n        return {\n          value: values[mid - 1],\n          index: mid - 1\n        };\n      }\n    };\n    /**\n     * Smallest value from given values that is larger or equal to the target number.\n     */\n    BinarySearch.findValueLargerThanTarget = function (values, target) {\n      var low = 0;\n      var high = values.length - 1;\n      if (target < values[low]) {\n        return {\n          value: values[low],\n          index: low\n        };\n      } else if (target > values[high]) {\n        return undefined;\n      }\n      var midValueAndIndex = this.findClosestValueToTarget(values, target);\n      var midValue = midValueAndIndex.value;\n      var mid = midValueAndIndex.index;\n      if (midValue >= target) {\n        return {\n          value: midValue,\n          index: mid\n        };\n      } else {\n        return {\n          value: values[mid + 1],\n          index: mid + 1\n        };\n      }\n    };\n    BinarySearch.findIndexOf = function (array, value) {\n      var j = 0;\n      var length = array.length;\n      var i = 0;\n      while (j < length) {\n        i = length + j - 1 >> 1;\n        if (value > array[i]) {\n          j = i + 1;\n        } else if (value < array[i]) {\n          length = i;\n        } else {\n          return i;\n        }\n      }\n      return -1;\n    };\n    return BinarySearch;\n  }();\n  exports.default = BinarySearch;\n});","lineCount":147,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0],[7,6,3,4,"CustomError_1"],[7,19,3,17],[7,22,3,20,"require"],[7,29,3,27],[7,30,3,27,"_dependencyMap"],[7,44,3,27],[7,81,3,60],[7,82,3,61],[8,2,4,0],[8,6,4,4,"BinarySearch"],[8,18,4,16],[8,21,4,19],[8,34,4,34],[8,46,4,46],[9,4,5,4],[9,13,5,13,"BinarySearch"],[9,25,5,25,"BinarySearch"],[9,26,5,25],[9,28,5,28],[9,29,6,4],[10,4,7,4,"BinarySearch"],[10,16,7,16],[10,17,7,17,"findClosestHigherValueIndex"],[10,44,7,44],[10,47,7,47],[10,57,7,57,"size"],[10,61,7,61],[10,63,7,63,"targetValue"],[10,74,7,74],[10,76,7,76,"valueExtractor"],[10,90,7,90],[10,92,7,92],[11,6,8,8],[11,10,8,12,"low"],[11,13,8,15],[11,16,8,18],[11,17,8,19],[12,6,9,8],[12,10,9,12,"high"],[12,14,9,16],[12,17,9,19,"size"],[12,21,9,23],[12,24,9,26],[12,25,9,27],[13,6,10,8],[13,10,10,12,"mid"],[13,13,10,15],[13,16,10,18,"Math"],[13,20,10,22],[13,21,10,23,"floor"],[13,26,10,28],[13,27,10,29],[13,28,10,30,"low"],[13,31,10,33],[13,34,10,36,"high"],[13,38,10,40],[13,42,10,44],[13,43,10,45],[13,44,10,46],[14,6,11,8],[14,10,11,12,"lastValue"],[14,19,11,21],[14,22,11,24],[14,23,11,25],[15,6,12,8],[15,10,12,12,"absoluteLastDiff"],[15,26,12,28],[15,29,12,31,"Math"],[15,33,12,35],[15,34,12,36,"abs"],[15,37,12,39],[15,38,12,40,"valueExtractor"],[15,52,12,54],[15,53,12,55,"mid"],[15,56,12,58],[15,57,12,59],[15,60,12,62,"targetValue"],[15,71,12,73],[15,72,12,74],[16,6,13,8],[16,10,13,12,"result"],[16,16,13,18],[16,19,13,21,"mid"],[16,22,13,24],[17,6,14,8],[17,10,14,12,"diff"],[17,14,14,16],[17,17,14,19],[17,18,14,20],[18,6,15,8],[18,10,15,12,"absoluteDiff"],[18,22,15,24],[18,25,15,27],[18,26,15,28],[19,6,16,8],[19,10,16,12,"absoluteLastDiff"],[19,26,16,28],[19,31,16,33],[19,32,16,34],[19,34,16,36],[20,8,17,12],[20,15,17,19,"result"],[20,21,17,25],[21,6,18,8],[22,6,19,8],[22,10,19,12,"high"],[22,14,19,16],[22,17,19,19],[22,18,19,20],[22,20,19,22],[23,8,20,12],[23,14,20,18],[23,18,20,22,"CustomError_1"],[23,31,20,35],[23,32,20,36,"default"],[23,39,20,43],[23,40,20,44],[24,10,21,16,"message"],[24,17,21,23],[24,19,21,25],[24,51,21,57],[25,10,22,16,"type"],[25,14,22,20],[25,16,22,22],[26,8,23,12],[26,9,23,13],[26,10,23,14],[27,6,24,8],[28,6,25,8],[28,13,25,15,"low"],[28,16,25,18],[28,20,25,22,"high"],[28,24,25,26],[28,26,25,28],[29,8,26,12,"mid"],[29,11,26,15],[29,14,26,18,"Math"],[29,18,26,22],[29,19,26,23,"floor"],[29,24,26,28],[29,25,26,29],[29,26,26,30,"low"],[29,29,26,33],[29,32,26,36,"high"],[29,36,26,40],[29,40,26,44],[29,41,26,45],[29,42,26,46],[30,8,27,12,"lastValue"],[30,17,27,21],[30,20,27,24,"valueExtractor"],[30,34,27,38],[30,35,27,39,"mid"],[30,38,27,42],[30,39,27,43],[31,8,28,12,"diff"],[31,12,28,16],[31,15,28,19,"lastValue"],[31,24,28,28],[31,27,28,31,"targetValue"],[31,38,28,42],[32,8,29,12,"absoluteDiff"],[32,20,29,24],[32,23,29,27,"Math"],[32,27,29,31],[32,28,29,32,"abs"],[32,31,29,35],[32,32,29,36,"diff"],[32,36,29,40],[32,37,29,41],[33,8,30,12],[33,12,30,16,"diff"],[33,16,30,20],[33,20,30,24],[33,21,30,25],[33,25,30,29,"absoluteDiff"],[33,37,30,41],[33,40,30,44,"absoluteLastDiff"],[33,56,30,60],[33,58,30,62],[34,10,31,16,"absoluteLastDiff"],[34,26,31,32],[34,29,31,35,"absoluteDiff"],[34,41,31,47],[35,10,32,16,"result"],[35,16,32,22],[35,19,32,25,"mid"],[35,22,32,28],[36,8,33,12],[37,8,34,12],[37,12,34,16,"targetValue"],[37,23,34,27],[37,26,34,30,"lastValue"],[37,35,34,39],[37,37,34,41],[38,10,35,16,"high"],[38,14,35,20],[38,17,35,23,"mid"],[38,20,35,26],[38,23,35,29],[38,24,35,30],[39,8,36,12],[39,9,36,13],[39,15,37,17],[39,19,37,21,"targetValue"],[39,30,37,32],[39,33,37,35,"lastValue"],[39,42,37,44],[39,44,37,46],[40,10,38,16,"low"],[40,13,38,19],[40,16,38,22,"mid"],[40,19,38,25],[40,22,38,28],[40,23,38,29],[41,8,39,12],[41,9,39,13],[41,15,40,17],[42,10,41,16],[42,17,41,23,"mid"],[42,20,41,26],[43,8,42,12],[44,6,43,8],[45,6,44,8],[45,13,44,15,"result"],[45,19,44,21],[46,4,45,4],[46,5,45,5],[47,4,46,4,"BinarySearch"],[47,16,46,16],[47,17,46,17,"findClosestValueToTarget"],[47,41,46,41],[47,44,46,44],[47,54,46,54,"values"],[47,60,46,60],[47,62,46,62,"target"],[47,68,46,68],[47,70,46,70],[48,6,47,8],[48,10,47,12,"low"],[48,13,47,15],[48,16,47,18],[48,17,47,19],[49,6,48,8],[49,10,48,12,"high"],[49,14,48,16],[49,17,48,19,"values"],[49,23,48,25],[49,24,48,26,"length"],[49,30,48,32],[49,33,48,35],[49,34,48,36],[50,6,49,8],[50,10,49,12,"mid"],[50,13,49,15],[50,16,49,18,"Math"],[50,20,49,22],[50,21,49,23,"floor"],[50,26,49,28],[50,27,49,29],[50,28,49,30,"low"],[50,31,49,33],[50,34,49,36,"high"],[50,38,49,40],[50,42,49,44],[50,43,49,45],[50,44,49,46],[51,6,50,8],[51,10,50,12,"midValue"],[51,18,50,20],[51,21,50,23,"values"],[51,27,50,29],[51,28,50,30,"mid"],[51,31,50,33],[51,32,50,34],[52,6,51,8],[52,10,51,12,"lastMidValue"],[52,22,51,24],[52,25,51,27,"midValue"],[52,33,51,35],[52,36,51,38],[52,37,51,39],[53,6,52,8],[53,13,52,15,"low"],[53,16,52,18],[53,20,52,22,"high"],[53,24,52,26],[53,28,52,30,"midValue"],[53,36,52,38],[53,41,52,43,"lastMidValue"],[53,53,52,55],[53,55,52,57],[54,8,53,12],[54,12,53,16,"midValue"],[54,20,53,24],[54,25,53,29,"target"],[54,31,53,35],[54,33,53,37],[55,10,54,16],[56,8,55,12],[56,9,55,13],[56,15,56,17],[56,19,56,21,"midValue"],[56,27,56,29],[56,30,56,32,"target"],[56,36,56,38],[56,38,56,40],[57,10,57,16,"low"],[57,13,57,19],[57,16,57,22,"mid"],[57,19,57,25],[58,8,58,12],[58,9,58,13],[58,15,59,17],[58,19,59,21,"midValue"],[58,27,59,29],[58,30,59,32,"target"],[58,36,59,38],[58,38,59,40],[59,10,60,16,"high"],[59,14,60,20],[59,17,60,23,"mid"],[59,20,60,26],[60,8,61,12],[61,8,62,12,"mid"],[61,11,62,15],[61,14,62,18,"Math"],[61,18,62,22],[61,19,62,23,"floor"],[61,24,62,28],[61,25,62,29],[61,26,62,30,"low"],[61,29,62,33],[61,32,62,36,"high"],[61,36,62,40],[61,40,62,44],[61,41,62,45],[61,42,62,46],[62,8,63,12,"lastMidValue"],[62,20,63,24],[62,23,63,27,"midValue"],[62,31,63,35],[63,8,64,12,"midValue"],[63,16,64,20],[63,19,64,23,"values"],[63,25,64,29],[63,26,64,30,"mid"],[63,29,64,33],[63,30,64,34],[64,6,65,8],[65,6,66,8],[65,13,66,15],[66,8,67,12,"value"],[66,13,67,17],[66,15,67,19,"midValue"],[66,23,67,27],[67,8,68,12,"index"],[67,13,68,17],[67,15,68,19,"mid"],[68,6,69,8],[68,7,69,9],[69,4,70,4],[69,5,70,5],[70,4,71,4],[71,0,72,0],[72,0,73,0],[73,4,74,4,"BinarySearch"],[73,16,74,16],[73,17,74,17,"findValueSmallerThanTarget"],[73,43,74,43],[73,46,74,46],[73,56,74,56,"values"],[73,62,74,62],[73,64,74,64,"target"],[73,70,74,70],[73,72,74,72],[74,6,75,8],[74,10,75,12,"low"],[74,13,75,15],[74,16,75,18],[74,17,75,19],[75,6,76,8],[75,10,76,12,"high"],[75,14,76,16],[75,17,76,19,"values"],[75,23,76,25],[75,24,76,26,"length"],[75,30,76,32],[75,33,76,35],[75,34,76,36],[76,6,77,8],[76,10,77,12,"target"],[76,16,77,18],[76,20,77,22,"values"],[76,26,77,28],[76,27,77,29,"high"],[76,31,77,33],[76,32,77,34],[76,34,77,36],[77,8,78,12],[77,15,78,19],[78,10,79,16,"value"],[78,15,79,21],[78,17,79,23,"values"],[78,23,79,29],[78,24,79,30,"high"],[78,28,79,34],[78,29,79,35],[79,10,80,16,"index"],[79,15,80,21],[79,17,80,23,"high"],[80,8,81,12],[80,9,81,13],[81,6,82,8],[81,7,82,9],[81,13,83,13],[81,17,83,17,"target"],[81,23,83,23],[81,26,83,26,"values"],[81,32,83,32],[81,33,83,33,"low"],[81,36,83,36],[81,37,83,37],[81,39,83,39],[82,8,84,12],[82,15,84,19,"undefined"],[82,24,84,28],[83,6,85,8],[84,6,86,8],[84,10,86,12,"midValueAndIndex"],[84,26,86,28],[84,29,86,31],[84,33,86,35],[84,34,86,36,"findClosestValueToTarget"],[84,58,86,60],[84,59,86,61,"values"],[84,65,86,67],[84,67,86,69,"target"],[84,73,86,75],[84,74,86,76],[85,6,87,8],[85,10,87,12,"midValue"],[85,18,87,20],[85,21,87,23,"midValueAndIndex"],[85,37,87,39],[85,38,87,40,"value"],[85,43,87,45],[86,6,88,8],[86,10,88,12,"mid"],[86,13,88,15],[86,16,88,18,"midValueAndIndex"],[86,32,88,34],[86,33,88,35,"index"],[86,38,88,40],[87,6,89,8],[87,10,89,12,"midValue"],[87,18,89,20],[87,22,89,24,"target"],[87,28,89,30],[87,30,89,32],[88,8,90,12],[88,15,90,19],[89,10,91,16,"value"],[89,15,91,21],[89,17,91,23,"midValue"],[89,25,91,31],[90,10,92,16,"index"],[90,15,92,21],[90,17,92,23,"mid"],[91,8,93,12],[91,9,93,13],[92,6,94,8],[92,7,94,9],[92,13,95,13],[93,8,96,12],[93,15,96,19],[94,10,97,16,"value"],[94,15,97,21],[94,17,97,23,"values"],[94,23,97,29],[94,24,97,30,"mid"],[94,27,97,33],[94,30,97,36],[94,31,97,37],[94,32,97,38],[95,10,98,16,"index"],[95,15,98,21],[95,17,98,23,"mid"],[95,20,98,26],[95,23,98,29],[96,8,99,12],[96,9,99,13],[97,6,100,8],[98,4,101,4],[98,5,101,5],[99,4,102,4],[100,0,103,0],[101,0,104,0],[102,4,105,4,"BinarySearch"],[102,16,105,16],[102,17,105,17,"findValueLargerThanTarget"],[102,42,105,42],[102,45,105,45],[102,55,105,55,"values"],[102,61,105,61],[102,63,105,63,"target"],[102,69,105,69],[102,71,105,71],[103,6,106,8],[103,10,106,12,"low"],[103,13,106,15],[103,16,106,18],[103,17,106,19],[104,6,107,8],[104,10,107,12,"high"],[104,14,107,16],[104,17,107,19,"values"],[104,23,107,25],[104,24,107,26,"length"],[104,30,107,32],[104,33,107,35],[104,34,107,36],[105,6,108,8],[105,10,108,12,"target"],[105,16,108,18],[105,19,108,21,"values"],[105,25,108,27],[105,26,108,28,"low"],[105,29,108,31],[105,30,108,32],[105,32,108,34],[106,8,109,12],[106,15,109,19],[107,10,110,16,"value"],[107,15,110,21],[107,17,110,23,"values"],[107,23,110,29],[107,24,110,30,"low"],[107,27,110,33],[107,28,110,34],[108,10,111,16,"index"],[108,15,111,21],[108,17,111,23,"low"],[109,8,112,12],[109,9,112,13],[110,6,113,8],[110,7,113,9],[110,13,114,13],[110,17,114,17,"target"],[110,23,114,23],[110,26,114,26,"values"],[110,32,114,32],[110,33,114,33,"high"],[110,37,114,37],[110,38,114,38],[110,40,114,40],[111,8,115,12],[111,15,115,19,"undefined"],[111,24,115,28],[112,6,116,8],[113,6,117,8],[113,10,117,12,"midValueAndIndex"],[113,26,117,28],[113,29,117,31],[113,33,117,35],[113,34,117,36,"findClosestValueToTarget"],[113,58,117,60],[113,59,117,61,"values"],[113,65,117,67],[113,67,117,69,"target"],[113,73,117,75],[113,74,117,76],[114,6,118,8],[114,10,118,12,"midValue"],[114,18,118,20],[114,21,118,23,"midValueAndIndex"],[114,37,118,39],[114,38,118,40,"value"],[114,43,118,45],[115,6,119,8],[115,10,119,12,"mid"],[115,13,119,15],[115,16,119,18,"midValueAndIndex"],[115,32,119,34],[115,33,119,35,"index"],[115,38,119,40],[116,6,120,8],[116,10,120,12,"midValue"],[116,18,120,20],[116,22,120,24,"target"],[116,28,120,30],[116,30,120,32],[117,8,121,12],[117,15,121,19],[118,10,122,16,"value"],[118,15,122,21],[118,17,122,23,"midValue"],[118,25,122,31],[119,10,123,16,"index"],[119,15,123,21],[119,17,123,23,"mid"],[120,8,124,12],[120,9,124,13],[121,6,125,8],[121,7,125,9],[121,13,126,13],[122,8,127,12],[122,15,127,19],[123,10,128,16,"value"],[123,15,128,21],[123,17,128,23,"values"],[123,23,128,29],[123,24,128,30,"mid"],[123,27,128,33],[123,30,128,36],[123,31,128,37],[123,32,128,38],[124,10,129,16,"index"],[124,15,129,21],[124,17,129,23,"mid"],[124,20,129,26],[124,23,129,29],[125,8,130,12],[125,9,130,13],[126,6,131,8],[127,4,132,4],[127,5,132,5],[128,4,133,4,"BinarySearch"],[128,16,133,16],[128,17,133,17,"findIndexOf"],[128,28,133,28],[128,31,133,31],[128,41,133,41,"array"],[128,46,133,46],[128,48,133,48,"value"],[128,53,133,53],[128,55,133,55],[129,6,134,8],[129,10,134,12,"j"],[129,11,134,13],[129,14,134,16],[129,15,134,17],[130,6,135,8],[130,10,135,12,"length"],[130,16,135,18],[130,19,135,21,"array"],[130,24,135,26],[130,25,135,27,"length"],[130,31,135,33],[131,6,136,8],[131,10,136,12,"i"],[131,11,136,13],[131,14,136,16],[131,15,136,17],[132,6,137,8],[132,13,137,15,"j"],[132,14,137,16],[132,17,137,19,"length"],[132,23,137,25],[132,25,137,27],[133,8,138,12,"i"],[133,9,138,13],[133,12,138,16,"length"],[133,18,138,22],[133,21,138,25,"j"],[133,22,138,26],[133,25,138,29],[133,26,138,30],[133,30,138,34],[133,31,138,35],[134,8,139,12],[134,12,139,16,"value"],[134,17,139,21],[134,20,139,24,"array"],[134,25,139,29],[134,26,139,30,"i"],[134,27,139,31],[134,28,139,32],[134,30,139,34],[135,10,140,16,"j"],[135,11,140,17],[135,14,140,20,"i"],[135,15,140,21],[135,18,140,24],[135,19,140,25],[136,8,141,12],[136,9,141,13],[136,15,142,17],[136,19,142,21,"value"],[136,24,142,26],[136,27,142,29,"array"],[136,32,142,34],[136,33,142,35,"i"],[136,34,142,36],[136,35,142,37],[136,37,142,39],[137,10,143,16,"length"],[137,16,143,22],[137,19,143,25,"i"],[137,20,143,26],[138,8,144,12],[138,9,144,13],[138,15,145,17],[139,10,146,16],[139,17,146,23,"i"],[139,18,146,24],[140,8,147,12],[141,6,148,8],[142,6,149,8],[142,13,149,15],[142,14,149,16],[142,15,149,17],[143,4,150,4],[143,5,150,5],[144,4,151,4],[144,11,151,11,"BinarySearch"],[144,23,151,23],[145,2,152,0],[145,3,152,1],[145,4,152,2],[145,5,152,4],[146,2,153,0,"exports"],[146,9,153,7],[146,10,153,8,"default"],[146,17,153,15],[146,20,153,18,"BinarySearch"],[146,32,153,30],[147,0,153,31],[147,3]],"functionMap":{"names":["<global>","<anonymous>","BinarySearch","findClosestHigherValueIndex","findClosestValueToTarget","findValueSmallerThanTarget","findValueLargerThanTarget","findIndexOf"],"mappings":"AAA;kCCG;ICC;KDC;+CEC;KFsC;4CGC;KHwB;8CII;KJ2B;6CKI;KL2B;+BMC;KNiB;CDE"}},"type":"js/module"}]}