{"dependencies":[{"name":"./_baseIsEqualDeep","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":22,"index":22},"end":{"line":1,"column":51,"index":51}}],"key":"qFlD7B8+YukFepOWfKPvwI5BL9c=","exportNames":["*"]}},{"name":"./isObjectLike","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":19,"index":72},"end":{"line":2,"column":44,"index":97}}],"key":"1NdtdOrWPuTg4tR1dSlu9rp7Iig=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var baseIsEqualDeep = require(_dependencyMap[0], \"./_baseIsEqualDeep\"),\n    isObjectLike = require(_dependencyMap[1], \"./isObjectLike\");\n\n  /**\n   * The base implementation of `_.isEqual` which supports partial comparisons\n   * and tracks traversed objects.\n   *\n   * @private\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @param {boolean} bitmask The bitmask flags.\n   *  1 - Unordered comparison\n   *  2 - Partial comparison\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   */\n  function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n      return true;\n    }\n    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n      return value !== value && other !== other;\n    }\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n  }\n  module.exports = baseIsEqual;\n});","lineCount":29,"map":[[2,2,1,0],[2,6,1,4,"baseIsEqualDeep"],[2,21,1,19],[2,24,1,22,"require"],[2,31,1,29],[2,32,1,29,"_dependencyMap"],[2,46,1,29],[2,71,1,50],[2,72,1,51],[3,4,2,4,"isObjectLike"],[3,16,2,16],[3,19,2,19,"require"],[3,26,2,26],[3,27,2,26,"_dependencyMap"],[3,41,2,26],[3,62,2,43],[3,63,2,44],[5,2,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,2,18,0],[19,11,18,9,"baseIsEqual"],[19,22,18,20,"baseIsEqual"],[19,23,18,21,"value"],[19,28,18,26],[19,30,18,28,"other"],[19,35,18,33],[19,37,18,35,"bitmask"],[19,44,18,42],[19,46,18,44,"customizer"],[19,56,18,54],[19,58,18,56,"stack"],[19,63,18,61],[19,65,18,63],[20,4,19,2],[20,8,19,6,"value"],[20,13,19,11],[20,18,19,16,"other"],[20,23,19,21],[20,25,19,23],[21,6,20,4],[21,13,20,11],[21,17,20,15],[22,4,21,2],[23,4,22,2],[23,8,22,6,"value"],[23,13,22,11],[23,17,22,15],[23,21,22,19],[23,25,22,23,"other"],[23,30,22,28],[23,34,22,32],[23,38,22,36],[23,42,22,41],[23,43,22,42,"isObjectLike"],[23,55,22,54],[23,56,22,55,"value"],[23,61,22,60],[23,62,22,61],[23,66,22,65],[23,67,22,66,"isObjectLike"],[23,79,22,78],[23,80,22,79,"other"],[23,85,22,84],[23,86,22,86],[23,88,22,88],[24,6,23,4],[24,13,23,11,"value"],[24,18,23,16],[24,23,23,21,"value"],[24,28,23,26],[24,32,23,30,"other"],[24,37,23,35],[24,42,23,40,"other"],[24,47,23,45],[25,4,24,2],[26,4,25,2],[26,11,25,9,"baseIsEqualDeep"],[26,26,25,24],[26,27,25,25,"value"],[26,32,25,30],[26,34,25,32,"other"],[26,39,25,37],[26,41,25,39,"bitmask"],[26,48,25,46],[26,50,25,48,"customizer"],[26,60,25,58],[26,62,25,60,"baseIsEqual"],[26,73,25,71],[26,75,25,73,"stack"],[26,80,25,78],[26,81,25,79],[27,2,26,0],[28,2,28,0,"module"],[28,8,28,6],[28,9,28,7,"exports"],[28,16,28,14],[28,19,28,17,"baseIsEqual"],[28,30,28,28],[29,0,28,29],[29,3]],"functionMap":{"names":["<global>","baseIsEqual"],"mappings":"AAA;ACiB;CDQ"}},"type":"js/module"}]}