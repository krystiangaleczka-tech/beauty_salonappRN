{"dependencies":[{"name":"./isArrayLike","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":18,"index":18},"end":{"line":1,"column":42,"index":42}}],"key":"uFBhDXuXNSDFu0t5DF80nwq22rc=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var isArrayLike = require(_dependencyMap[0], \"./isArrayLike\");\n\n  /**\n   * Creates a `baseEach` or `baseEachRight` function.\n   *\n   * @private\n   * @param {Function} eachFunc The function to iterate over a collection.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n  function createBaseEach(eachFunc, fromRight) {\n    return function (collection, iteratee) {\n      if (collection == null) {\n        return collection;\n      }\n      if (!isArrayLike(collection)) {\n        return eachFunc(collection, iteratee);\n      }\n      var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n      while (fromRight ? index-- : ++index < length) {\n        if (iteratee(iterable[index], index, iterable) === false) {\n          break;\n        }\n      }\n      return collection;\n    };\n  }\n  module.exports = createBaseEach;\n});","lineCount":32,"map":[[2,2,1,0],[2,6,1,4,"isArrayLike"],[2,17,1,15],[2,20,1,18,"require"],[2,27,1,25],[2,28,1,25,"_dependencyMap"],[2,42,1,25],[2,62,1,41],[2,63,1,42],[4,2,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,2,11,0],[12,11,11,9,"createBaseEach"],[12,25,11,23,"createBaseEach"],[12,26,11,24,"eachFunc"],[12,34,11,32],[12,36,11,34,"fromRight"],[12,45,11,43],[12,47,11,45],[13,4,12,2],[13,11,12,9],[13,21,12,18,"collection"],[13,31,12,28],[13,33,12,30,"iteratee"],[13,41,12,38],[13,43,12,40],[14,6,13,4],[14,10,13,8,"collection"],[14,20,13,18],[14,24,13,22],[14,28,13,26],[14,30,13,28],[15,8,14,6],[15,15,14,13,"collection"],[15,25,14,23],[16,6,15,4],[17,6,16,4],[17,10,16,8],[17,11,16,9,"isArrayLike"],[17,22,16,20],[17,23,16,21,"collection"],[17,33,16,31],[17,34,16,32],[17,36,16,34],[18,8,17,6],[18,15,17,13,"eachFunc"],[18,23,17,21],[18,24,17,22,"collection"],[18,34,17,32],[18,36,17,34,"iteratee"],[18,44,17,42],[18,45,17,43],[19,6,18,4],[20,6,19,4],[20,10,19,8,"length"],[20,16,19,14],[20,19,19,17,"collection"],[20,29,19,27],[20,30,19,28,"length"],[20,36,19,34],[21,8,20,8,"index"],[21,13,20,13],[21,16,20,16,"fromRight"],[21,25,20,25],[21,28,20,28,"length"],[21,34,20,34],[21,37,20,37],[21,38,20,38],[21,39,20,39],[22,8,21,8,"iterable"],[22,16,21,16],[22,19,21,19,"Object"],[22,25,21,25],[22,26,21,26,"collection"],[22,36,21,36],[22,37,21,37],[23,6,23,4],[23,13,23,12,"fromRight"],[23,22,23,21],[23,25,23,24,"index"],[23,30,23,29],[23,32,23,31],[23,35,23,34],[23,37,23,36,"index"],[23,42,23,41],[23,45,23,44,"length"],[23,51,23,50],[23,53,23,53],[24,8,24,6],[24,12,24,10,"iteratee"],[24,20,24,18],[24,21,24,19,"iterable"],[24,29,24,27],[24,30,24,28,"index"],[24,35,24,33],[24,36,24,34],[24,38,24,36,"index"],[24,43,24,41],[24,45,24,43,"iterable"],[24,53,24,51],[24,54,24,52],[24,59,24,57],[24,64,24,62],[24,66,24,64],[25,10,25,8],[26,8,26,6],[27,6,27,4],[28,6,28,4],[28,13,28,11,"collection"],[28,23,28,21],[29,4,29,2],[29,5,29,3],[30,2,30,0],[31,2,32,0,"module"],[31,8,32,6],[31,9,32,7,"exports"],[31,16,32,14],[31,19,32,17,"createBaseEach"],[31,33,32,31],[32,0,32,32],[32,3]],"functionMap":{"names":["<global>","createBaseEach","<anonymous>"],"mappings":"AAA;ACU;SCC;GDiB;CDC"},"hasCjsExports":true},"type":"js/module"}]}