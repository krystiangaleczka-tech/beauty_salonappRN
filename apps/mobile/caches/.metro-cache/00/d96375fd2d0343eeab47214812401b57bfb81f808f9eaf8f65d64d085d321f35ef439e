{"dependencies":[{"name":"style-value-types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":39,"index":39}}],"key":"amhWSRCUxLBa3Njmww3P7iM/NQE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"correctBorderRadius\", {\n    enumerable: true,\n    get: function () {\n      return correctBorderRadius;\n    }\n  });\n  Object.defineProperty(exports, \"pixelsToPercent\", {\n    enumerable: true,\n    get: function () {\n      return pixelsToPercent;\n    }\n  });\n  var _styleValueTypes = require(_dependencyMap[0], \"style-value-types\");\n  function pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min) return 0;\n    return pixels / (axis.max - axis.min) * 100;\n  }\n  /**\n   * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n   * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n   * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n   * borderRadius in both states. If we animate between the two in pixels that will trigger\n   * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n   */\n  var correctBorderRadius = {\n    correct: function (latest, node) {\n      if (!node.target) return latest;\n      /**\n       * If latest is a string, if it's a percentage we can return immediately as it's\n       * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n       */\n      if (typeof latest === \"string\") {\n        if (_styleValueTypes.px.test(latest)) {\n          latest = parseFloat(latest);\n        } else {\n          return latest;\n        }\n      }\n      /**\n       * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n       * pixel value as a percentage of each axis\n       */\n      var x = pixelsToPercent(latest, node.target.x);\n      var y = pixelsToPercent(latest, node.target.y);\n      return \"\".concat(x, \"% \").concat(y, \"%\");\n    }\n  };\n});","lineCount":54,"map":[[7,2,41,0,"Object"],[7,8,41,0],[7,9,41,0,"defineProperty"],[7,23,41,0],[7,24,41,0,"exports"],[7,31,41,0],[8,4,41,0,"enumerable"],[8,14,41,0],[9,4,41,0,"get"],[9,7,41,0],[9,18,41,0,"get"],[9,19,41,0],[10,6,41,0],[10,13,41,9,"correctBorderRadius"],[10,32,41,28],[11,4,41,28],[12,2,41,28],[13,2,41,0,"Object"],[13,8,41,0],[13,9,41,0,"defineProperty"],[13,23,41,0],[13,24,41,0,"exports"],[13,31,41,0],[14,4,41,0,"enumerable"],[14,14,41,0],[15,4,41,0,"get"],[15,7,41,0],[15,18,41,0,"get"],[15,19,41,0],[16,6,41,0],[16,13,41,30,"pixelsToPercent"],[16,28,41,45],[17,4,41,45],[18,2,41,45],[19,2,1,0],[19,6,1,0,"_styleValueTypes"],[19,22,1,0],[19,25,1,0,"require"],[19,32,1,0],[19,33,1,0,"_dependencyMap"],[19,47,1,0],[20,2,3,0],[20,11,3,9,"pixelsToPercent"],[20,26,3,24,"pixelsToPercent"],[20,27,3,25,"pixels"],[20,33,3,31],[20,35,3,33,"axis"],[20,39,3,37],[20,41,3,39],[21,4,4,4],[21,8,4,8,"axis"],[21,12,4,12],[21,13,4,13,"max"],[21,16,4,16],[21,21,4,21,"axis"],[21,25,4,25],[21,26,4,26,"min"],[21,29,4,29],[21,31,5,8],[21,38,5,15],[21,39,5,16],[22,4,6,4],[22,11,6,12,"pixels"],[22,17,6,18],[22,21,6,22,"axis"],[22,25,6,26],[22,26,6,27,"max"],[22,29,6,30],[22,32,6,33,"axis"],[22,36,6,37],[22,37,6,38,"min"],[22,40,6,41],[22,41,6,42],[22,44,6,46],[22,47,6,49],[23,2,7,0],[24,2,8,0],[25,0,9,0],[26,0,10,0],[27,0,11,0],[28,0,12,0],[29,0,13,0],[30,0,14,0],[31,2,15,0],[31,6,15,4,"correctBorderRadius"],[31,25,15,23],[31,28,15,26],[32,4,16,4,"correct"],[32,11,16,11],[32,13,16,13],[32,22,16,13,"correct"],[32,23,16,23,"latest"],[32,29,16,29],[32,31,16,31,"node"],[32,35,16,35],[32,37,16,37],[33,6,17,8],[33,10,17,12],[33,11,17,13,"node"],[33,15,17,17],[33,16,17,18,"target"],[33,22,17,24],[33,24,18,12],[33,31,18,19,"latest"],[33,37,18,25],[34,6,19,8],[35,0,20,0],[36,0,21,0],[37,0,22,0],[38,6,23,8],[38,10,23,12],[38,17,23,19,"latest"],[38,23,23,25],[38,28,23,30],[38,36,23,38],[38,38,23,40],[39,8,24,12],[39,12,24,16,"px"],[39,28,24,18],[39,29,24,18,"px"],[39,31,24,18],[39,32,24,19,"test"],[39,36,24,23],[39,37,24,24,"latest"],[39,43,24,30],[39,44,24,31],[39,46,24,33],[40,10,25,16,"latest"],[40,16,25,22],[40,19,25,25,"parseFloat"],[40,29,25,35],[40,30,25,36,"latest"],[40,36,25,42],[40,37,25,43],[41,8,26,12],[41,9,26,13],[41,15,27,17],[42,10,28,16],[42,17,28,23,"latest"],[42,23,28,29],[43,8,29,12],[44,6,30,8],[45,6,31,8],[46,0,32,0],[47,0,33,0],[48,0,34,0],[49,6,35,8],[49,10,35,12,"x"],[49,11,35,13],[49,14,35,16,"pixelsToPercent"],[49,29,35,31],[49,30,35,32,"latest"],[49,36,35,38],[49,38,35,40,"node"],[49,42,35,44],[49,43,35,45,"target"],[49,49,35,51],[49,50,35,52,"x"],[49,51,35,53],[49,52,35,54],[50,6,36,8],[50,10,36,12,"y"],[50,11,36,13],[50,14,36,16,"pixelsToPercent"],[50,29,36,31],[50,30,36,32,"latest"],[50,36,36,38],[50,38,36,40,"node"],[50,42,36,44],[50,43,36,45,"target"],[50,49,36,51],[50,50,36,52,"y"],[50,51,36,53],[50,52,36,54],[51,6,37,8],[51,13,37,15],[51,15,37,17],[51,16,37,18,"concat"],[51,22,37,24],[51,23,37,25,"x"],[51,24,37,26],[51,26,37,28],[51,30,37,32],[51,31,37,33],[51,32,37,34,"concat"],[51,38,37,40],[51,39,37,41,"y"],[51,40,37,42],[51,42,37,44],[51,45,37,47],[51,46,37,48],[52,4,38,4],[53,2,39,0],[53,3,39,1],[54,0,39,2],[54,3]],"functionMap":{"names":["<global>","pixelsToPercent","correctBorderRadius.correct"],"mappings":"AAA;ACE;CDI;aES;KFsB"},"hasCjsExports":false},"type":"js/module"}]}