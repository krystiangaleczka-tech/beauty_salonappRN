{"dependencies":[{"name":"./_getAllKeys","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":17,"index":17},"end":{"line":1,"column":41,"index":41}}],"key":"YclFZMWBQqRr4eX7gTxIDQl66s4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var getAllKeys = require(_dependencyMap[0], \"./_getAllKeys\");\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1;\n\n  /** Used for built-in method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for objects with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n    if (objLength != othLength && !isPartial) {\n      return false;\n    }\n    var index = objLength;\n    while (index--) {\n      var key = objProps[index];\n      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n        return false;\n      }\n    }\n    // Check that cyclic values are equal.\n    var objStacked = stack.get(object);\n    var othStacked = stack.get(other);\n    if (objStacked && othStacked) {\n      return objStacked == other && othStacked == object;\n    }\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n    var skipCtor = isPartial;\n    while (++index < objLength) {\n      key = objProps[index];\n      var objValue = object[key],\n        othValue = other[key];\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n      }\n      // Recursively compare objects (susceptible to call stack limits).\n      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n        result = false;\n        break;\n      }\n      skipCtor || (skipCtor = key == 'constructor');\n    }\n    if (result && !skipCtor) {\n      var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n      // Non `Object` object instances with different constructors are not equal.\n      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n        result = false;\n      }\n    }\n    stack['delete'](object);\n    stack['delete'](other);\n    return result;\n  }\n  module.exports = equalObjects;\n});","lineCount":80,"map":[[2,2,1,0],[2,6,1,4,"getAllKeys"],[2,16,1,14],[2,19,1,17,"require"],[2,26,1,24],[2,27,1,24,"_dependencyMap"],[2,41,1,24],[2,61,1,40],[2,62,1,41],[4,2,3,0],[5,2,4,0],[5,6,4,4,"COMPARE_PARTIAL_FLAG"],[5,26,4,24],[5,29,4,27],[5,30,4,28],[7,2,6,0],[8,2,7,0],[8,6,7,4,"objectProto"],[8,17,7,15],[8,20,7,18,"Object"],[8,26,7,24],[8,27,7,25,"prototype"],[8,36,7,34],[10,2,9,0],[11,2,10,0],[11,6,10,4,"hasOwnProperty"],[11,20,10,18],[11,23,10,21,"objectProto"],[11,34,10,32],[11,35,10,33,"hasOwnProperty"],[11,49,10,47],[13,2,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,2,25,0],[26,11,25,9,"equalObjects"],[26,23,25,21,"equalObjects"],[26,24,25,22,"object"],[26,30,25,28],[26,32,25,30,"other"],[26,37,25,35],[26,39,25,37,"bitmask"],[26,46,25,44],[26,48,25,46,"customizer"],[26,58,25,56],[26,60,25,58,"equalFunc"],[26,69,25,67],[26,71,25,69,"stack"],[26,76,25,74],[26,78,25,76],[27,4,26,2],[27,8,26,6,"isPartial"],[27,17,26,15],[27,20,26,18,"bitmask"],[27,27,26,25],[27,30,26,28,"COMPARE_PARTIAL_FLAG"],[27,50,26,48],[28,6,27,6,"objProps"],[28,14,27,14],[28,17,27,17,"getAllKeys"],[28,27,27,27],[28,28,27,28,"object"],[28,34,27,34],[28,35,27,35],[29,6,28,6,"objLength"],[29,15,28,15],[29,18,28,18,"objProps"],[29,26,28,26],[29,27,28,27,"length"],[29,33,28,33],[30,6,29,6,"othProps"],[30,14,29,14],[30,17,29,17,"getAllKeys"],[30,27,29,27],[30,28,29,28,"other"],[30,33,29,33],[30,34,29,34],[31,6,30,6,"othLength"],[31,15,30,15],[31,18,30,18,"othProps"],[31,26,30,26],[31,27,30,27,"length"],[31,33,30,33],[32,4,32,2],[32,8,32,6,"objLength"],[32,17,32,15],[32,21,32,19,"othLength"],[32,30,32,28],[32,34,32,32],[32,35,32,33,"isPartial"],[32,44,32,42],[32,46,32,44],[33,6,33,4],[33,13,33,11],[33,18,33,16],[34,4,34,2],[35,4,35,2],[35,8,35,6,"index"],[35,13,35,11],[35,16,35,14,"objLength"],[35,25,35,23],[36,4,36,2],[36,11,36,9,"index"],[36,16,36,14],[36,18,36,16],[36,20,36,18],[37,6,37,4],[37,10,37,8,"key"],[37,13,37,11],[37,16,37,14,"objProps"],[37,24,37,22],[37,25,37,23,"index"],[37,30,37,28],[37,31,37,29],[38,6,38,4],[38,10,38,8],[38,12,38,10,"isPartial"],[38,21,38,19],[38,24,38,22,"key"],[38,27,38,25],[38,31,38,29,"other"],[38,36,38,34],[38,39,38,37,"hasOwnProperty"],[38,53,38,51],[38,54,38,52,"call"],[38,58,38,56],[38,59,38,57,"other"],[38,64,38,62],[38,66,38,64,"key"],[38,69,38,67],[38,70,38,68],[38,71,38,69],[38,73,38,71],[39,8,39,6],[39,15,39,13],[39,20,39,18],[40,6,40,4],[41,4,41,2],[42,4,42,2],[43,4,43,2],[43,8,43,6,"objStacked"],[43,18,43,16],[43,21,43,19,"stack"],[43,26,43,24],[43,27,43,25,"get"],[43,30,43,28],[43,31,43,29,"object"],[43,37,43,35],[43,38,43,36],[44,4,44,2],[44,8,44,6,"othStacked"],[44,18,44,16],[44,21,44,19,"stack"],[44,26,44,24],[44,27,44,25,"get"],[44,30,44,28],[44,31,44,29,"other"],[44,36,44,34],[44,37,44,35],[45,4,45,2],[45,8,45,6,"objStacked"],[45,18,45,16],[45,22,45,20,"othStacked"],[45,32,45,30],[45,34,45,32],[46,6,46,4],[46,13,46,11,"objStacked"],[46,23,46,21],[46,27,46,25,"other"],[46,32,46,30],[46,36,46,34,"othStacked"],[46,46,46,44],[46,50,46,48,"object"],[46,56,46,54],[47,4,47,2],[48,4,48,2],[48,8,48,6,"result"],[48,14,48,12],[48,17,48,15],[48,21,48,19],[49,4,49,2,"stack"],[49,9,49,7],[49,10,49,8,"set"],[49,13,49,11],[49,14,49,12,"object"],[49,20,49,18],[49,22,49,20,"other"],[49,27,49,25],[49,28,49,26],[50,4,50,2,"stack"],[50,9,50,7],[50,10,50,8,"set"],[50,13,50,11],[50,14,50,12,"other"],[50,19,50,17],[50,21,50,19,"object"],[50,27,50,25],[50,28,50,26],[51,4,52,2],[51,8,52,6,"skipCtor"],[51,16,52,14],[51,19,52,17,"isPartial"],[51,28,52,26],[52,4,53,2],[52,11,53,9],[52,13,53,11,"index"],[52,18,53,16],[52,21,53,19,"objLength"],[52,30,53,28],[52,32,53,30],[53,6,54,4,"key"],[53,9,54,7],[53,12,54,10,"objProps"],[53,20,54,18],[53,21,54,19,"index"],[53,26,54,24],[53,27,54,25],[54,6,55,4],[54,10,55,8,"objValue"],[54,18,55,16],[54,21,55,19,"object"],[54,27,55,25],[54,28,55,26,"key"],[54,31,55,29],[54,32,55,30],[55,8,56,8,"othValue"],[55,16,56,16],[55,19,56,19,"other"],[55,24,56,24],[55,25,56,25,"key"],[55,28,56,28],[55,29,56,29],[56,6,58,4],[56,10,58,8,"customizer"],[56,20,58,18],[56,22,58,20],[57,8,59,6],[57,12,59,10,"compared"],[57,20,59,18],[57,23,59,21,"isPartial"],[57,32,59,30],[57,35,60,10,"customizer"],[57,45,60,20],[57,46,60,21,"othValue"],[57,54,60,29],[57,56,60,31,"objValue"],[57,64,60,39],[57,66,60,41,"key"],[57,69,60,44],[57,71,60,46,"other"],[57,76,60,51],[57,78,60,53,"object"],[57,84,60,59],[57,86,60,61,"stack"],[57,91,60,66],[57,92,60,67],[57,95,61,10,"customizer"],[57,105,61,20],[57,106,61,21,"objValue"],[57,114,61,29],[57,116,61,31,"othValue"],[57,124,61,39],[57,126,61,41,"key"],[57,129,61,44],[57,131,61,46,"object"],[57,137,61,52],[57,139,61,54,"other"],[57,144,61,59],[57,146,61,61,"stack"],[57,151,61,66],[57,152,61,67],[58,6,62,4],[59,6,63,4],[60,6,64,4],[60,10,64,8],[60,12,64,10,"compared"],[60,20,64,18],[60,25,64,23,"undefined"],[60,34,64,32],[60,37,65,13,"objValue"],[60,45,65,21],[60,50,65,26,"othValue"],[60,58,65,34],[60,62,65,38,"equalFunc"],[60,71,65,47],[60,72,65,48,"objValue"],[60,80,65,56],[60,82,65,58,"othValue"],[60,90,65,66],[60,92,65,68,"bitmask"],[60,99,65,75],[60,101,65,77,"customizer"],[60,111,65,87],[60,113,65,89,"stack"],[60,118,65,94],[60,119,65,95],[60,122,66,12,"compared"],[60,130,66,20],[60,131,67,9],[60,133,67,11],[61,8,68,6,"result"],[61,14,68,12],[61,17,68,15],[61,22,68,20],[62,8,69,6],[63,6,70,4],[64,6,71,4,"skipCtor"],[64,14,71,12],[64,19,71,17,"skipCtor"],[64,27,71,25],[64,30,71,28,"key"],[64,33,71,31],[64,37,71,35],[64,50,71,48],[64,51,71,49],[65,4,72,2],[66,4,73,2],[66,8,73,6,"result"],[66,14,73,12],[66,18,73,16],[66,19,73,17,"skipCtor"],[66,27,73,25],[66,29,73,27],[67,6,74,4],[67,10,74,8,"objCtor"],[67,17,74,15],[67,20,74,18,"object"],[67,26,74,24],[67,27,74,25,"constructor"],[67,38,74,36],[68,8,75,8,"othCtor"],[68,15,75,15],[68,18,75,18,"other"],[68,23,75,23],[68,24,75,24,"constructor"],[68,35,75,35],[70,6,77,4],[71,6,78,4],[71,10,78,8,"objCtor"],[71,17,78,15],[71,21,78,19,"othCtor"],[71,28,78,26],[71,32,79,9],[71,45,79,22],[71,49,79,26,"object"],[71,55,79,32],[71,59,79,36],[71,72,79,49],[71,76,79,53,"other"],[71,81,79,59],[71,85,80,8],[71,87,80,10],[71,94,80,17,"objCtor"],[71,101,80,24],[71,105,80,28],[71,115,80,38],[71,119,80,42,"objCtor"],[71,126,80,49],[71,138,80,61,"objCtor"],[71,145,80,68],[71,149,81,10],[71,156,81,17,"othCtor"],[71,163,81,24],[71,167,81,28],[71,177,81,38],[71,181,81,42,"othCtor"],[71,188,81,49],[71,200,81,61,"othCtor"],[71,207,81,68],[71,208,81,69],[71,210,81,71],[72,8,82,6,"result"],[72,14,82,12],[72,17,82,15],[72,22,82,20],[73,6,83,4],[74,4,84,2],[75,4,85,2,"stack"],[75,9,85,7],[75,10,85,8],[75,18,85,16],[75,19,85,17],[75,20,85,18,"object"],[75,26,85,24],[75,27,85,25],[76,4,86,2,"stack"],[76,9,86,7],[76,10,86,8],[76,18,86,16],[76,19,86,17],[76,20,86,18,"other"],[76,25,86,23],[76,26,86,24],[77,4,87,2],[77,11,87,9,"result"],[77,17,87,15],[78,2,88,0],[79,2,90,0,"module"],[79,8,90,6],[79,9,90,7,"exports"],[79,16,90,14],[79,19,90,17,"equalObjects"],[79,31,90,29],[80,0,90,30],[80,3]],"functionMap":{"names":["<global>","equalObjects"],"mappings":"AAA;ACwB;CD+D"},"hasCjsExports":true},"type":"js/module"}]}