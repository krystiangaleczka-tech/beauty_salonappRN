{"dependencies":[{"name":"./_baseTrim","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":15,"index":15},"end":{"line":1,"column":37,"index":37}}],"key":"li6EA7UhY1TmSDeO2LrV5v9efY4=","exportNames":["*"]}},{"name":"./isObject","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":15,"index":54},"end":{"line":2,"column":36,"index":75}}],"key":"ULGe22t1tNTY+9UXe96RIr0REUU=","exportNames":["*"]}},{"name":"./isSymbol","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":15,"index":92},"end":{"line":3,"column":36,"index":113}}],"key":"6Wkf7dHKQf1c2b4lNT0/hc4L5ck=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var baseTrim = require(_dependencyMap[0], \"./_baseTrim\"),\n    isObject = require(_dependencyMap[1], \"./isObject\"),\n    isSymbol = require(_dependencyMap[2], \"./isSymbol\");\n\n  /** Used as references for various `Number` constants. */\n  var NAN = 0 / 0;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseInt = parseInt;\n\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n  function toNumber(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n    if (isSymbol(value)) {\n      return NAN;\n    }\n    if (isObject(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = isObject(other) ? other + '' : other;\n    }\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n    value = baseTrim(value);\n    var isBinary = reIsBinary.test(value);\n    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n  }\n  module.exports = toNumber;\n});","lineCount":63,"map":[[2,2,1,0],[2,6,1,4,"baseTrim"],[2,14,1,12],[2,17,1,15,"require"],[2,24,1,22],[2,25,1,22,"_dependencyMap"],[2,39,1,22],[2,57,1,36],[2,58,1,37],[3,4,2,4,"isObject"],[3,12,2,12],[3,15,2,15,"require"],[3,22,2,22],[3,23,2,22,"_dependencyMap"],[3,37,2,22],[3,54,2,35],[3,55,2,36],[4,4,3,4,"isSymbol"],[4,12,3,12],[4,15,3,15,"require"],[4,22,3,22],[4,23,3,22,"_dependencyMap"],[4,37,3,22],[4,54,3,35],[4,55,3,36],[6,2,5,0],[7,2,6,0],[7,6,6,4,"NAN"],[7,9,6,7],[7,12,6,10],[7,13,6,11],[7,16,6,14],[7,17,6,15],[9,2,8,0],[10,2,9,0],[10,6,9,4,"reIsBadHex"],[10,16,9,14],[10,19,9,17],[10,39,9,37],[12,2,11,0],[13,2,12,0],[13,6,12,4,"reIsBinary"],[13,16,12,14],[13,19,12,17],[13,31,12,29],[15,2,14,0],[16,2,15,0],[16,6,15,4,"reIsOctal"],[16,15,15,13],[16,18,15,16],[16,31,15,29],[18,2,17,0],[19,2,18,0],[19,6,18,4,"freeParseInt"],[19,18,18,16],[19,21,18,19,"parseInt"],[19,29,18,27],[21,2,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,0,36,0],[38,0,37,0],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,0,41,0],[43,0,42,0],[44,2,43,0],[44,11,43,9,"toNumber"],[44,19,43,17,"toNumber"],[44,20,43,18,"value"],[44,25,43,23],[44,27,43,25],[45,4,44,2],[45,8,44,6],[45,15,44,13,"value"],[45,20,44,18],[45,24,44,22],[45,32,44,30],[45,34,44,32],[46,6,45,4],[46,13,45,11,"value"],[46,18,45,16],[47,4,46,2],[48,4,47,2],[48,8,47,6,"isSymbol"],[48,16,47,14],[48,17,47,15,"value"],[48,22,47,20],[48,23,47,21],[48,25,47,23],[49,6,48,4],[49,13,48,11,"NAN"],[49,16,48,14],[50,4,49,2],[51,4,50,2],[51,8,50,6,"isObject"],[51,16,50,14],[51,17,50,15,"value"],[51,22,50,20],[51,23,50,21],[51,25,50,23],[52,6,51,4],[52,10,51,8,"other"],[52,15,51,13],[52,18,51,16],[52,25,51,23,"value"],[52,30,51,28],[52,31,51,29,"valueOf"],[52,38,51,36],[52,42,51,40],[52,52,51,50],[52,55,51,53,"value"],[52,60,51,58],[52,61,51,59,"valueOf"],[52,68,51,66],[52,69,51,67],[52,70,51,68],[52,73,51,71,"value"],[52,78,51,76],[53,6,52,4,"value"],[53,11,52,9],[53,14,52,12,"isObject"],[53,22,52,20],[53,23,52,21,"other"],[53,28,52,26],[53,29,52,27],[53,32,52,31,"other"],[53,37,52,36],[53,40,52,39],[53,42,52,41],[53,45,52,45,"other"],[53,50,52,50],[54,4,53,2],[55,4,54,2],[55,8,54,6],[55,15,54,13,"value"],[55,20,54,18],[55,24,54,22],[55,32,54,30],[55,34,54,32],[56,6,55,4],[56,13,55,11,"value"],[56,18,55,16],[56,23,55,21],[56,24,55,22],[56,27,55,25,"value"],[56,32,55,30],[56,35,55,33],[56,36,55,34,"value"],[56,41,55,39],[57,4,56,2],[58,4,57,2,"value"],[58,9,57,7],[58,12,57,10,"baseTrim"],[58,20,57,18],[58,21,57,19,"value"],[58,26,57,24],[58,27,57,25],[59,4,58,2],[59,8,58,6,"isBinary"],[59,16,58,14],[59,19,58,17,"reIsBinary"],[59,29,58,27],[59,30,58,28,"test"],[59,34,58,32],[59,35,58,33,"value"],[59,40,58,38],[59,41,58,39],[60,4,59,2],[60,11,59,10,"isBinary"],[60,19,59,18],[60,23,59,22,"reIsOctal"],[60,32,59,31],[60,33,59,32,"test"],[60,37,59,36],[60,38,59,37,"value"],[60,43,59,42],[60,44,59,43],[60,47,60,6,"freeParseInt"],[60,59,60,18],[60,60,60,19,"value"],[60,65,60,24],[60,66,60,25,"slice"],[60,71,60,30],[60,72,60,31],[60,73,60,32],[60,74,60,33],[60,76,60,35,"isBinary"],[60,84,60,43],[60,87,60,46],[60,88,60,47],[60,91,60,50],[60,92,60,51],[60,93,60,52],[60,96,61,7,"reIsBadHex"],[60,106,61,17],[60,107,61,18,"test"],[60,111,61,22],[60,112,61,23,"value"],[60,117,61,28],[60,118,61,29],[60,121,61,32,"NAN"],[60,124,61,35],[60,127,61,38],[60,128,61,39,"value"],[60,133,61,45],[61,2,62,0],[62,2,64,0,"module"],[62,8,64,6],[62,9,64,7,"exports"],[62,16,64,14],[62,19,64,17,"toNumber"],[62,27,64,25],[63,0,64,26],[63,3]],"functionMap":{"names":["<global>","toNumber"],"mappings":"AAA;AC0C;CDmB"}},"type":"js/module"}]}