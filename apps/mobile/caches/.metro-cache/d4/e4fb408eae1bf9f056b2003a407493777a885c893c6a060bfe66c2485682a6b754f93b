{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"buildProjectionTransform\", {\n    enumerable: true,\n    get: function () {\n      return buildProjectionTransform;\n    }\n  });\n  Object.defineProperty(exports, \"identityProjection\", {\n    enumerable: true,\n    get: function () {\n      return identityProjection;\n    }\n  });\n  var identityProjection = \"translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)\";\n  function buildProjectionTransform(delta, treeScale, latestTransform) {\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    var xTranslate = delta.x.translate / treeScale.x;\n    var yTranslate = delta.y.translate / treeScale.y;\n    var transform = \"translate3d(\".concat(xTranslate, \"px, \").concat(yTranslate, \"px, 0) \");\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    transform += \"scale(\".concat(1 / treeScale.x, \", \").concat(1 / treeScale.y, \") \");\n    if (latestTransform) {\n      var rotate = latestTransform.rotate,\n        rotateX = latestTransform.rotateX,\n        rotateY = latestTransform.rotateY;\n      if (rotate) transform += \"rotate(\".concat(rotate, \"deg) \");\n      if (rotateX) transform += \"rotateX(\".concat(rotateX, \"deg) \");\n      if (rotateY) transform += \"rotateY(\".concat(rotateY, \"deg) \");\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    var elementScaleX = delta.x.scale * treeScale.x;\n    var elementScaleY = delta.y.scale * treeScale.y;\n    transform += \"scale(\".concat(elementScaleX, \", \").concat(elementScaleY, \")\");\n    return transform === identityProjection ? \"none\" : transform;\n  }\n});","lineCount":52,"map":[[7,2,36,0,"Object"],[7,8,36,0],[7,9,36,0,"defineProperty"],[7,23,36,0],[7,24,36,0,"exports"],[7,31,36,0],[8,4,36,0,"enumerable"],[8,14,36,0],[9,4,36,0,"get"],[9,7,36,0],[9,18,36,0,"get"],[9,19,36,0],[10,6,36,0],[10,13,36,9,"buildProjectionTransform"],[10,37,36,33],[11,4,36,33],[12,2,36,33],[13,2,36,0,"Object"],[13,8,36,0],[13,9,36,0,"defineProperty"],[13,23,36,0],[13,24,36,0,"exports"],[13,31,36,0],[14,4,36,0,"enumerable"],[14,14,36,0],[15,4,36,0,"get"],[15,7,36,0],[15,18,36,0,"get"],[15,19,36,0],[16,6,36,0],[16,13,36,35,"identityProjection"],[16,31,36,53],[17,4,36,53],[18,2,36,53],[19,2,1,0],[19,6,1,4,"identityProjection"],[19,24,1,22],[19,27,1,25],[19,77,1,75],[20,2,2,0],[20,11,2,9,"buildProjectionTransform"],[20,35,2,33,"buildProjectionTransform"],[20,36,2,34,"delta"],[20,41,2,39],[20,43,2,41,"treeScale"],[20,52,2,50],[20,54,2,52,"latestTransform"],[20,69,2,67],[20,71,2,69],[21,4,3,4],[22,0,4,0],[23,0,5,0],[24,0,6,0],[25,0,7,0],[26,0,8,0],[27,4,9,4],[27,8,9,8,"xTranslate"],[27,18,9,18],[27,21,9,21,"delta"],[27,26,9,26],[27,27,9,27,"x"],[27,28,9,28],[27,29,9,29,"translate"],[27,38,9,38],[27,41,9,41,"treeScale"],[27,50,9,50],[27,51,9,51,"x"],[27,52,9,52],[28,4,10,4],[28,8,10,8,"yTranslate"],[28,18,10,18],[28,21,10,21,"delta"],[28,26,10,26],[28,27,10,27,"y"],[28,28,10,28],[28,29,10,29,"translate"],[28,38,10,38],[28,41,10,41,"treeScale"],[28,50,10,50],[28,51,10,51,"y"],[28,52,10,52],[29,4,11,4],[29,8,11,8,"transform"],[29,17,11,17],[29,20,11,20],[29,34,11,34],[29,35,11,35,"concat"],[29,41,11,41],[29,42,11,42,"xTranslate"],[29,52,11,52],[29,54,11,54],[29,60,11,60],[29,61,11,61],[29,62,11,62,"concat"],[29,68,11,68],[29,69,11,69,"yTranslate"],[29,79,11,79],[29,81,11,81],[29,90,11,90],[29,91,11,91],[30,4,12,4],[31,0,13,0],[32,0,14,0],[33,0,15,0],[34,4,16,4,"transform"],[34,13,16,13],[34,17,16,17],[34,25,16,25],[34,26,16,26,"concat"],[34,32,16,32],[34,33,16,33],[34,34,16,34],[34,37,16,37,"treeScale"],[34,46,16,46],[34,47,16,47,"x"],[34,48,16,48],[34,50,16,50],[34,54,16,54],[34,55,16,55],[34,56,16,56,"concat"],[34,62,16,62],[34,63,16,63],[34,64,16,64],[34,67,16,67,"treeScale"],[34,76,16,76],[34,77,16,77,"y"],[34,78,16,78],[34,80,16,80],[34,84,16,84],[34,85,16,85],[35,4,17,4],[35,8,17,8,"latestTransform"],[35,23,17,23],[35,25,17,25],[36,6,18,8],[36,10,18,12,"rotate"],[36,16,18,18],[36,19,18,21,"latestTransform"],[36,34,18,36],[36,35,18,37,"rotate"],[36,41,18,43],[37,8,18,45,"rotateX"],[37,15,18,52],[37,18,18,55,"latestTransform"],[37,33,18,70],[37,34,18,71,"rotateX"],[37,41,18,78],[38,8,18,80,"rotateY"],[38,15,18,87],[38,18,18,90,"latestTransform"],[38,33,18,105],[38,34,18,106,"rotateY"],[38,41,18,113],[39,6,19,8],[39,10,19,12,"rotate"],[39,16,19,18],[39,18,20,12,"transform"],[39,27,20,21],[39,31,20,25],[39,40,20,34],[39,41,20,35,"concat"],[39,47,20,41],[39,48,20,42,"rotate"],[39,54,20,48],[39,56,20,50],[39,63,20,57],[39,64,20,58],[40,6,21,8],[40,10,21,12,"rotateX"],[40,17,21,19],[40,19,22,12,"transform"],[40,28,22,21],[40,32,22,25],[40,42,22,35],[40,43,22,36,"concat"],[40,49,22,42],[40,50,22,43,"rotateX"],[40,57,22,50],[40,59,22,52],[40,66,22,59],[40,67,22,60],[41,6,23,8],[41,10,23,12,"rotateY"],[41,17,23,19],[41,19,24,12,"transform"],[41,28,24,21],[41,32,24,25],[41,42,24,35],[41,43,24,36,"concat"],[41,49,24,42],[41,50,24,43,"rotateY"],[41,57,24,50],[41,59,24,52],[41,66,24,59],[41,67,24,60],[42,4,25,4],[43,4,26,4],[44,0,27,0],[45,0,28,0],[46,0,29,0],[47,4,30,4],[47,8,30,8,"elementScaleX"],[47,21,30,21],[47,24,30,24,"delta"],[47,29,30,29],[47,30,30,30,"x"],[47,31,30,31],[47,32,30,32,"scale"],[47,37,30,37],[47,40,30,40,"treeScale"],[47,49,30,49],[47,50,30,50,"x"],[47,51,30,51],[48,4,31,4],[48,8,31,8,"elementScaleY"],[48,21,31,21],[48,24,31,24,"delta"],[48,29,31,29],[48,30,31,30,"y"],[48,31,31,31],[48,32,31,32,"scale"],[48,37,31,37],[48,40,31,40,"treeScale"],[48,49,31,49],[48,50,31,50,"y"],[48,51,31,51],[49,4,32,4,"transform"],[49,13,32,13],[49,17,32,17],[49,25,32,25],[49,26,32,26,"concat"],[49,32,32,32],[49,33,32,33,"elementScaleX"],[49,46,32,46],[49,48,32,48],[49,52,32,52],[49,53,32,53],[49,54,32,54,"concat"],[49,60,32,60],[49,61,32,61,"elementScaleY"],[49,74,32,74],[49,76,32,76],[49,79,32,79],[49,80,32,80],[50,4,33,4],[50,11,33,11,"transform"],[50,20,33,20],[50,25,33,25,"identityProjection"],[50,43,33,43],[50,46,33,46],[50,52,33,52],[50,55,33,55,"transform"],[50,64,33,64],[51,2,34,0],[52,0,34,1],[52,3]],"functionMap":{"names":["<global>","buildProjectionTransform"],"mappings":"AAA;ACC;CDgC"},"hasCjsExports":false},"type":"js/module"}]}