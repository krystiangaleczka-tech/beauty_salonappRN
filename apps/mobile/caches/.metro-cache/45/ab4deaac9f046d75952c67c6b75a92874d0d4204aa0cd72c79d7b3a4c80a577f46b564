{"dependencies":[{"name":"./_arrayMap","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":15,"index":15},"end":{"line":1,"column":37,"index":37}}],"key":"QtsZkap5V4FlhL3qenqJHZqVGPA=","exportNames":["*"],"imports":1}},{"name":"./_baseClone","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":16,"index":55},"end":{"line":2,"column":39,"index":78}}],"key":"bJfJgORBk05pqA1jIrA6DD/8OeE=","exportNames":["*"],"imports":1}},{"name":"./_baseUnset","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":96},"end":{"line":3,"column":39,"index":119}}],"key":"mTPbdX9Pc6klvWI9slF6URxVWAY=","exportNames":["*"],"imports":1}},{"name":"./_castPath","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":15,"index":136},"end":{"line":4,"column":37,"index":158}}],"key":"gThAZbcxzplaHx+ZHPkGwyOqdbE=","exportNames":["*"],"imports":1}},{"name":"./_copyObject","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":177},"end":{"line":5,"column":41,"index":201}}],"key":"eZJLlGA/Vl1BDMlGvGQH08dlEDo=","exportNames":["*"],"imports":1}},{"name":"./_customOmitClone","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":22,"index":225},"end":{"line":6,"column":51,"index":254}}],"key":"URLs8drgup7oFkXWnbyCTDb65xk=","exportNames":["*"],"imports":1}},{"name":"./_flatRest","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":15,"index":271},"end":{"line":7,"column":37,"index":293}}],"key":"0wYHGPCeRHraGCrMyA9Doh9eS3w=","exportNames":["*"],"imports":1}},{"name":"./_getAllKeysIn","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":19,"index":314},"end":{"line":8,"column":45,"index":340}}],"key":"Kz7cnu/+3KuBNdDHLJAhw0BR8x4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var arrayMap = require(_dependencyMap[0], \"./_arrayMap\"),\n    baseClone = require(_dependencyMap[1], \"./_baseClone\"),\n    baseUnset = require(_dependencyMap[2], \"./_baseUnset\"),\n    castPath = require(_dependencyMap[3], \"./_castPath\"),\n    copyObject = require(_dependencyMap[4], \"./_copyObject\"),\n    customOmitClone = require(_dependencyMap[5], \"./_customOmitClone\"),\n    flatRest = require(_dependencyMap[6], \"./_flatRest\"),\n    getAllKeysIn = require(_dependencyMap[7], \"./_getAllKeysIn\");\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n  /**\n   * The opposite of `_.pick`; this method creates an object composed of the\n   * own and inherited enumerable property paths of `object` that are not omitted.\n   *\n   * **Note:** This method is considerably slower than `_.pick`.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The source object.\n   * @param {...(string|string[])} [paths] The property paths to omit.\n   * @returns {Object} Returns the new object.\n   * @example\n   *\n   * var object = { 'a': 1, 'b': '2', 'c': 3 };\n   *\n   * _.omit(object, ['a', 'c']);\n   * // => { 'b': '2' }\n   */\n  var omit = flatRest(function (object, paths) {\n    var result = {};\n    if (object == null) {\n      return result;\n    }\n    var isDeep = false;\n    paths = arrayMap(paths, function (path) {\n      path = castPath(path, object);\n      isDeep || (isDeep = path.length > 1);\n      return path;\n    });\n    copyObject(object, getAllKeysIn(object), result);\n    if (isDeep) {\n      result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n    }\n    var length = paths.length;\n    while (length--) {\n      baseUnset(result, paths[length]);\n    }\n    return result;\n  });\n  module.exports = omit;\n});","lineCount":58,"map":[[2,2,1,0],[2,6,1,4,"arrayMap"],[2,14,1,12],[2,17,1,15,"require"],[2,24,1,22],[2,25,1,22,"_dependencyMap"],[2,39,1,22],[2,57,1,36],[2,58,1,37],[3,4,2,4,"baseClone"],[3,13,2,13],[3,16,2,16,"require"],[3,23,2,23],[3,24,2,23,"_dependencyMap"],[3,38,2,23],[3,57,2,38],[3,58,2,39],[4,4,3,4,"baseUnset"],[4,13,3,13],[4,16,3,16,"require"],[4,23,3,23],[4,24,3,23,"_dependencyMap"],[4,38,3,23],[4,57,3,38],[4,58,3,39],[5,4,4,4,"castPath"],[5,12,4,12],[5,15,4,15,"require"],[5,22,4,22],[5,23,4,22,"_dependencyMap"],[5,37,4,22],[5,55,4,36],[5,56,4,37],[6,4,5,4,"copyObject"],[6,14,5,14],[6,17,5,17,"require"],[6,24,5,24],[6,25,5,24,"_dependencyMap"],[6,39,5,24],[6,59,5,40],[6,60,5,41],[7,4,6,4,"customOmitClone"],[7,19,6,19],[7,22,6,22,"require"],[7,29,6,29],[7,30,6,29,"_dependencyMap"],[7,44,6,29],[7,69,6,50],[7,70,6,51],[8,4,7,4,"flatRest"],[8,12,7,12],[8,15,7,15,"require"],[8,22,7,22],[8,23,7,22,"_dependencyMap"],[8,37,7,22],[8,55,7,36],[8,56,7,37],[9,4,8,4,"getAllKeysIn"],[9,16,8,16],[9,19,8,19,"require"],[9,26,8,26],[9,27,8,26,"_dependencyMap"],[9,41,8,26],[9,63,8,44],[9,64,8,45],[11,2,10,0],[12,2,11,0],[12,6,11,4,"CLONE_DEEP_FLAG"],[12,21,11,19],[12,24,11,22],[12,25,11,23],[13,4,12,4,"CLONE_FLAT_FLAG"],[13,19,12,19],[13,22,12,22],[13,23,12,23],[14,4,13,4,"CLONE_SYMBOLS_FLAG"],[14,22,13,22],[14,25,13,25],[14,26,13,26],[16,2,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,2,35,0],[36,6,35,4,"omit"],[36,10,35,8],[36,13,35,11,"flatRest"],[36,21,35,19],[36,22,35,20],[36,32,35,29,"object"],[36,38,35,35],[36,40,35,37,"paths"],[36,45,35,42],[36,47,35,44],[37,4,36,2],[37,8,36,6,"result"],[37,14,36,12],[37,17,36,15],[37,18,36,16],[37,19,36,17],[38,4,37,2],[38,8,37,6,"object"],[38,14,37,12],[38,18,37,16],[38,22,37,20],[38,24,37,22],[39,6,38,4],[39,13,38,11,"result"],[39,19,38,17],[40,4,39,2],[41,4,40,2],[41,8,40,6,"isDeep"],[41,14,40,12],[41,17,40,15],[41,22,40,20],[42,4,41,2,"paths"],[42,9,41,7],[42,12,41,10,"arrayMap"],[42,20,41,18],[42,21,41,19,"paths"],[42,26,41,24],[42,28,41,26],[42,38,41,35,"path"],[42,42,41,39],[42,44,41,41],[43,6,42,4,"path"],[43,10,42,8],[43,13,42,11,"castPath"],[43,21,42,19],[43,22,42,20,"path"],[43,26,42,24],[43,28,42,26,"object"],[43,34,42,32],[43,35,42,33],[44,6,43,4,"isDeep"],[44,12,43,10],[44,17,43,15,"isDeep"],[44,23,43,21],[44,26,43,24,"path"],[44,30,43,28],[44,31,43,29,"length"],[44,37,43,35],[44,40,43,38],[44,41,43,39],[44,42,43,40],[45,6,44,4],[45,13,44,11,"path"],[45,17,44,15],[46,4,45,2],[46,5,45,3],[46,6,45,4],[47,4,46,2,"copyObject"],[47,14,46,12],[47,15,46,13,"object"],[47,21,46,19],[47,23,46,21,"getAllKeysIn"],[47,35,46,33],[47,36,46,34,"object"],[47,42,46,40],[47,43,46,41],[47,45,46,43,"result"],[47,51,46,49],[47,52,46,50],[48,4,47,2],[48,8,47,6,"isDeep"],[48,14,47,12],[48,16,47,14],[49,6,48,4,"result"],[49,12,48,10],[49,15,48,13,"baseClone"],[49,24,48,22],[49,25,48,23,"result"],[49,31,48,29],[49,33,48,31,"CLONE_DEEP_FLAG"],[49,48,48,46],[49,51,48,49,"CLONE_FLAT_FLAG"],[49,66,48,64],[49,69,48,67,"CLONE_SYMBOLS_FLAG"],[49,87,48,85],[49,89,48,87,"customOmitClone"],[49,104,48,102],[49,105,48,103],[50,4,49,2],[51,4,50,2],[51,8,50,6,"length"],[51,14,50,12],[51,17,50,15,"paths"],[51,22,50,20],[51,23,50,21,"length"],[51,29,50,27],[52,4,51,2],[52,11,51,9,"length"],[52,17,51,15],[52,19,51,17],[52,21,51,19],[53,6,52,4,"baseUnset"],[53,15,52,13],[53,16,52,14,"result"],[53,22,52,20],[53,24,52,22,"paths"],[53,29,52,27],[53,30,52,28,"length"],[53,36,52,34],[53,37,52,35],[53,38,52,36],[54,4,53,2],[55,4,54,2],[55,11,54,9,"result"],[55,17,54,15],[56,2,55,0],[56,3,55,1],[56,4,55,2],[57,2,57,0,"module"],[57,8,57,6],[57,9,57,7,"exports"],[57,16,57,14],[57,19,57,17,"omit"],[57,23,57,21],[58,0,57,22],[58,3]],"functionMap":{"names":["<global>","flatRest$argument_0","arrayMap$argument_1"],"mappings":"AAA;oBCkC;0BCM;GDI;CDU"},"hasCjsExports":true},"type":"js/module"}]}