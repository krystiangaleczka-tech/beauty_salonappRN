{"dependencies":[{"name":"./_Stack","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":12,"index":12},"end":{"line":1,"column":31,"index":31}}],"key":"liq/TvqrNGB6ftCyMygTFFyDxSc=","exportNames":["*"],"imports":1}},{"name":"./_equalArrays","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":18,"index":51},"end":{"line":2,"column":43,"index":76}}],"key":"qSfH+9JBd+ag2nEavXYsw22rtTI=","exportNames":["*"],"imports":1}},{"name":"./_equalByTag","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":17,"index":95},"end":{"line":3,"column":41,"index":119}}],"key":"GN/6njgcrfEFB55qtdGX8m43kDM=","exportNames":["*"],"imports":1}},{"name":"./_equalObjects","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":19,"index":140},"end":{"line":4,"column":45,"index":166}}],"key":"RRMuXbhrlWjYtRfQDiNMd67XQFA=","exportNames":["*"],"imports":1}},{"name":"./_getTag","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":13,"index":181},"end":{"line":5,"column":33,"index":201}}],"key":"QzKfm+fv5BQ5svWDQDDSsIdz/ZE=","exportNames":["*"],"imports":1}},{"name":"./isArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":14,"index":217},"end":{"line":6,"column":34,"index":237}}],"key":"cpLl3Nq+ZgzwmgESYQ2NCH3CqEk=","exportNames":["*"],"imports":1}},{"name":"./isBuffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":15,"index":254},"end":{"line":7,"column":36,"index":275}}],"key":"MnKE+aOfiHt1/Xaur83FQ9Y3csg=","exportNames":["*"],"imports":1}},{"name":"./isTypedArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":19,"index":296},"end":{"line":8,"column":44,"index":321}}],"key":"dqzi9z07s46ENslw0ZkrSg3FYTY=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var Stack = require(_dependencyMap[0], \"./_Stack\"),\n    equalArrays = require(_dependencyMap[1], \"./_equalArrays\"),\n    equalByTag = require(_dependencyMap[2], \"./_equalByTag\"),\n    equalObjects = require(_dependencyMap[3], \"./_equalObjects\"),\n    getTag = require(_dependencyMap[4], \"./_getTag\"),\n    isArray = require(_dependencyMap[5], \"./isArray\"),\n    isBuffer = require(_dependencyMap[6], \"./isBuffer\"),\n    isTypedArray = require(_dependencyMap[7], \"./isTypedArray\");\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1;\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n  /** Used for built-in method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /**\n   * A specialized version of `baseIsEqual` for arrays and objects which performs\n   * deep comparisons and tracks traversed objects enabling objects with circular\n   * references to be compared.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n    objTag = objTag == argsTag ? objectTag : objTag;\n    othTag = othTag == argsTag ? objectTag : othTag;\n    var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n    if (isSameTag && isBuffer(object)) {\n      if (!isBuffer(other)) {\n        return false;\n      }\n      objIsArr = true;\n      objIsObj = false;\n    }\n    if (isSameTag && !objIsObj) {\n      stack || (stack = new Stack());\n      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n      if (objIsWrapped || othIsWrapped) {\n        var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n        stack || (stack = new Stack());\n        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n      }\n    }\n    if (!isSameTag) {\n      return false;\n    }\n    stack || (stack = new Stack());\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n  }\n  module.exports = baseIsEqualDeep;\n});","lineCount":77,"map":[[2,2,1,0],[2,6,1,4,"Stack"],[2,11,1,9],[2,14,1,12,"require"],[2,21,1,19],[2,22,1,19,"_dependencyMap"],[2,36,1,19],[2,51,1,30],[2,52,1,31],[3,4,2,4,"equalArrays"],[3,15,2,15],[3,18,2,18,"require"],[3,25,2,25],[3,26,2,25,"_dependencyMap"],[3,40,2,25],[3,61,2,42],[3,62,2,43],[4,4,3,4,"equalByTag"],[4,14,3,14],[4,17,3,17,"require"],[4,24,3,24],[4,25,3,24,"_dependencyMap"],[4,39,3,24],[4,59,3,40],[4,60,3,41],[5,4,4,4,"equalObjects"],[5,16,4,16],[5,19,4,19,"require"],[5,26,4,26],[5,27,4,26,"_dependencyMap"],[5,41,4,26],[5,63,4,44],[5,64,4,45],[6,4,5,4,"getTag"],[6,10,5,10],[6,13,5,13,"require"],[6,20,5,20],[6,21,5,20,"_dependencyMap"],[6,35,5,20],[6,51,5,32],[6,52,5,33],[7,4,6,4,"isArray"],[7,11,6,11],[7,14,6,14,"require"],[7,21,6,21],[7,22,6,21,"_dependencyMap"],[7,36,6,21],[7,52,6,33],[7,53,6,34],[8,4,7,4,"isBuffer"],[8,12,7,12],[8,15,7,15,"require"],[8,22,7,22],[8,23,7,22,"_dependencyMap"],[8,37,7,22],[8,54,7,35],[8,55,7,36],[9,4,8,4,"isTypedArray"],[9,16,8,16],[9,19,8,19,"require"],[9,26,8,26],[9,27,8,26,"_dependencyMap"],[9,41,8,26],[9,62,8,43],[9,63,8,44],[11,2,10,0],[12,2,11,0],[12,6,11,4,"COMPARE_PARTIAL_FLAG"],[12,26,11,24],[12,29,11,27],[12,30,11,28],[14,2,13,0],[15,2,14,0],[15,6,14,4,"argsTag"],[15,13,14,11],[15,16,14,14],[15,36,14,34],[16,4,15,4,"arrayTag"],[16,12,15,12],[16,15,15,15],[16,31,15,31],[17,4,16,4,"objectTag"],[17,13,16,13],[17,16,16,16],[17,33,16,33],[19,2,18,0],[20,2,19,0],[20,6,19,4,"objectProto"],[20,17,19,15],[20,20,19,18,"Object"],[20,26,19,24],[20,27,19,25,"prototype"],[20,36,19,34],[22,2,21,0],[23,2,22,0],[23,6,22,4,"hasOwnProperty"],[23,20,22,18],[23,23,22,21,"objectProto"],[23,34,22,32],[23,35,22,33,"hasOwnProperty"],[23,49,22,47],[25,2,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,0,36,0],[38,0,37,0],[39,2,38,0],[39,11,38,9,"baseIsEqualDeep"],[39,26,38,24,"baseIsEqualDeep"],[39,27,38,25,"object"],[39,33,38,31],[39,35,38,33,"other"],[39,40,38,38],[39,42,38,40,"bitmask"],[39,49,38,47],[39,51,38,49,"customizer"],[39,61,38,59],[39,63,38,61,"equalFunc"],[39,72,38,70],[39,74,38,72,"stack"],[39,79,38,77],[39,81,38,79],[40,4,39,2],[40,8,39,6,"objIsArr"],[40,16,39,14],[40,19,39,17,"isArray"],[40,26,39,24],[40,27,39,25,"object"],[40,33,39,31],[40,34,39,32],[41,6,40,6,"othIsArr"],[41,14,40,14],[41,17,40,17,"isArray"],[41,24,40,24],[41,25,40,25,"other"],[41,30,40,30],[41,31,40,31],[42,6,41,6,"objTag"],[42,12,41,12],[42,15,41,15,"objIsArr"],[42,23,41,23],[42,26,41,26,"arrayTag"],[42,34,41,34],[42,37,41,37,"getTag"],[42,43,41,43],[42,44,41,44,"object"],[42,50,41,50],[42,51,41,51],[43,6,42,6,"othTag"],[43,12,42,12],[43,15,42,15,"othIsArr"],[43,23,42,23],[43,26,42,26,"arrayTag"],[43,34,42,34],[43,37,42,37,"getTag"],[43,43,42,43],[43,44,42,44,"other"],[43,49,42,49],[43,50,42,50],[44,4,44,2,"objTag"],[44,10,44,8],[44,13,44,11,"objTag"],[44,19,44,17],[44,23,44,21,"argsTag"],[44,30,44,28],[44,33,44,31,"objectTag"],[44,42,44,40],[44,45,44,43,"objTag"],[44,51,44,49],[45,4,45,2,"othTag"],[45,10,45,8],[45,13,45,11,"othTag"],[45,19,45,17],[45,23,45,21,"argsTag"],[45,30,45,28],[45,33,45,31,"objectTag"],[45,42,45,40],[45,45,45,43,"othTag"],[45,51,45,49],[46,4,47,2],[46,8,47,6,"objIsObj"],[46,16,47,14],[46,19,47,17,"objTag"],[46,25,47,23],[46,29,47,27,"objectTag"],[46,38,47,36],[47,6,48,6,"othIsObj"],[47,14,48,14],[47,17,48,17,"othTag"],[47,23,48,23],[47,27,48,27,"objectTag"],[47,36,48,36],[48,6,49,6,"isSameTag"],[48,15,49,15],[48,18,49,18,"objTag"],[48,24,49,24],[48,28,49,28,"othTag"],[48,34,49,34],[49,4,51,2],[49,8,51,6,"isSameTag"],[49,17,51,15],[49,21,51,19,"isBuffer"],[49,29,51,27],[49,30,51,28,"object"],[49,36,51,34],[49,37,51,35],[49,39,51,37],[50,6,52,4],[50,10,52,8],[50,11,52,9,"isBuffer"],[50,19,52,17],[50,20,52,18,"other"],[50,25,52,23],[50,26,52,24],[50,28,52,26],[51,8,53,6],[51,15,53,13],[51,20,53,18],[52,6,54,4],[53,6,55,4,"objIsArr"],[53,14,55,12],[53,17,55,15],[53,21,55,19],[54,6,56,4,"objIsObj"],[54,14,56,12],[54,17,56,15],[54,22,56,20],[55,4,57,2],[56,4,58,2],[56,8,58,6,"isSameTag"],[56,17,58,15],[56,21,58,19],[56,22,58,20,"objIsObj"],[56,30,58,28],[56,32,58,30],[57,6,59,4,"stack"],[57,11,59,9],[57,16,59,14,"stack"],[57,21,59,19],[57,24,59,22],[57,28,59,26,"Stack"],[57,33,59,31],[57,34,59,30],[57,35,59,31],[57,36,59,32],[58,6,60,4],[58,13,60,12,"objIsArr"],[58,21,60,20],[58,25,60,24,"isTypedArray"],[58,37,60,36],[58,38,60,37,"object"],[58,44,60,43],[58,45,60,44],[58,48,61,8,"equalArrays"],[58,59,61,19],[58,60,61,20,"object"],[58,66,61,26],[58,68,61,28,"other"],[58,73,61,33],[58,75,61,35,"bitmask"],[58,82,61,42],[58,84,61,44,"customizer"],[58,94,61,54],[58,96,61,56,"equalFunc"],[58,105,61,65],[58,107,61,67,"stack"],[58,112,61,72],[58,113,61,73],[58,116,62,8,"equalByTag"],[58,126,62,18],[58,127,62,19,"object"],[58,133,62,25],[58,135,62,27,"other"],[58,140,62,32],[58,142,62,34,"objTag"],[58,148,62,40],[58,150,62,42,"bitmask"],[58,157,62,49],[58,159,62,51,"customizer"],[58,169,62,61],[58,171,62,63,"equalFunc"],[58,180,62,72],[58,182,62,74,"stack"],[58,187,62,79],[58,188,62,80],[59,4,63,2],[60,4,64,2],[60,8,64,6],[60,10,64,8,"bitmask"],[60,17,64,15],[60,20,64,18,"COMPARE_PARTIAL_FLAG"],[60,40,64,38],[60,41,64,39],[60,43,64,41],[61,6,65,4],[61,10,65,8,"objIsWrapped"],[61,22,65,20],[61,25,65,23,"objIsObj"],[61,33,65,31],[61,37,65,35,"hasOwnProperty"],[61,51,65,49],[61,52,65,50,"call"],[61,56,65,54],[61,57,65,55,"object"],[61,63,65,61],[61,65,65,63],[61,78,65,76],[61,79,65,77],[62,8,66,8,"othIsWrapped"],[62,20,66,20],[62,23,66,23,"othIsObj"],[62,31,66,31],[62,35,66,35,"hasOwnProperty"],[62,49,66,49],[62,50,66,50,"call"],[62,54,66,54],[62,55,66,55,"other"],[62,60,66,60],[62,62,66,62],[62,75,66,75],[62,76,66,76],[63,6,68,4],[63,10,68,8,"objIsWrapped"],[63,22,68,20],[63,26,68,24,"othIsWrapped"],[63,38,68,36],[63,40,68,38],[64,8,69,6],[64,12,69,10,"objUnwrapped"],[64,24,69,22],[64,27,69,25,"objIsWrapped"],[64,39,69,37],[64,42,69,40,"object"],[64,48,69,46],[64,49,69,47,"value"],[64,54,69,52],[64,55,69,53],[64,56,69,54],[64,59,69,57,"object"],[64,65,69,63],[65,10,70,10,"othUnwrapped"],[65,22,70,22],[65,25,70,25,"othIsWrapped"],[65,37,70,37],[65,40,70,40,"other"],[65,45,70,45],[65,46,70,46,"value"],[65,51,70,51],[65,52,70,52],[65,53,70,53],[65,56,70,56,"other"],[65,61,70,61],[66,8,72,6,"stack"],[66,13,72,11],[66,18,72,16,"stack"],[66,23,72,21],[66,26,72,24],[66,30,72,28,"Stack"],[66,35,72,33],[66,36,72,32],[66,37,72,33],[66,38,72,34],[67,8,73,6],[67,15,73,13,"equalFunc"],[67,24,73,22],[67,25,73,23,"objUnwrapped"],[67,37,73,35],[67,39,73,37,"othUnwrapped"],[67,51,73,49],[67,53,73,51,"bitmask"],[67,60,73,58],[67,62,73,60,"customizer"],[67,72,73,70],[67,74,73,72,"stack"],[67,79,73,77],[67,80,73,78],[68,6,74,4],[69,4,75,2],[70,4,76,2],[70,8,76,6],[70,9,76,7,"isSameTag"],[70,18,76,16],[70,20,76,18],[71,6,77,4],[71,13,77,11],[71,18,77,16],[72,4,78,2],[73,4,79,2,"stack"],[73,9,79,7],[73,14,79,12,"stack"],[73,19,79,17],[73,22,79,20],[73,26,79,24,"Stack"],[73,31,79,29],[73,32,79,28],[73,33,79,29],[73,34,79,30],[74,4,80,2],[74,11,80,9,"equalObjects"],[74,23,80,21],[74,24,80,22,"object"],[74,30,80,28],[74,32,80,30,"other"],[74,37,80,35],[74,39,80,37,"bitmask"],[74,46,80,44],[74,48,80,46,"customizer"],[74,58,80,56],[74,60,80,58,"equalFunc"],[74,69,80,67],[74,71,80,69,"stack"],[74,76,80,74],[74,77,80,75],[75,2,81,0],[76,2,83,0,"module"],[76,8,83,6],[76,9,83,7,"exports"],[76,16,83,14],[76,19,83,17,"baseIsEqualDeep"],[76,34,83,32],[77,0,83,33],[77,3]],"functionMap":{"names":["<global>","baseIsEqualDeep"],"mappings":"AAA;ACqC;CD2C"},"hasCjsExports":true},"type":"js/module"}]}