{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"lodash/inRange","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"X+kokBLlLFiZJmpT6+r9ZmROeos=","exportNames":["*"]}},{"name":"xdate","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":26,"index":64}}],"key":"gTa7eBSzdZCpR7C6CXaJhVpu6vY=","exportNames":["*"]}},{"name":"../commons/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":65},"end":{"line":3,"column":45,"index":110}}],"key":"SMwBhX4ALvbYIiiSbn97/4tbxzQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.HOUR_BLOCK_HEIGHT = void 0;\n  exports.buildUnavailableHoursBlocks = buildUnavailableHoursBlocks;\n  exports.populateEvents = populateEvents;\n  var _inRange = _interopRequireDefault(require(_dependencyMap[1], \"lodash/inRange\"));\n  var _xdate = _interopRequireDefault(require(_dependencyMap[2], \"xdate\"));\n  var _constants = _interopRequireDefault(require(_dependencyMap[3], \"../commons/constants\"));\n  const HOUR_BLOCK_HEIGHT = exports.HOUR_BLOCK_HEIGHT = 100;\n  const OVERLAP_EVENTS_SPACINGS = 10;\n  const RIGHT_EDGE_SPACING = 10;\n  function buildEvent(event, left, width, {\n    dayStart = 0,\n    hourBlockHeight = HOUR_BLOCK_HEIGHT\n  }) {\n    const startTime = new _xdate.default(event.start);\n    const endTime = event.end ? new _xdate.default(event.end) : new _xdate.default(startTime).addHours(1);\n    const dayStartTime = new _xdate.default(startTime).clearTime();\n    return {\n      ...event,\n      top: (dayStartTime.diffHours(startTime) - dayStart) * hourBlockHeight,\n      height: startTime.diffHours(endTime) * hourBlockHeight,\n      width,\n      left\n    };\n  }\n  function hasCollision(a, b) {\n    return a.end > b.start && a.start < b.end;\n  }\n  function calcColumnSpan(event, columnIndex, columns) {\n    let colSpan = 1;\n    for (let i = columnIndex + 1; i < columns.length; i++) {\n      const column = columns[i];\n      const foundCollision = column.find(ev => hasCollision(event, ev));\n      if (foundCollision) {\n        return colSpan;\n      }\n      colSpan++;\n    }\n    return colSpan;\n  }\n  function packOverlappingEventGroup(columns, calculatedEvents, populateOptions) {\n    const {\n      screenWidth = _constants.default.screenWidth,\n      rightEdgeSpacing = RIGHT_EDGE_SPACING,\n      overlapEventsSpacing = OVERLAP_EVENTS_SPACINGS\n    } = populateOptions;\n    columns.forEach((column, columnIndex) => {\n      column.forEach(event => {\n        const totalWidth = screenWidth - rightEdgeSpacing;\n        const columnSpan = calcColumnSpan(event, columnIndex, columns);\n        const eventLeft = columnIndex / columns.length * totalWidth;\n        let eventWidth = totalWidth * (columnSpan / columns.length);\n        if (columnIndex + columnSpan <= columns.length - 1) {\n          eventWidth -= overlapEventsSpacing;\n        }\n        calculatedEvents.push(buildEvent(event, eventLeft, eventWidth, populateOptions));\n      });\n    });\n  }\n  function populateEvents(_events, populateOptions) {\n    let lastEnd = null;\n    let columns = [];\n    const calculatedEvents = [];\n    const events = _events.map((ev, index) => ({\n      ...ev,\n      index: index\n    })).sort(function (a, b) {\n      if (a.start < b.start) return -1;\n      if (a.start > b.start) return 1;\n      if (a.end < b.end) return -1;\n      if (a.end > b.end) return 1;\n      return 0;\n    });\n    events.forEach(function (ev) {\n      // Reset recent overlapping event group and start a new one\n      if (lastEnd !== null && ev.start >= lastEnd) {\n        packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n        columns = [];\n        lastEnd = null;\n      }\n\n      // Place current event in the right column where it doesn't overlap\n      let placed = false;\n      for (let i = 0; i < columns.length; i++) {\n        const col = columns[i];\n        if (!hasCollision(col[col.length - 1], ev)) {\n          col.push(ev);\n          placed = true;\n          break;\n        }\n      }\n\n      // If curr event wasn't placed in any of the columns, create a new column for it\n      if (!placed) {\n        columns.push([ev]);\n      }\n      if (lastEnd === null || ev.end > lastEnd) {\n        lastEnd = ev.end;\n      }\n    });\n    if (columns.length > 0) {\n      packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n    }\n    return calculatedEvents;\n  }\n  function buildUnavailableHoursBlocks(unavailableHours = [], options) {\n    const {\n      hourBlockHeight = HOUR_BLOCK_HEIGHT,\n      dayStart = 0,\n      dayEnd = 24\n    } = options || {};\n    const totalDayHours = dayEnd - dayStart;\n    const totalDayHeight = (dayEnd - dayStart) * hourBlockHeight;\n    return unavailableHours.map(hours => {\n      if (!(0, _inRange.default)(hours.start, 0, 25) || !(0, _inRange.default)(hours.end, 0, 25)) {\n        console.error('Calendar Timeline unavailableHours is invalid. Hours should be between 0 and 24');\n        return undefined;\n      }\n      if (hours.start >= hours.end) {\n        console.error('Calendar Timeline availableHours is invalid. start hour should be earlier than end hour');\n        return undefined;\n      }\n      const startFixed = Math.max(hours.start, dayStart);\n      const endFixed = Math.min(hours.end, dayEnd);\n      return {\n        top: (startFixed - dayStart) / totalDayHours * totalDayHeight,\n        height: (endFixed - startFixed) * hourBlockHeight\n      };\n    })\n    // Note: this filter falsy values (undefined blocks)\n    .filter(Boolean);\n  }\n});","lineCount":137,"map":[[9,2,1,0],[9,6,1,0,"_inRange"],[9,14,1,0],[9,17,1,0,"_interopRequireDefault"],[9,39,1,0],[9,40,1,0,"require"],[9,47,1,0],[9,48,1,0,"_dependencyMap"],[9,62,1,0],[10,2,2,0],[10,6,2,0,"_xdate"],[10,12,2,0],[10,15,2,0,"_interopRequireDefault"],[10,37,2,0],[10,38,2,0,"require"],[10,45,2,0],[10,46,2,0,"_dependencyMap"],[10,60,2,0],[11,2,3,0],[11,6,3,0,"_constants"],[11,16,3,0],[11,19,3,0,"_interopRequireDefault"],[11,41,3,0],[11,42,3,0,"require"],[11,49,3,0],[11,50,3,0,"_dependencyMap"],[11,64,3,0],[12,2,26,7],[12,8,26,13,"HOUR_BLOCK_HEIGHT"],[12,25,26,30],[12,28,26,30,"exports"],[12,35,26,30],[12,36,26,30,"HOUR_BLOCK_HEIGHT"],[12,53,26,30],[12,56,26,33],[12,59,26,36],[13,2,27,0],[13,8,27,6,"OVERLAP_EVENTS_SPACINGS"],[13,31,27,29],[13,34,27,32],[13,36,27,34],[14,2,28,0],[14,8,28,6,"RIGHT_EDGE_SPACING"],[14,26,28,24],[14,29,28,27],[14,31,28,29],[15,2,30,0],[15,11,30,9,"buildEvent"],[15,21,30,19,"buildEvent"],[15,22,31,2,"event"],[15,27,31,32],[15,29,32,2,"left"],[15,33,32,14],[15,35,33,2,"width"],[15,40,33,15],[15,42,34,2],[16,4,34,3,"dayStart"],[16,12,34,11],[16,15,34,14],[16,16,34,15],[17,4,34,17,"hourBlockHeight"],[17,19,34,32],[17,22,34,35,"HOUR_BLOCK_HEIGHT"],[18,2,34,69],[18,3,34,70],[18,5,35,15],[19,4,36,2],[19,10,36,8,"startTime"],[19,19,36,17],[19,22,36,20],[19,26,36,24,"XDate"],[19,40,36,29],[19,41,36,30,"event"],[19,46,36,35],[19,47,36,36,"start"],[19,52,36,41],[19,53,36,42],[20,4,37,2],[20,10,37,8,"endTime"],[20,17,37,15],[20,20,37,18,"event"],[20,25,37,23],[20,26,37,24,"end"],[20,29,37,27],[20,32,37,30],[20,36,37,34,"XDate"],[20,50,37,39],[20,51,37,40,"event"],[20,56,37,45],[20,57,37,46,"end"],[20,60,37,49],[20,61,37,50],[20,64,37,53],[20,68,37,57,"XDate"],[20,82,37,62],[20,83,37,63,"startTime"],[20,92,37,72],[20,93,37,73],[20,94,37,74,"addHours"],[20,102,37,82],[20,103,37,83],[20,104,37,84],[20,105,37,85],[21,4,39,2],[21,10,39,8,"dayStartTime"],[21,22,39,20],[21,25,39,23],[21,29,39,27,"XDate"],[21,43,39,32],[21,44,39,33,"startTime"],[21,53,39,42],[21,54,39,43],[21,55,39,44,"clearTime"],[21,64,39,53],[21,65,39,54],[21,66,39,55],[22,4,41,2],[22,11,41,9],[23,6,42,4],[23,9,42,7,"event"],[23,14,42,12],[24,6,43,4,"top"],[24,9,43,7],[24,11,43,9],[24,12,43,10,"dayStartTime"],[24,24,43,22],[24,25,43,23,"diffHours"],[24,34,43,32],[24,35,43,33,"startTime"],[24,44,43,42],[24,45,43,43],[24,48,43,46,"dayStart"],[24,56,43,54],[24,60,43,58,"hourBlockHeight"],[24,75,43,73],[25,6,44,4,"height"],[25,12,44,10],[25,14,44,12,"startTime"],[25,23,44,21],[25,24,44,22,"diffHours"],[25,33,44,31],[25,34,44,32,"endTime"],[25,41,44,39],[25,42,44,40],[25,45,44,43,"hourBlockHeight"],[25,60,44,58],[26,6,45,4,"width"],[26,11,45,9],[27,6,46,4,"left"],[28,4,47,2],[28,5,47,3],[29,2,48,0],[30,2,50,0],[30,11,50,9,"hasCollision"],[30,23,50,21,"hasCollision"],[30,24,50,22,"a"],[30,25,50,30],[30,27,50,32,"b"],[30,28,50,40],[30,30,50,42],[31,4,51,2],[31,11,51,9,"a"],[31,12,51,10],[31,13,51,11,"end"],[31,16,51,14],[31,19,51,17,"b"],[31,20,51,18],[31,21,51,19,"start"],[31,26,51,24],[31,30,51,28,"a"],[31,31,51,29],[31,32,51,30,"start"],[31,37,51,35],[31,40,51,38,"b"],[31,41,51,39],[31,42,51,40,"end"],[31,45,51,43],[32,2,52,0],[33,2,54,0],[33,11,54,9,"calcColumnSpan"],[33,25,54,23,"calcColumnSpan"],[33,26,54,24,"event"],[33,31,54,36],[33,33,54,38,"columnIndex"],[33,44,54,57],[33,46,54,59,"columns"],[33,53,54,77],[33,55,54,79],[34,4,55,2],[34,8,55,6,"colSpan"],[34,15,55,13],[34,18,55,16],[34,19,55,17],[35,4,57,2],[35,9,57,7],[35,13,57,11,"i"],[35,14,57,12],[35,17,57,15,"columnIndex"],[35,28,57,26],[35,31,57,29],[35,32,57,30],[35,34,57,32,"i"],[35,35,57,33],[35,38,57,36,"columns"],[35,45,57,43],[35,46,57,44,"length"],[35,52,57,50],[35,54,57,52,"i"],[35,55,57,53],[35,57,57,55],[35,59,57,57],[36,6,58,4],[36,12,58,10,"column"],[36,18,58,16],[36,21,58,19,"columns"],[36,28,58,26],[36,29,58,27,"i"],[36,30,58,28],[36,31,58,29],[37,6,60,4],[37,12,60,10,"foundCollision"],[37,26,60,24],[37,29,60,27,"column"],[37,35,60,33],[37,36,60,34,"find"],[37,40,60,38],[37,41,60,39,"ev"],[37,43,60,41],[37,47,60,45,"hasCollision"],[37,59,60,57],[37,60,60,58,"event"],[37,65,60,63],[37,67,60,65,"ev"],[37,69,60,67],[37,70,60,68],[37,71,60,69],[38,6,61,4],[38,10,61,8,"foundCollision"],[38,24,61,22],[38,26,61,24],[39,8,62,6],[39,15,62,13,"colSpan"],[39,22,62,20],[40,6,63,4],[41,6,65,4,"colSpan"],[41,13,65,11],[41,15,65,13],[42,4,66,2],[43,4,68,2],[43,11,68,9,"colSpan"],[43,18,68,16],[44,2,69,0],[45,2,71,0],[45,11,71,9,"packOverlappingEventGroup"],[45,36,71,34,"packOverlappingEventGroup"],[45,37,72,2,"columns"],[45,44,72,33],[45,46,73,2,"calculatedEvents"],[45,62,73,33],[45,64,74,2,"populateOptions"],[45,79,74,34],[45,81,75,2],[46,4,76,2],[46,10,76,8],[47,6,77,4,"screenWidth"],[47,17,77,15],[47,20,77,18,"constants"],[47,38,77,27],[47,39,77,28,"screenWidth"],[47,50,77,39],[48,6,78,4,"rightEdgeSpacing"],[48,22,78,20],[48,25,78,23,"RIGHT_EDGE_SPACING"],[48,43,78,41],[49,6,79,4,"overlapEventsSpacing"],[49,26,79,24],[49,29,79,27,"OVERLAP_EVENTS_SPACINGS"],[50,4,80,2],[50,5,80,3],[50,8,80,6,"populateOptions"],[50,23,80,21],[51,4,81,2,"columns"],[51,11,81,9],[51,12,81,10,"forEach"],[51,19,81,17],[51,20,81,18],[51,21,81,19,"column"],[51,27,81,25],[51,29,81,27,"columnIndex"],[51,40,81,38],[51,45,81,43],[52,6,82,4,"column"],[52,12,82,10],[52,13,82,11,"forEach"],[52,20,82,18],[52,21,82,19,"event"],[52,26,82,24],[52,30,82,28],[53,8,83,6],[53,14,83,12,"totalWidth"],[53,24,83,22],[53,27,83,25,"screenWidth"],[53,38,83,36],[53,41,83,39,"rightEdgeSpacing"],[53,57,83,55],[54,8,84,6],[54,14,84,12,"columnSpan"],[54,24,84,22],[54,27,84,25,"calcColumnSpan"],[54,41,84,39],[54,42,84,40,"event"],[54,47,84,45],[54,49,84,47,"columnIndex"],[54,60,84,58],[54,62,84,60,"columns"],[54,69,84,67],[54,70,84,68],[55,8,85,6],[55,14,85,12,"eventLeft"],[55,23,85,21],[55,26,85,25,"columnIndex"],[55,37,85,36],[55,40,85,39,"columns"],[55,47,85,46],[55,48,85,47,"length"],[55,54,85,53],[55,57,85,57,"totalWidth"],[55,67,85,67],[56,8,86,6],[56,12,86,10,"eventWidth"],[56,22,86,20],[56,25,86,23,"totalWidth"],[56,35,86,33],[56,39,86,37,"columnSpan"],[56,49,86,47],[56,52,86,50,"columns"],[56,59,86,57],[56,60,86,58,"length"],[56,66,86,64],[56,67,86,65],[57,8,88,6],[57,12,88,10,"columnIndex"],[57,23,88,21],[57,26,88,24,"columnSpan"],[57,36,88,34],[57,40,88,38,"columns"],[57,47,88,45],[57,48,88,46,"length"],[57,54,88,52],[57,57,88,55],[57,58,88,56],[57,60,88,58],[58,10,89,8,"eventWidth"],[58,20,89,18],[58,24,89,22,"overlapEventsSpacing"],[58,44,89,42],[59,8,90,6],[60,8,92,6,"calculatedEvents"],[60,24,92,22],[60,25,92,23,"push"],[60,29,92,27],[60,30,92,28,"buildEvent"],[60,40,92,38],[60,41,92,39,"event"],[60,46,92,44],[60,48,92,46,"eventLeft"],[60,57,92,55],[60,59,92,57,"eventWidth"],[60,69,92,67],[60,71,92,69,"populateOptions"],[60,86,92,84],[60,87,92,85],[60,88,92,86],[61,6,93,4],[61,7,93,5],[61,8,93,6],[62,4,94,2],[62,5,94,3],[62,6,94,4],[63,2,95,0],[64,2,97,7],[64,11,97,16,"populateEvents"],[64,25,97,30,"populateEvents"],[64,26,97,31,"_events"],[64,33,97,47],[64,35,97,49,"populateOptions"],[64,50,97,81],[64,52,97,83],[65,4,98,2],[65,8,98,6,"lastEnd"],[65,15,98,28],[65,18,98,31],[65,22,98,35],[66,4,99,2],[66,8,99,6,"columns"],[66,15,99,37],[66,18,99,40],[66,20,99,42],[67,4,100,2],[67,10,100,8,"calculatedEvents"],[67,26,100,39],[67,29,100,42],[67,31,100,44],[68,4,102,2],[68,10,102,8,"events"],[68,16,102,36],[68,19,102,39,"_events"],[68,26,102,46],[68,27,103,5,"map"],[68,30,103,8],[68,31,103,9],[68,32,103,10,"ev"],[68,34,103,19],[68,36,103,21,"index"],[68,41,103,34],[68,47,103,40],[69,6,103,41],[69,9,103,44,"ev"],[69,11,103,46],[70,6,103,48,"index"],[70,11,103,53],[70,13,103,55,"index"],[71,4,103,60],[71,5,103,61],[71,6,103,62],[71,7,103,63],[71,8,104,5,"sort"],[71,12,104,9],[71,13,104,10],[71,23,104,20,"a"],[71,24,104,28],[71,26,104,30,"b"],[71,27,104,38],[71,29,104,40],[72,6,105,6],[72,10,105,10,"a"],[72,11,105,11],[72,12,105,12,"start"],[72,17,105,17],[72,20,105,20,"b"],[72,21,105,21],[72,22,105,22,"start"],[72,27,105,27],[72,29,105,29],[72,36,105,36],[72,37,105,37],[72,38,105,38],[73,6,106,6],[73,10,106,10,"a"],[73,11,106,11],[73,12,106,12,"start"],[73,17,106,17],[73,20,106,20,"b"],[73,21,106,21],[73,22,106,22,"start"],[73,27,106,27],[73,29,106,29],[73,36,106,36],[73,37,106,37],[74,6,107,6],[74,10,107,10,"a"],[74,11,107,11],[74,12,107,12,"end"],[74,15,107,15],[74,18,107,18,"b"],[74,19,107,19],[74,20,107,20,"end"],[74,23,107,23],[74,25,107,25],[74,32,107,32],[74,33,107,33],[74,34,107,34],[75,6,108,6],[75,10,108,10,"a"],[75,11,108,11],[75,12,108,12,"end"],[75,15,108,15],[75,18,108,18,"b"],[75,19,108,19],[75,20,108,20,"end"],[75,23,108,23],[75,25,108,25],[75,32,108,32],[75,33,108,33],[76,6,109,6],[76,13,109,13],[76,14,109,14],[77,4,110,4],[77,5,110,5],[77,6,110,6],[78,4,112,2,"events"],[78,10,112,8],[78,11,112,9,"forEach"],[78,18,112,16],[78,19,112,17],[78,29,112,27,"ev"],[78,31,112,29],[78,33,112,31],[79,6,113,4],[80,6,114,4],[80,10,114,8,"lastEnd"],[80,17,114,15],[80,22,114,20],[80,26,114,24],[80,30,114,28,"ev"],[80,32,114,30],[80,33,114,31,"start"],[80,38,114,36],[80,42,114,40,"lastEnd"],[80,49,114,47],[80,51,114,49],[81,8,115,6,"packOverlappingEventGroup"],[81,33,115,31],[81,34,115,32,"columns"],[81,41,115,39],[81,43,115,41,"calculatedEvents"],[81,59,115,57],[81,61,115,59,"populateOptions"],[81,76,115,74],[81,77,115,75],[82,8,116,6,"columns"],[82,15,116,13],[82,18,116,16],[82,20,116,18],[83,8,117,6,"lastEnd"],[83,15,117,13],[83,18,117,16],[83,22,117,20],[84,6,118,4],[86,6,120,4],[87,6,121,4],[87,10,121,8,"placed"],[87,16,121,14],[87,19,121,17],[87,24,121,22],[88,6,122,4],[88,11,122,9],[88,15,122,13,"i"],[88,16,122,14],[88,19,122,17],[88,20,122,18],[88,22,122,20,"i"],[88,23,122,21],[88,26,122,24,"columns"],[88,33,122,31],[88,34,122,32,"length"],[88,40,122,38],[88,42,122,40,"i"],[88,43,122,41],[88,45,122,43],[88,47,122,45],[89,8,123,6],[89,14,123,12,"col"],[89,17,123,15],[89,20,123,18,"columns"],[89,27,123,25],[89,28,123,26,"i"],[89,29,123,27],[89,30,123,28],[90,8,124,6],[90,12,124,10],[90,13,124,11,"hasCollision"],[90,25,124,23],[90,26,124,24,"col"],[90,29,124,27],[90,30,124,28,"col"],[90,33,124,31],[90,34,124,32,"length"],[90,40,124,38],[90,43,124,41],[90,44,124,42],[90,45,124,43],[90,47,124,45,"ev"],[90,49,124,47],[90,50,124,48],[90,52,124,50],[91,10,125,8,"col"],[91,13,125,11],[91,14,125,12,"push"],[91,18,125,16],[91,19,125,17,"ev"],[91,21,125,19],[91,22,125,20],[92,10,126,8,"placed"],[92,16,126,14],[92,19,126,17],[92,23,126,21],[93,10,127,8],[94,8,128,6],[95,6,129,4],[97,6,131,4],[98,6,132,4],[98,10,132,8],[98,11,132,9,"placed"],[98,17,132,15],[98,19,132,17],[99,8,133,6,"columns"],[99,15,133,13],[99,16,133,14,"push"],[99,20,133,18],[99,21,133,19],[99,22,133,20,"ev"],[99,24,133,22],[99,25,133,23],[99,26,133,24],[100,6,134,4],[101,6,136,4],[101,10,136,8,"lastEnd"],[101,17,136,15],[101,22,136,20],[101,26,136,24],[101,30,136,28,"ev"],[101,32,136,30],[101,33,136,31,"end"],[101,36,136,34],[101,39,136,37,"lastEnd"],[101,46,136,44],[101,48,136,46],[102,8,137,6,"lastEnd"],[102,15,137,13],[102,18,137,16,"ev"],[102,20,137,18],[102,21,137,19,"end"],[102,24,137,22],[103,6,138,4],[104,4,139,2],[104,5,139,3],[104,6,139,4],[105,4,141,2],[105,8,141,6,"columns"],[105,15,141,13],[105,16,141,14,"length"],[105,22,141,20],[105,25,141,23],[105,26,141,24],[105,28,141,26],[106,6,142,4,"packOverlappingEventGroup"],[106,31,142,29],[106,32,142,30,"columns"],[106,39,142,37],[106,41,142,39,"calculatedEvents"],[106,57,142,55],[106,59,142,57,"populateOptions"],[106,74,142,72],[106,75,142,73],[107,4,143,2],[108,4,145,2],[108,11,145,9,"calculatedEvents"],[108,27,145,25],[109,2,146,0],[110,2,148,7],[110,11,148,16,"buildUnavailableHoursBlocks"],[110,38,148,43,"buildUnavailableHoursBlocks"],[110,39,149,2,"unavailableHours"],[110,55,149,38],[110,58,149,41],[110,60,149,43],[110,62,150,2,"options"],[110,69,150,34],[110,71,151,2],[111,4,152,2],[111,10,152,8],[112,6,152,9,"hourBlockHeight"],[112,21,152,24],[112,24,152,27,"HOUR_BLOCK_HEIGHT"],[112,41,152,44],[113,6,152,46,"dayStart"],[113,14,152,54],[113,17,152,57],[113,18,152,58],[114,6,152,60,"dayEnd"],[114,12,152,66],[114,15,152,69],[115,4,152,71],[115,5,152,72],[115,8,152,75,"options"],[115,15,152,82],[115,19,152,86],[115,20,152,87],[115,21,152,88],[116,4,153,2],[116,10,153,8,"totalDayHours"],[116,23,153,21],[116,26,153,24,"dayEnd"],[116,32,153,30],[116,35,153,33,"dayStart"],[116,43,153,41],[117,4,154,2],[117,10,154,8,"totalDayHeight"],[117,24,154,22],[117,27,154,25],[117,28,154,26,"dayEnd"],[117,34,154,32],[117,37,154,35,"dayStart"],[117,45,154,43],[117,49,154,47,"hourBlockHeight"],[117,64,154,62],[118,4,155,2],[118,11,156,4,"unavailableHours"],[118,27,156,20],[118,28,157,7,"map"],[118,31,157,10],[118,32,157,11,"hours"],[118,37,157,16],[118,41,157,20],[119,6,158,8],[119,10,158,12],[119,11,158,13],[119,15,158,13,"inRange"],[119,31,158,20],[119,33,158,21,"hours"],[119,38,158,26],[119,39,158,27,"start"],[119,44,158,32],[119,46,158,34],[119,47,158,35],[119,49,158,37],[119,51,158,39],[119,52,158,40],[119,56,158,44],[119,57,158,45],[119,61,158,45,"inRange"],[119,77,158,52],[119,79,158,53,"hours"],[119,84,158,58],[119,85,158,59,"end"],[119,88,158,62],[119,90,158,64],[119,91,158,65],[119,93,158,67],[119,95,158,69],[119,96,158,70],[119,98,158,72],[120,8,159,10,"console"],[120,15,159,17],[120,16,159,18,"error"],[120,21,159,23],[120,22,159,24],[120,103,159,105],[120,104,159,106],[121,8,160,10],[121,15,160,17,"undefined"],[121,24,160,26],[122,6,161,8],[123,6,163,8],[123,10,163,12,"hours"],[123,15,163,17],[123,16,163,18,"start"],[123,21,163,23],[123,25,163,27,"hours"],[123,30,163,32],[123,31,163,33,"end"],[123,34,163,36],[123,36,163,38],[124,8,164,10,"console"],[124,15,164,17],[124,16,164,18,"error"],[124,21,164,23],[124,22,164,24],[124,111,164,113],[124,112,164,114],[125,8,165,10],[125,15,165,17,"undefined"],[125,24,165,26],[126,6,166,8],[127,6,168,8],[127,12,168,14,"startFixed"],[127,22,168,24],[127,25,168,27,"Math"],[127,29,168,31],[127,30,168,32,"max"],[127,33,168,35],[127,34,168,36,"hours"],[127,39,168,41],[127,40,168,42,"start"],[127,45,168,47],[127,47,168,49,"dayStart"],[127,55,168,57],[127,56,168,58],[128,6,169,8],[128,12,169,14,"endFixed"],[128,20,169,22],[128,23,169,25,"Math"],[128,27,169,29],[128,28,169,30,"min"],[128,31,169,33],[128,32,169,34,"hours"],[128,37,169,39],[128,38,169,40,"end"],[128,41,169,43],[128,43,169,45,"dayEnd"],[128,49,169,51],[128,50,169,52],[129,6,171,8],[129,13,171,15],[130,8,172,10,"top"],[130,11,172,13],[130,13,172,16],[130,14,172,17,"startFixed"],[130,24,172,27],[130,27,172,30,"dayStart"],[130,35,172,38],[130,39,172,42,"totalDayHours"],[130,52,172,55],[130,55,172,59,"totalDayHeight"],[130,69,172,73],[131,8,173,10,"height"],[131,14,173,16],[131,16,173,18],[131,17,173,19,"endFixed"],[131,25,173,27],[131,28,173,30,"startFixed"],[131,38,173,40],[131,42,173,44,"hourBlockHeight"],[132,6,174,8],[132,7,174,9],[133,4,175,6],[133,5,175,7],[134,4,176,6],[135,4,176,6],[135,5,177,7,"filter"],[135,11,177,13],[135,12,177,14,"Boolean"],[135,19,177,21],[135,20,177,22],[136,2,179,0],[137,0,179,1],[137,3]],"functionMap":{"names":["<global>","buildEvent","hasCollision","calcColumnSpan","column.find$argument_0","packOverlappingEventGroup","columns.forEach$argument_0","column.forEach$argument_0","populateEvents","_events.map$argument_0","_events.map.sort$argument_0","events.forEach$argument_0","buildUnavailableHoursBlocks","unavailableHours.map$argument_0"],"mappings":"AAA;AC6B;CDkB;AEE;CFE;AGE;uCCM,6BD;CHS;AKE;kBCU;mBCC;KDW;GDC;CLC;OQE;SCM,qDD;UEC;KFM;iBGE;GH2B;CRO;OYE;WCS;ODkB;CZI"}},"type":"js/module"}]}