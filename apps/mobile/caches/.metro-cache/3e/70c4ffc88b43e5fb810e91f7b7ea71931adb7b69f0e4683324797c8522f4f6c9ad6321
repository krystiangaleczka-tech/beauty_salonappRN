{"dependencies":[{"name":"./isSymbol","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":15,"index":15},"end":{"line":1,"column":36,"index":36}}],"key":"6Wkf7dHKQf1c2b4lNT0/hc4L5ck=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var isSymbol = require(_dependencyMap[0], \"./isSymbol\");\n\n  /**\n   * The base implementation of methods like `_.max` and `_.min` which accepts a\n   * `comparator` to determine the extremum value.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The iteratee invoked per iteration.\n   * @param {Function} comparator The comparator used to compare values.\n   * @returns {*} Returns the extremum value.\n   */\n  function baseExtremum(array, iteratee, comparator) {\n    var index = -1,\n      length = array.length;\n    while (++index < length) {\n      var value = array[index],\n        current = iteratee(value);\n      if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {\n        var computed = current,\n          result = value;\n      }\n    }\n    return result;\n  }\n  module.exports = baseExtremum;\n});","lineCount":28,"map":[[2,2,1,0],[2,6,1,4,"isSymbol"],[2,14,1,12],[2,17,1,15,"require"],[2,24,1,22],[2,25,1,22,"_dependencyMap"],[2,39,1,22],[2,56,1,35],[2,57,1,36],[4,2,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,2,13,0],[14,11,13,9,"baseExtremum"],[14,23,13,21,"baseExtremum"],[14,24,13,22,"array"],[14,29,13,27],[14,31,13,29,"iteratee"],[14,39,13,37],[14,41,13,39,"comparator"],[14,51,13,49],[14,53,13,51],[15,4,14,2],[15,8,14,6,"index"],[15,13,14,11],[15,16,14,14],[15,17,14,15],[15,18,14,16],[16,6,15,6,"length"],[16,12,15,12],[16,15,15,15,"array"],[16,20,15,20],[16,21,15,21,"length"],[16,27,15,27],[17,4,17,2],[17,11,17,9],[17,13,17,11,"index"],[17,18,17,16],[17,21,17,19,"length"],[17,27,17,25],[17,29,17,27],[18,6,18,4],[18,10,18,8,"value"],[18,15,18,13],[18,18,18,16,"array"],[18,23,18,21],[18,24,18,22,"index"],[18,29,18,27],[18,30,18,28],[19,8,19,8,"current"],[19,15,19,15],[19,18,19,18,"iteratee"],[19,26,19,26],[19,27,19,27,"value"],[19,32,19,32],[19,33,19,33],[20,6,21,4],[20,10,21,8,"current"],[20,17,21,15],[20,21,21,19],[20,25,21,23],[20,30,21,28,"computed"],[20,38,21,36],[20,43,21,41,"undefined"],[20,52,21,50],[20,55,22,13,"current"],[20,62,22,20],[20,67,22,25,"current"],[20,74,22,32],[20,78,22,36],[20,79,22,37,"isSymbol"],[20,87,22,45],[20,88,22,46,"current"],[20,95,22,53],[20,96,22,54],[20,99,23,12,"comparator"],[20,109,23,22],[20,110,23,23,"current"],[20,117,23,30],[20,119,23,32,"computed"],[20,127,23,40],[20,128,23,41],[20,129,24,9],[20,131,24,11],[21,8,25,6],[21,12,25,10,"computed"],[21,20,25,18],[21,23,25,21,"current"],[21,30,25,28],[22,10,26,10,"result"],[22,16,26,16],[22,19,26,19,"value"],[22,24,26,24],[23,6,27,4],[24,4,28,2],[25,4,29,2],[25,11,29,9,"result"],[25,17,29,15],[26,2,30,0],[27,2,32,0,"module"],[27,8,32,6],[27,9,32,7,"exports"],[27,16,32,14],[27,19,32,17,"baseExtremum"],[27,31,32,29],[28,0,32,30],[28,3]],"functionMap":{"names":["<global>","baseExtremum"],"mappings":"AAA;ACY;CDiB"},"hasCjsExports":true},"type":"js/module"}]}