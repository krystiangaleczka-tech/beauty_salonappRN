{"dependencies":[{"name":"expo-font","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":38,"index":38}}],"key":"2pRvmGok3jynt0eNgZSF3SdmQzk=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":39},"end":{"line":2,"column":44,"index":83}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.useFonts = useFonts;\n  var _expoFont = require(_dependencyMap[0], \"expo-font\");\n  var _react = require(_dependencyMap[1], \"react\");\n  /**\n   * Load a map of custom fonts to use in textual elements.\n   * The map keys are used as font names, and can be used with `fontFamily: <name>;`.\n   * It returns a boolean describing if all fonts are loaded.\n   *\n   * Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n   *\n   * @see https://docs.expo.io/versions/latest/sdk/font/\n   * @example const [loaded, error] = useFonts(...);\n   */\n  function useFonts(map) {\n    const [loaded, setLoaded] = (0, _react.useState)(false);\n    const [error, setError] = (0, _react.useState)(null);\n    (0, _react.useEffect)(() => {\n      (0, _expoFont.loadAsync)(map).then(() => setLoaded(true)).catch(setError);\n    }, []);\n    return [loaded, error];\n  }\n});","lineCount":28,"map":[[7,2,14,0,"exports"],[7,9,14,0],[7,10,14,0,"useFonts"],[7,18,14,0],[7,21,14,0,"useFonts"],[7,29,14,0],[8,2,1,0],[8,6,1,0,"_expoFont"],[8,15,1,0],[8,18,1,0,"require"],[8,25,1,0],[8,26,1,0,"_dependencyMap"],[8,40,1,0],[9,2,2,0],[9,6,2,0,"_react"],[9,12,2,0],[9,15,2,0,"require"],[9,22,2,0],[9,23,2,0,"_dependencyMap"],[9,37,2,0],[10,2,4,0],[11,0,5,0],[12,0,6,0],[13,0,7,0],[14,0,8,0],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,0,13,0],[20,2,14,7],[20,11,14,16,"useFonts"],[20,19,14,24,"useFonts"],[20,20,14,25,"map"],[20,23,14,28],[20,25,14,30],[21,4,15,2],[21,10,15,8],[21,11,15,9,"loaded"],[21,17,15,15],[21,19,15,17,"setLoaded"],[21,28,15,26],[21,29,15,27],[21,32,15,30],[21,36,15,30,"useState"],[21,42,15,38],[21,43,15,38,"useState"],[21,51,15,38],[21,53,15,39],[21,58,15,44],[21,59,15,45],[22,4,16,2],[22,10,16,8],[22,11,16,9,"error"],[22,16,16,14],[22,18,16,16,"setError"],[22,26,16,24],[22,27,16,25],[22,30,16,28],[22,34,16,28,"useState"],[22,40,16,36],[22,41,16,36,"useState"],[22,49,16,36],[22,51,16,37],[22,55,16,41],[22,56,16,42],[23,4,18,2],[23,8,18,2,"useEffect"],[23,14,18,11],[23,15,18,11,"useEffect"],[23,24,18,11],[23,26,18,12],[23,32,18,18],[24,6,19,4],[24,10,19,4,"loadAsync"],[24,19,19,13],[24,20,19,13,"loadAsync"],[24,29,19,13],[24,31,19,14,"map"],[24,34,19,17],[24,35,19,18],[24,36,20,7,"then"],[24,40,20,11],[24,41,20,12],[24,47,20,18,"setLoaded"],[24,56,20,27],[24,57,20,28],[24,61,20,32],[24,62,20,33],[24,63,20,34],[24,64,21,7,"catch"],[24,69,21,12],[24,70,21,13,"setError"],[24,78,21,21],[24,79,21,22],[25,4,22,2],[25,5,22,3],[25,7,22,5],[25,9,22,7],[25,10,22,8],[26,4,24,2],[26,11,24,9],[26,12,24,10,"loaded"],[26,18,24,16],[26,20,24,18,"error"],[26,25,24,23],[26,26,24,24],[27,2,25,0],[28,0,25,1],[28,3]],"functionMap":{"names":["<global>","useFonts","useEffect$argument_0","loadAsync.then$argument_0"],"mappings":"AAA;OCa;YCI;YCE,qBD;GDE;CDG"},"hasCjsExports":false},"type":"js/module"}]}