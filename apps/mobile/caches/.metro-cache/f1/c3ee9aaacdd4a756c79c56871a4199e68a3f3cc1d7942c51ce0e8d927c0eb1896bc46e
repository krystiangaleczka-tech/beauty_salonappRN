{"dependencies":[{"name":"./isArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":14,"index":14},"end":{"line":1,"column":34,"index":34}}],"key":"cpLl3Nq+ZgzwmgESYQ2NCH3CqEk=","exportNames":["*"]}},{"name":"./isSymbol","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":15,"index":51},"end":{"line":2,"column":36,"index":72}}],"key":"6Wkf7dHKQf1c2b4lNT0/hc4L5ck=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var isArray = require(_dependencyMap[0], \"./isArray\"),\n    isSymbol = require(_dependencyMap[1], \"./isSymbol\");\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n  /**\n   * Checks if `value` is a property name and not a property path.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {Object} [object] The object to query keys on.\n   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n   */\n  function isKey(value, object) {\n    if (isArray(value)) {\n      return false;\n    }\n    var type = typeof value;\n    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {\n      return true;\n    }\n    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\n  }\n  module.exports = isKey;\n});","lineCount":28,"map":[[2,2,1,0],[2,6,1,4,"isArray"],[2,13,1,11],[2,16,1,14,"require"],[2,23,1,21],[2,24,1,21,"_dependencyMap"],[2,38,1,21],[2,54,1,33],[2,55,1,34],[3,4,2,4,"isSymbol"],[3,12,2,12],[3,15,2,15,"require"],[3,22,2,22],[3,23,2,22,"_dependencyMap"],[3,37,2,22],[3,54,2,35],[3,55,2,36],[5,2,4,0],[6,2,5,0],[6,6,5,4,"reIsDeepProp"],[6,18,5,16],[6,21,5,19],[6,71,5,69],[7,4,6,4,"reIsPlainProp"],[7,17,6,17],[7,20,6,20],[7,27,6,27],[9,2,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,2,16,0],[17,11,16,9,"isKey"],[17,16,16,14,"isKey"],[17,17,16,15,"value"],[17,22,16,20],[17,24,16,22,"object"],[17,30,16,28],[17,32,16,30],[18,4,17,2],[18,8,17,6,"isArray"],[18,15,17,13],[18,16,17,14,"value"],[18,21,17,19],[18,22,17,20],[18,24,17,22],[19,6,18,4],[19,13,18,11],[19,18,18,16],[20,4,19,2],[21,4,20,2],[21,8,20,6,"type"],[21,12,20,10],[21,15,20,13],[21,22,20,20,"value"],[21,27,20,25],[22,4,21,2],[22,8,21,6,"type"],[22,12,21,10],[22,16,21,14],[22,24,21,22],[22,28,21,26,"type"],[22,32,21,30],[22,36,21,34],[22,44,21,42],[22,48,21,46,"type"],[22,52,21,50],[22,56,21,54],[22,65,21,63],[22,69,22,6,"value"],[22,74,22,11],[22,78,22,15],[22,82,22,19],[22,86,22,23,"isSymbol"],[22,94,22,31],[22,95,22,32,"value"],[22,100,22,37],[22,101,22,38],[22,103,22,40],[23,6,23,4],[23,13,23,11],[23,17,23,15],[24,4,24,2],[25,4,25,2],[25,11,25,9,"reIsPlainProp"],[25,24,25,22],[25,25,25,23,"test"],[25,29,25,27],[25,30,25,28,"value"],[25,35,25,33],[25,36,25,34],[25,40,25,38],[25,41,25,39,"reIsDeepProp"],[25,53,25,51],[25,54,25,52,"test"],[25,58,25,56],[25,59,25,57,"value"],[25,64,25,62],[25,65,25,63],[25,69,26,5,"object"],[25,75,26,11],[25,79,26,15],[25,83,26,19],[25,87,26,23,"value"],[25,92,26,28],[25,96,26,32,"Object"],[25,102,26,38],[25,103,26,39,"object"],[25,109,26,45],[25,110,26,47],[26,2,27,0],[27,2,29,0,"module"],[27,8,29,6],[27,9,29,7,"exports"],[27,16,29,14],[27,19,29,17,"isKey"],[27,24,29,22],[28,0,29,23],[28,3]],"functionMap":{"names":["<global>","isKey"],"mappings":"AAA;ACe;CDW"}},"type":"js/module"}]}