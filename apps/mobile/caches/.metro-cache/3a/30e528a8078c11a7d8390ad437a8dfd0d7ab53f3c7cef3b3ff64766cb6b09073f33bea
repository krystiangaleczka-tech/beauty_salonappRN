{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":49,"index":49}}],"key":"8R25577gwLd3n1hFG9VYnRLV9eE=","exportNames":["*"],"imports":1}},{"name":"hey-listen","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":50},"end":{"line":2,"column":39,"index":89}}],"key":"5p342VF2FjgsoIiIlnJV4kmYYFQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"cssVariableRegex\", {\n    enumerable: true,\n    get: function () {\n      return cssVariableRegex;\n    }\n  });\n  Object.defineProperty(exports, \"parseCSSVariable\", {\n    enumerable: true,\n    get: function () {\n      return parseCSSVariable;\n    }\n  });\n  Object.defineProperty(exports, \"resolveCSSVariables\", {\n    enumerable: true,\n    get: function () {\n      return resolveCSSVariables;\n    }\n  });\n  var _tslib = require(_dependencyMap[0], \"tslib\");\n  var _heyListen = require(_dependencyMap[1], \"hey-listen\");\n  function isCSSVariable(value) {\n    return typeof value === \"string\" && value.startsWith(\"var(--\");\n  }\n  /**\n   * Parse Framer's special CSS variable format into a CSS token and a fallback.\n   *\n   * ```\n   * `var(--foo, #fff)` => [`--foo`, '#fff']\n   * ```\n   *\n   * @param current\n   */\n  var cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\n  function parseCSSVariable(current) {\n    var match = cssVariableRegex.exec(current);\n    if (!match) return [,];\n    var _a = (0, _tslib.__read)(match, 3),\n      token = _a[1],\n      fallback = _a[2];\n    return [token, fallback];\n  }\n  var maxDepth = 4;\n  function getVariableValue(current, element, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n    (0, _heyListen.invariant)(depth <= maxDepth, \"Max CSS variable fallback depth detected in property \\\"\".concat(current, \"\\\". This may indicate a circular fallback dependency.\"));\n    var _a = (0, _tslib.__read)(parseCSSVariable(current), 2),\n      token = _a[0],\n      fallback = _a[1];\n    // No CSS variable detected\n    if (!token) return;\n    // Attempt to read this CSS variable off the element\n    var resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n      return resolved.trim();\n    } else if (isCSSVariable(fallback)) {\n      // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n      return getVariableValue(fallback, element, depth + 1);\n    } else {\n      return fallback;\n    }\n  }\n  /**\n   * Resolve CSS variables from\n   *\n   * @internal\n   */\n  function resolveCSSVariables(visualElement, _a, transitionEnd) {\n    var _b;\n    var target = (0, _tslib.__rest)(_a, []);\n    var element = visualElement.getInstance();\n    if (!(element instanceof Element)) return {\n      target: target,\n      transitionEnd: transitionEnd\n    };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n      transitionEnd = (0, _tslib.__assign)({}, transitionEnd);\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.forEachValue(function (value) {\n      var current = value.get();\n      if (!isCSSVariable(current)) return;\n      var resolved = getVariableValue(current, element);\n      if (resolved) value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (var key in target) {\n      var current = target[key];\n      if (!isCSSVariable(current)) continue;\n      var resolved = getVariableValue(current, element);\n      if (!resolved) continue;\n      // Clone target if it hasn't already been\n      target[key] = resolved;\n      // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n      // CSS variable. This will ensure that after the animation the component will reflect\n      // changes in the value of the CSS variable.\n      if (transitionEnd) (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : transitionEnd[key] = current;\n    }\n    return {\n      target: target,\n      transitionEnd: transitionEnd\n    };\n  }\n});","lineCount":114,"map":[[7,2,90,0,"Object"],[7,8,90,0],[7,9,90,0,"defineProperty"],[7,23,90,0],[7,24,90,0,"exports"],[7,31,90,0],[8,4,90,0,"enumerable"],[8,14,90,0],[9,4,90,0,"get"],[9,7,90,0],[9,18,90,0,"get"],[9,19,90,0],[10,6,90,0],[10,13,90,9,"cssVariableRegex"],[10,29,90,25],[11,4,90,25],[12,2,90,25],[13,2,90,0,"Object"],[13,8,90,0],[13,9,90,0,"defineProperty"],[13,23,90,0],[13,24,90,0,"exports"],[13,31,90,0],[14,4,90,0,"enumerable"],[14,14,90,0],[15,4,90,0,"get"],[15,7,90,0],[15,18,90,0,"get"],[15,19,90,0],[16,6,90,0],[16,13,90,27,"parseCSSVariable"],[16,29,90,43],[17,4,90,43],[18,2,90,43],[19,2,90,0,"Object"],[19,8,90,0],[19,9,90,0,"defineProperty"],[19,23,90,0],[19,24,90,0,"exports"],[19,31,90,0],[20,4,90,0,"enumerable"],[20,14,90,0],[21,4,90,0,"get"],[21,7,90,0],[21,18,90,0,"get"],[21,19,90,0],[22,6,90,0],[22,13,90,45,"resolveCSSVariables"],[22,32,90,64],[23,4,90,64],[24,2,90,64],[25,2,1,0],[25,6,1,0,"_tslib"],[25,12,1,0],[25,15,1,0,"require"],[25,22,1,0],[25,23,1,0,"_dependencyMap"],[25,37,1,0],[26,2,2,0],[26,6,2,0,"_heyListen"],[26,16,2,0],[26,19,2,0,"require"],[26,26,2,0],[26,27,2,0,"_dependencyMap"],[26,41,2,0],[27,2,4,0],[27,11,4,9,"isCSSVariable"],[27,24,4,22,"isCSSVariable"],[27,25,4,23,"value"],[27,30,4,28],[27,32,4,30],[28,4,5,4],[28,11,5,11],[28,18,5,18,"value"],[28,23,5,23],[28,28,5,28],[28,36,5,36],[28,40,5,40,"value"],[28,45,5,45],[28,46,5,46,"startsWith"],[28,56,5,56],[28,57,5,57],[28,65,5,65],[28,66,5,66],[29,2,6,0],[30,2,7,0],[31,0,8,0],[32,0,9,0],[33,0,10,0],[34,0,11,0],[35,0,12,0],[36,0,13,0],[37,0,14,0],[38,0,15,0],[39,2,16,0],[39,6,16,4,"cssVariableRegex"],[39,22,16,20],[39,25,16,23],[39,79,16,77],[40,2,17,0],[40,11,17,9,"parseCSSVariable"],[40,27,17,25,"parseCSSVariable"],[40,28,17,26,"current"],[40,35,17,33],[40,37,17,35],[41,4,18,4],[41,8,18,8,"match"],[41,13,18,13],[41,16,18,16,"cssVariableRegex"],[41,32,18,32],[41,33,18,33,"exec"],[41,37,18,37],[41,38,18,38,"current"],[41,45,18,45],[41,46,18,46],[42,4,19,4],[42,8,19,8],[42,9,19,9,"match"],[42,14,19,14],[42,16,20,8],[42,23,20,15],[42,26,20,18],[43,4,21,4],[43,8,21,8,"_a"],[43,10,21,10],[43,13,21,13],[43,17,21,13,"__read"],[43,23,21,19],[43,24,21,19,"__read"],[43,30,21,19],[43,32,21,20,"match"],[43,37,21,25],[43,39,21,27],[43,40,21,28],[43,41,21,29],[44,6,21,31,"token"],[44,11,21,36],[44,14,21,39,"_a"],[44,16,21,41],[44,17,21,42],[44,18,21,43],[44,19,21,44],[45,6,21,46,"fallback"],[45,14,21,54],[45,17,21,57,"_a"],[45,19,21,59],[45,20,21,60],[45,21,21,61],[45,22,21,62],[46,4,22,4],[46,11,22,11],[46,12,22,12,"token"],[46,17,22,17],[46,19,22,19,"fallback"],[46,27,22,27],[46,28,22,28],[47,2,23,0],[48,2,24,0],[48,6,24,4,"maxDepth"],[48,14,24,12],[48,17,24,15],[48,18,24,16],[49,2,25,0],[49,11,25,9,"getVariableValue"],[49,27,25,25,"getVariableValue"],[49,28,25,26,"current"],[49,35,25,33],[49,37,25,35,"element"],[49,44,25,42],[49,46,25,44,"depth"],[49,51,25,49],[49,53,25,51],[50,4,26,4],[50,8,26,8,"depth"],[50,13,26,13],[50,18,26,18],[50,23,26,23],[50,24,26,24],[50,26,26,26],[51,6,26,28,"depth"],[51,11,26,33],[51,14,26,36],[51,15,26,37],[52,4,26,39],[53,4,27,4],[53,8,27,4,"invariant"],[53,18,27,13],[53,19,27,13,"invariant"],[53,28,27,13],[53,30,27,14,"depth"],[53,35,27,19],[53,39,27,23,"maxDepth"],[53,47,27,31],[53,49,27,33],[53,106,27,90],[53,107,27,91,"concat"],[53,113,27,97],[53,114,27,98,"current"],[53,121,27,105],[53,123,27,107],[53,178,27,162],[53,179,27,163],[53,180,27,164],[54,4,28,4],[54,8,28,8,"_a"],[54,10,28,10],[54,13,28,13],[54,17,28,13,"__read"],[54,23,28,19],[54,24,28,19,"__read"],[54,30,28,19],[54,32,28,20,"parseCSSVariable"],[54,48,28,36],[54,49,28,37,"current"],[54,56,28,44],[54,57,28,45],[54,59,28,47],[54,60,28,48],[54,61,28,49],[55,6,28,51,"token"],[55,11,28,56],[55,14,28,59,"_a"],[55,16,28,61],[55,17,28,62],[55,18,28,63],[55,19,28,64],[56,6,28,66,"fallback"],[56,14,28,74],[56,17,28,77,"_a"],[56,19,28,79],[56,20,28,80],[56,21,28,81],[56,22,28,82],[57,4,29,4],[58,4,30,4],[58,8,30,8],[58,9,30,9,"token"],[58,14,30,14],[58,16,31,8],[59,4,32,4],[60,4,33,4],[60,8,33,8,"resolved"],[60,16,33,16],[60,19,33,19,"window"],[60,25,33,25],[60,26,33,26,"getComputedStyle"],[60,42,33,42],[60,43,33,43,"element"],[60,50,33,50],[60,51,33,51],[60,52,33,52,"getPropertyValue"],[60,68,33,68],[60,69,33,69,"token"],[60,74,33,74],[60,75,33,75],[61,4,34,4],[61,8,34,8,"resolved"],[61,16,34,16],[61,18,34,18],[62,6,35,8],[62,13,35,15,"resolved"],[62,21,35,23],[62,22,35,24,"trim"],[62,26,35,28],[62,27,35,29],[62,28,35,30],[63,4,36,4],[63,5,36,5],[63,11,37,9],[63,15,37,13,"isCSSVariable"],[63,28,37,26],[63,29,37,27,"fallback"],[63,37,37,35],[63,38,37,36],[63,40,37,38],[64,6,38,8],[65,6,39,8],[65,13,39,15,"getVariableValue"],[65,29,39,31],[65,30,39,32,"fallback"],[65,38,39,40],[65,40,39,42,"element"],[65,47,39,49],[65,49,39,51,"depth"],[65,54,39,56],[65,57,39,59],[65,58,39,60],[65,59,39,61],[66,4,40,4],[66,5,40,5],[66,11,41,9],[67,6,42,8],[67,13,42,15,"fallback"],[67,21,42,23],[68,4,43,4],[69,2,44,0],[70,2,45,0],[71,0,46,0],[72,0,47,0],[73,0,48,0],[74,0,49,0],[75,2,50,0],[75,11,50,9,"resolveCSSVariables"],[75,30,50,28,"resolveCSSVariables"],[75,31,50,29,"visualElement"],[75,44,50,42],[75,46,50,44,"_a"],[75,48,50,46],[75,50,50,48,"transitionEnd"],[75,63,50,61],[75,65,50,63],[76,4,51,4],[76,8,51,8,"_b"],[76,10,51,10],[77,4,52,4],[77,8,52,8,"target"],[77,14,52,14],[77,17,52,17],[77,21,52,17,"__rest"],[77,27,52,23],[77,28,52,23,"__rest"],[77,34,52,23],[77,36,52,24,"_a"],[77,38,52,26],[77,40,52,28],[77,42,52,30],[77,43,52,31],[78,4,53,4],[78,8,53,8,"element"],[78,15,53,15],[78,18,53,18,"visualElement"],[78,31,53,31],[78,32,53,32,"getInstance"],[78,43,53,43],[78,44,53,44],[78,45,53,45],[79,4,54,4],[79,8,54,8],[79,10,54,10,"element"],[79,17,54,17],[79,29,54,29,"Element"],[79,36,54,36],[79,37,54,37],[79,39,55,8],[79,46,55,15],[80,6,55,17,"target"],[80,12,55,23],[80,14,55,25,"target"],[80,20,55,31],[81,6,55,33,"transitionEnd"],[81,19,55,46],[81,21,55,48,"transitionEnd"],[82,4,55,62],[82,5,55,63],[83,4,56,4],[84,4,57,4],[85,4,58,4],[85,8,58,8,"transitionEnd"],[85,21,58,21],[85,23,58,23],[86,6,59,8,"transitionEnd"],[86,19,59,21],[86,22,59,24],[86,26,59,24,"__assign"],[86,32,59,32],[86,33,59,32,"__assign"],[86,41,59,32],[86,43,59,33],[86,44,59,34],[86,45,59,35],[86,47,59,37,"transitionEnd"],[86,60,59,50],[86,61,59,51],[87,4,60,4],[88,4,61,4],[89,4,62,4,"visualElement"],[89,17,62,17],[89,18,62,18,"forEachValue"],[89,30,62,30],[89,31,62,31],[89,41,62,41,"value"],[89,46,62,46],[89,48,62,48],[90,6,63,8],[90,10,63,12,"current"],[90,17,63,19],[90,20,63,22,"value"],[90,25,63,27],[90,26,63,28,"get"],[90,29,63,31],[90,30,63,32],[90,31,63,33],[91,6,64,8],[91,10,64,12],[91,11,64,13,"isCSSVariable"],[91,24,64,26],[91,25,64,27,"current"],[91,32,64,34],[91,33,64,35],[91,35,65,12],[92,6,66,8],[92,10,66,12,"resolved"],[92,18,66,20],[92,21,66,23,"getVariableValue"],[92,37,66,39],[92,38,66,40,"current"],[92,45,66,47],[92,47,66,49,"element"],[92,54,66,56],[92,55,66,57],[93,6,67,8],[93,10,67,12,"resolved"],[93,18,67,20],[93,20,68,12,"value"],[93,25,68,17],[93,26,68,18,"set"],[93,29,68,21],[93,30,68,22,"resolved"],[93,38,68,30],[93,39,68,31],[94,4,69,4],[94,5,69,5],[94,6,69,6],[95,4,70,4],[96,4,71,4],[97,4,72,4],[97,9,72,9],[97,13,72,13,"key"],[97,16,72,16],[97,20,72,20,"target"],[97,26,72,26],[97,28,72,28],[98,6,73,8],[98,10,73,12,"current"],[98,17,73,19],[98,20,73,22,"target"],[98,26,73,28],[98,27,73,29,"key"],[98,30,73,32],[98,31,73,33],[99,6,74,8],[99,10,74,12],[99,11,74,13,"isCSSVariable"],[99,24,74,26],[99,25,74,27,"current"],[99,32,74,34],[99,33,74,35],[99,35,75,12],[100,6,76,8],[100,10,76,12,"resolved"],[100,18,76,20],[100,21,76,23,"getVariableValue"],[100,37,76,39],[100,38,76,40,"current"],[100,45,76,47],[100,47,76,49,"element"],[100,54,76,56],[100,55,76,57],[101,6,77,8],[101,10,77,12],[101,11,77,13,"resolved"],[101,19,77,21],[101,21,78,12],[102,6,79,8],[103,6,80,8,"target"],[103,12,80,14],[103,13,80,15,"key"],[103,16,80,18],[103,17,80,19],[103,20,80,22,"resolved"],[103,28,80,30],[104,6,81,8],[105,6,82,8],[106,6,83,8],[107,6,84,8],[107,10,84,12,"transitionEnd"],[107,23,84,25],[107,25,85,12],[107,26,85,13,"_b"],[107,28,85,15],[107,31,85,18,"transitionEnd"],[107,44,85,31],[107,45,85,32,"key"],[107,48,85,35],[107,49,85,36],[107,55,85,42],[107,59,85,46],[107,63,85,50,"_b"],[107,65,85,52],[107,70,85,57],[107,75,85,62],[107,76,85,63],[107,79,85,66,"_b"],[107,81,85,68],[107,84,85,72,"transitionEnd"],[107,97,85,85],[107,98,85,86,"key"],[107,101,85,89],[107,102,85,90],[107,105,85,93,"current"],[107,112,85,101],[108,4,86,4],[109,4,87,4],[109,11,87,11],[110,6,87,13,"target"],[110,12,87,19],[110,14,87,21,"target"],[110,20,87,27],[111,6,87,29,"transitionEnd"],[111,19,87,42],[111,21,87,44,"transitionEnd"],[112,4,87,58],[112,5,87,59],[113,2,88,0],[114,0,88,1],[114,3]],"functionMap":{"names":["<global>","isCSSVariable","parseCSSVariable","getVariableValue","resolveCSSVariables","visualElement.forEachValue$argument_0"],"mappings":"AAA;ACG;CDE;AEW;CFM;AGE;CHmB;AIM;+BCY;KDO;CJmB"},"hasCjsExports":false},"type":"js/module"}]}