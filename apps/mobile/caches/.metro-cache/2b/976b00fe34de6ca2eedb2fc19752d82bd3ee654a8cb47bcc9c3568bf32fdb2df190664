{"dependencies":[{"name":"./_SetCache","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":15,"index":15},"end":{"line":1,"column":37,"index":37}}],"key":"7LDztecx/xhtzoRe7SZ9nLr2o68=","exportNames":["*"]}},{"name":"./_arraySome","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":16,"index":55},"end":{"line":2,"column":39,"index":78}}],"key":"bZ5zOnn6rYhlkO2hEcvt9Jfy2YY=","exportNames":["*"]}},{"name":"./_cacheHas","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":15,"index":95},"end":{"line":3,"column":37,"index":117}}],"key":"38XtFdyJXaEmOjIZezhYMHmwVeo=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var SetCache = require(_dependencyMap[0], \"./_SetCache\"),\n    arraySome = require(_dependencyMap[1], \"./_arraySome\"),\n    cacheHas = require(_dependencyMap[2], \"./_cacheHas\");\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for arrays with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Array} array The array to compare.\n   * @param {Array} other The other array to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `array` and `other` objects.\n   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n   */\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false;\n    }\n    // Check that cyclic values are equal.\n    var arrStacked = stack.get(array);\n    var othStacked = stack.get(other);\n    if (arrStacked && othStacked) {\n      return arrStacked == other && othStacked == array;\n    }\n    var index = -1,\n      result = true,\n      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;\n    stack.set(array, other);\n    stack.set(other, array);\n\n    // Ignore non-index properties.\n    while (++index < arrLength) {\n      var arrValue = array[index],\n        othValue = other[index];\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n      }\n      if (compared !== undefined) {\n        if (compared) {\n          continue;\n        }\n        result = false;\n        break;\n      }\n      // Recursively compare arrays (susceptible to call stack limits).\n      if (seen) {\n        if (!arraySome(other, function (othValue, othIndex) {\n          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n            return seen.push(othIndex);\n          }\n        })) {\n          result = false;\n          break;\n        }\n      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n        result = false;\n        break;\n      }\n    }\n    stack['delete'](array);\n    stack['delete'](other);\n    return result;\n  }\n  module.exports = equalArrays;\n});","lineCount":76,"map":[[2,2,1,0],[2,6,1,4,"SetCache"],[2,14,1,12],[2,17,1,15,"require"],[2,24,1,22],[2,25,1,22,"_dependencyMap"],[2,39,1,22],[2,57,1,36],[2,58,1,37],[3,4,2,4,"arraySome"],[3,13,2,13],[3,16,2,16,"require"],[3,23,2,23],[3,24,2,23,"_dependencyMap"],[3,38,2,23],[3,57,2,38],[3,58,2,39],[4,4,3,4,"cacheHas"],[4,12,3,12],[4,15,3,15,"require"],[4,22,3,22],[4,23,3,22,"_dependencyMap"],[4,37,3,22],[4,55,3,36],[4,56,3,37],[6,2,5,0],[7,2,6,0],[7,6,6,4,"COMPARE_PARTIAL_FLAG"],[7,26,6,24],[7,29,6,27],[7,30,6,28],[8,4,7,4,"COMPARE_UNORDERED_FLAG"],[8,26,7,26],[8,29,7,29],[8,30,7,30],[10,2,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,2,22,0],[23,11,22,9,"equalArrays"],[23,22,22,20,"equalArrays"],[23,23,22,21,"array"],[23,28,22,26],[23,30,22,28,"other"],[23,35,22,33],[23,37,22,35,"bitmask"],[23,44,22,42],[23,46,22,44,"customizer"],[23,56,22,54],[23,58,22,56,"equalFunc"],[23,67,22,65],[23,69,22,67,"stack"],[23,74,22,72],[23,76,22,74],[24,4,23,2],[24,8,23,6,"isPartial"],[24,17,23,15],[24,20,23,18,"bitmask"],[24,27,23,25],[24,30,23,28,"COMPARE_PARTIAL_FLAG"],[24,50,23,48],[25,6,24,6,"arrLength"],[25,15,24,15],[25,18,24,18,"array"],[25,23,24,23],[25,24,24,24,"length"],[25,30,24,30],[26,6,25,6,"othLength"],[26,15,25,15],[26,18,25,18,"other"],[26,23,25,23],[26,24,25,24,"length"],[26,30,25,30],[27,4,27,2],[27,8,27,6,"arrLength"],[27,17,27,15],[27,21,27,19,"othLength"],[27,30,27,28],[27,34,27,32],[27,36,27,34,"isPartial"],[27,45,27,43],[27,49,27,47,"othLength"],[27,58,27,56],[27,61,27,59,"arrLength"],[27,70,27,68],[27,71,27,69],[27,73,27,71],[28,6,28,4],[28,13,28,11],[28,18,28,16],[29,4,29,2],[30,4,30,2],[31,4,31,2],[31,8,31,6,"arrStacked"],[31,18,31,16],[31,21,31,19,"stack"],[31,26,31,24],[31,27,31,25,"get"],[31,30,31,28],[31,31,31,29,"array"],[31,36,31,34],[31,37,31,35],[32,4,32,2],[32,8,32,6,"othStacked"],[32,18,32,16],[32,21,32,19,"stack"],[32,26,32,24],[32,27,32,25,"get"],[32,30,32,28],[32,31,32,29,"other"],[32,36,32,34],[32,37,32,35],[33,4,33,2],[33,8,33,6,"arrStacked"],[33,18,33,16],[33,22,33,20,"othStacked"],[33,32,33,30],[33,34,33,32],[34,6,34,4],[34,13,34,11,"arrStacked"],[34,23,34,21],[34,27,34,25,"other"],[34,32,34,30],[34,36,34,34,"othStacked"],[34,46,34,44],[34,50,34,48,"array"],[34,55,34,53],[35,4,35,2],[36,4,36,2],[36,8,36,6,"index"],[36,13,36,11],[36,16,36,14],[36,17,36,15],[36,18,36,16],[37,6,37,6,"result"],[37,12,37,12],[37,15,37,15],[37,19,37,19],[38,6,38,6,"seen"],[38,10,38,10],[38,13,38,14,"bitmask"],[38,20,38,21],[38,23,38,24,"COMPARE_UNORDERED_FLAG"],[38,45,38,46],[38,48,38,50],[38,52,38,54,"SetCache"],[38,60,38,62],[38,61,38,61],[38,62,38,62],[38,65,38,65,"undefined"],[38,74,38,74],[39,4,40,2,"stack"],[39,9,40,7],[39,10,40,8,"set"],[39,13,40,11],[39,14,40,12,"array"],[39,19,40,17],[39,21,40,19,"other"],[39,26,40,24],[39,27,40,25],[40,4,41,2,"stack"],[40,9,41,7],[40,10,41,8,"set"],[40,13,41,11],[40,14,41,12,"other"],[40,19,41,17],[40,21,41,19,"array"],[40,26,41,24],[40,27,41,25],[42,4,43,2],[43,4,44,2],[43,11,44,9],[43,13,44,11,"index"],[43,18,44,16],[43,21,44,19,"arrLength"],[43,30,44,28],[43,32,44,30],[44,6,45,4],[44,10,45,8,"arrValue"],[44,18,45,16],[44,21,45,19,"array"],[44,26,45,24],[44,27,45,25,"index"],[44,32,45,30],[44,33,45,31],[45,8,46,8,"othValue"],[45,16,46,16],[45,19,46,19,"other"],[45,24,46,24],[45,25,46,25,"index"],[45,30,46,30],[45,31,46,31],[46,6,48,4],[46,10,48,8,"customizer"],[46,20,48,18],[46,22,48,20],[47,8,49,6],[47,12,49,10,"compared"],[47,20,49,18],[47,23,49,21,"isPartial"],[47,32,49,30],[47,35,50,10,"customizer"],[47,45,50,20],[47,46,50,21,"othValue"],[47,54,50,29],[47,56,50,31,"arrValue"],[47,64,50,39],[47,66,50,41,"index"],[47,71,50,46],[47,73,50,48,"other"],[47,78,50,53],[47,80,50,55,"array"],[47,85,50,60],[47,87,50,62,"stack"],[47,92,50,67],[47,93,50,68],[47,96,51,10,"customizer"],[47,106,51,20],[47,107,51,21,"arrValue"],[47,115,51,29],[47,117,51,31,"othValue"],[47,125,51,39],[47,127,51,41,"index"],[47,132,51,46],[47,134,51,48,"array"],[47,139,51,53],[47,141,51,55,"other"],[47,146,51,60],[47,148,51,62,"stack"],[47,153,51,67],[47,154,51,68],[48,6,52,4],[49,6,53,4],[49,10,53,8,"compared"],[49,18,53,16],[49,23,53,21,"undefined"],[49,32,53,30],[49,34,53,32],[50,8,54,6],[50,12,54,10,"compared"],[50,20,54,18],[50,22,54,20],[51,10,55,8],[52,8,56,6],[53,8,57,6,"result"],[53,14,57,12],[53,17,57,15],[53,22,57,20],[54,8,58,6],[55,6,59,4],[56,6,60,4],[57,6,61,4],[57,10,61,8,"seen"],[57,14,61,12],[57,16,61,14],[58,8,62,6],[58,12,62,10],[58,13,62,11,"arraySome"],[58,22,62,20],[58,23,62,21,"other"],[58,28,62,26],[58,30,62,28],[58,40,62,37,"othValue"],[58,48,62,45],[58,50,62,47,"othIndex"],[58,58,62,55],[58,60,62,57],[59,10,63,12],[59,14,63,16],[59,15,63,17,"cacheHas"],[59,23,63,25],[59,24,63,26,"seen"],[59,28,63,30],[59,30,63,32,"othIndex"],[59,38,63,40],[59,39,63,41],[59,44,64,17,"arrValue"],[59,52,64,25],[59,57,64,30,"othValue"],[59,65,64,38],[59,69,64,42,"equalFunc"],[59,78,64,51],[59,79,64,52,"arrValue"],[59,87,64,60],[59,89,64,62,"othValue"],[59,97,64,70],[59,99,64,72,"bitmask"],[59,106,64,79],[59,108,64,81,"customizer"],[59,118,64,91],[59,120,64,93,"stack"],[59,125,64,98],[59,126,64,99],[59,127,64,100],[59,129,64,102],[60,12,65,14],[60,19,65,21,"seen"],[60,23,65,25],[60,24,65,26,"push"],[60,28,65,30],[60,29,65,31,"othIndex"],[60,37,65,39],[60,38,65,40],[61,10,66,12],[62,8,67,10],[62,9,67,11],[62,10,67,12],[62,12,67,14],[63,10,68,8,"result"],[63,16,68,14],[63,19,68,17],[63,24,68,22],[64,10,69,8],[65,8,70,6],[66,6,71,4],[66,7,71,5],[66,13,71,11],[66,17,71,15],[66,19,72,10,"arrValue"],[66,27,72,18],[66,32,72,23,"othValue"],[66,40,72,31],[66,44,73,12,"equalFunc"],[66,53,73,21],[66,54,73,22,"arrValue"],[66,62,73,30],[66,64,73,32,"othValue"],[66,72,73,40],[66,74,73,42,"bitmask"],[66,81,73,49],[66,83,73,51,"customizer"],[66,93,73,61],[66,95,73,63,"stack"],[66,100,73,68],[66,101,73,69],[66,102,74,9],[66,104,74,11],[67,8,75,6,"result"],[67,14,75,12],[67,17,75,15],[67,22,75,20],[68,8,76,6],[69,6,77,4],[70,4,78,2],[71,4,79,2,"stack"],[71,9,79,7],[71,10,79,8],[71,18,79,16],[71,19,79,17],[71,20,79,18,"array"],[71,25,79,23],[71,26,79,24],[72,4,80,2,"stack"],[72,9,80,7],[72,10,80,8],[72,18,80,16],[72,19,80,17],[72,20,80,18,"other"],[72,25,80,23],[72,26,80,24],[73,4,81,2],[73,11,81,9,"result"],[73,17,81,15],[74,2,82,0],[75,2,84,0,"module"],[75,8,84,6],[75,9,84,7,"exports"],[75,16,84,14],[75,19,84,17,"equalArrays"],[75,30,84,28],[76,0,84,29],[76,3]],"functionMap":{"names":["<global>","equalArrays","arraySome$argument_1"],"mappings":"AAA;ACqB;4BCwC;WDK;CDe"}},"type":"js/module"}]}