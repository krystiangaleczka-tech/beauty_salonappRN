{"dependencies":[{"name":"./_memoizeCapped","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":20,"index":20},"end":{"line":1,"column":47,"index":47}}],"key":"FJAz8+XnhPl8duu6ZOWNAVPX6k4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var memoizeCapped = require(_dependencyMap[0], \"./_memoizeCapped\");\n\n  /** Used to match property names within property paths. */\n  var rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Converts `string` to a property path array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the property path array.\n   */\n  var stringToPath = memoizeCapped(function (string) {\n    var result = [];\n    if (string.charCodeAt(0) === 46 /* . */) {\n      result.push('');\n    }\n    string.replace(rePropName, function (match, number, quote, subString) {\n      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);\n    });\n    return result;\n  });\n  module.exports = stringToPath;\n});","lineCount":28,"map":[[2,2,1,0],[2,6,1,4,"memoizeCapped"],[2,19,1,17],[2,22,1,20,"require"],[2,29,1,27],[2,30,1,27,"_dependencyMap"],[2,44,1,27],[2,67,1,46],[2,68,1,47],[4,2,3,0],[5,2,4,0],[5,6,4,4,"rePropName"],[5,16,4,14],[5,19,4,17],[5,117,4,115],[7,2,6,0],[8,2,7,0],[8,6,7,4,"reEscapeChar"],[8,18,7,16],[8,21,7,19],[8,31,7,29],[10,2,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,2,16,0],[17,6,16,4,"stringToPath"],[17,18,16,16],[17,21,16,19,"memoizeCapped"],[17,34,16,32],[17,35,16,33],[17,45,16,42,"string"],[17,51,16,48],[17,53,16,50],[18,4,17,2],[18,8,17,6,"result"],[18,14,17,12],[18,17,17,15],[18,19,17,17],[19,4,18,2],[19,8,18,6,"string"],[19,14,18,12],[19,15,18,13,"charCodeAt"],[19,25,18,23],[19,26,18,24],[19,27,18,25],[19,28,18,26],[19,33,18,31],[19,35,18,33],[19,36,18,34],[19,45,18,43],[20,6,19,4,"result"],[20,12,19,10],[20,13,19,11,"push"],[20,17,19,15],[20,18,19,16],[20,20,19,18],[20,21,19,19],[21,4,20,2],[22,4,21,2,"string"],[22,10,21,8],[22,11,21,9,"replace"],[22,18,21,16],[22,19,21,17,"rePropName"],[22,29,21,27],[22,31,21,29],[22,41,21,38,"match"],[22,46,21,43],[22,48,21,45,"number"],[22,54,21,51],[22,56,21,53,"quote"],[22,61,21,58],[22,63,21,60,"subString"],[22,72,21,69],[22,74,21,71],[23,6,22,4,"result"],[23,12,22,10],[23,13,22,11,"push"],[23,17,22,15],[23,18,22,16,"quote"],[23,23,22,21],[23,26,22,24,"subString"],[23,35,22,33],[23,36,22,34,"replace"],[23,43,22,41],[23,44,22,42,"reEscapeChar"],[23,56,22,54],[23,58,22,56],[23,62,22,60],[23,63,22,61],[23,66,22,65,"number"],[23,72,22,71],[23,76,22,75,"match"],[23,81,22,81],[23,82,22,82],[24,4,23,2],[24,5,23,3],[24,6,23,4],[25,4,24,2],[25,11,24,9,"result"],[25,17,24,15],[26,2,25,0],[26,3,25,1],[26,4,25,2],[27,2,27,0,"module"],[27,8,27,6],[27,9,27,7,"exports"],[27,16,27,14],[27,19,27,17,"stringToPath"],[27,31,27,29],[28,0,27,30],[28,3]],"functionMap":{"names":["<global>","memoizeCapped$argument_0","string.replace$argument_1"],"mappings":"AAA;iCCe;6BCK;GDE;CDE"},"hasCjsExports":true},"type":"js/module"}]}