{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var safeIsNaN = Number.isNaN || function ponyfill(value) {\n    return typeof value === 'number' && value !== value;\n  };\n  function isEqual(first, second) {\n    if (first === second) {\n      return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n      return true;\n    }\n    return false;\n  }\n  function areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n      return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n      if (!isEqual(newInputs[i], lastInputs[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) {\n      isEqual = areInputsEqual;\n    }\n    var lastThis;\n    var lastArgs = [];\n    var lastResult;\n    var calledOnce = false;\n    function memoized() {\n      var newArgs = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        newArgs[_i] = arguments[_i];\n      }\n      if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n        return lastResult;\n      }\n      lastResult = resultFn.apply(this, newArgs);\n      calledOnce = true;\n      lastThis = this;\n      lastArgs = newArgs;\n      return lastResult;\n    }\n    return memoized;\n  }\n  var _default = exports.default = memoizeOne;\n});","lineCount":54,"map":[[6,2,1,0],[6,6,1,4,"safeIsNaN"],[6,15,1,13],[6,18,1,16,"Number"],[6,24,1,22],[6,25,1,23,"isNaN"],[6,30,1,28],[6,34,2,4],[6,43,2,13,"ponyfill"],[6,51,2,21,"ponyfill"],[6,52,2,22,"value"],[6,57,2,27],[6,59,2,29],[7,4,3,8],[7,11,3,15],[7,18,3,22,"value"],[7,23,3,27],[7,28,3,32],[7,36,3,40],[7,40,3,44,"value"],[7,45,3,49],[7,50,3,54,"value"],[7,55,3,59],[8,2,4,4],[8,3,4,5],[9,2,5,0],[9,11,5,9,"isEqual"],[9,18,5,16,"isEqual"],[9,19,5,17,"first"],[9,24,5,22],[9,26,5,24,"second"],[9,32,5,30],[9,34,5,32],[10,4,6,4],[10,8,6,8,"first"],[10,13,6,13],[10,18,6,18,"second"],[10,24,6,24],[10,26,6,26],[11,6,7,8],[11,13,7,15],[11,17,7,19],[12,4,8,4],[13,4,9,4],[13,8,9,8,"safeIsNaN"],[13,17,9,17],[13,18,9,18,"first"],[13,23,9,23],[13,24,9,24],[13,28,9,28,"safeIsNaN"],[13,37,9,37],[13,38,9,38,"second"],[13,44,9,44],[13,45,9,45],[13,47,9,47],[14,6,10,8],[14,13,10,15],[14,17,10,19],[15,4,11,4],[16,4,12,4],[16,11,12,11],[16,16,12,16],[17,2,13,0],[18,2,14,0],[18,11,14,9,"areInputsEqual"],[18,25,14,23,"areInputsEqual"],[18,26,14,24,"newInputs"],[18,35,14,33],[18,37,14,35,"lastInputs"],[18,47,14,45],[18,49,14,47],[19,4,15,4],[19,8,15,8,"newInputs"],[19,17,15,17],[19,18,15,18,"length"],[19,24,15,24],[19,29,15,29,"lastInputs"],[19,39,15,39],[19,40,15,40,"length"],[19,46,15,46],[19,48,15,48],[20,6,16,8],[20,13,16,15],[20,18,16,20],[21,4,17,4],[22,4,18,4],[22,9,18,9],[22,13,18,13,"i"],[22,14,18,14],[22,17,18,17],[22,18,18,18],[22,20,18,20,"i"],[22,21,18,21],[22,24,18,24,"newInputs"],[22,33,18,33],[22,34,18,34,"length"],[22,40,18,40],[22,42,18,42,"i"],[22,43,18,43],[22,45,18,45],[22,47,18,47],[23,6,19,8],[23,10,19,12],[23,11,19,13,"isEqual"],[23,18,19,20],[23,19,19,21,"newInputs"],[23,28,19,30],[23,29,19,31,"i"],[23,30,19,32],[23,31,19,33],[23,33,19,35,"lastInputs"],[23,43,19,45],[23,44,19,46,"i"],[23,45,19,47],[23,46,19,48],[23,47,19,49],[23,49,19,51],[24,8,20,12],[24,15,20,19],[24,20,20,24],[25,6,21,8],[26,4,22,4],[27,4,23,4],[27,11,23,11],[27,15,23,15],[28,2,24,0],[29,2,26,0],[29,11,26,9,"memoizeOne"],[29,21,26,19,"memoizeOne"],[29,22,26,20,"resultFn"],[29,30,26,28],[29,32,26,30,"isEqual"],[29,39,26,37],[29,41,26,39],[30,4,27,4],[30,8,27,8,"isEqual"],[30,15,27,15],[30,20,27,20],[30,25,27,25],[30,26,27,26],[30,28,27,28],[31,6,27,30,"isEqual"],[31,13,27,37],[31,16,27,40,"areInputsEqual"],[31,30,27,54],[32,4,27,56],[33,4,28,4],[33,8,28,8,"lastThis"],[33,16,28,16],[34,4,29,4],[34,8,29,8,"lastArgs"],[34,16,29,16],[34,19,29,19],[34,21,29,21],[35,4,30,4],[35,8,30,8,"lastResult"],[35,18,30,18],[36,4,31,4],[36,8,31,8,"calledOnce"],[36,18,31,18],[36,21,31,21],[36,26,31,26],[37,4,32,4],[37,13,32,13,"memoized"],[37,21,32,21,"memoized"],[37,22,32,21],[37,24,32,24],[38,6,33,8],[38,10,33,12,"newArgs"],[38,17,33,19],[38,20,33,22],[38,22,33,24],[39,6,34,8],[39,11,34,13],[39,15,34,17,"_i"],[39,17,34,19],[39,20,34,22],[39,21,34,23],[39,23,34,25,"_i"],[39,25,34,27],[39,28,34,30,"arguments"],[39,37,34,39],[39,38,34,40,"length"],[39,44,34,46],[39,46,34,48,"_i"],[39,48,34,50],[39,50,34,52],[39,52,34,54],[40,8,35,12,"newArgs"],[40,15,35,19],[40,16,35,20,"_i"],[40,18,35,22],[40,19,35,23],[40,22,35,26,"arguments"],[40,31,35,35],[40,32,35,36,"_i"],[40,34,35,38],[40,35,35,39],[41,6,36,8],[42,6,37,8],[42,10,37,12,"calledOnce"],[42,20,37,22],[42,24,37,26,"lastThis"],[42,32,37,34],[42,37,37,39],[42,41,37,43],[42,45,37,47,"isEqual"],[42,52,37,54],[42,53,37,55,"newArgs"],[42,60,37,62],[42,62,37,64,"lastArgs"],[42,70,37,72],[42,71,37,73],[42,73,37,75],[43,8,38,12],[43,15,38,19,"lastResult"],[43,25,38,29],[44,6,39,8],[45,6,40,8,"lastResult"],[45,16,40,18],[45,19,40,21,"resultFn"],[45,27,40,29],[45,28,40,30,"apply"],[45,33,40,35],[45,34,40,36],[45,38,40,40],[45,40,40,42,"newArgs"],[45,47,40,49],[45,48,40,50],[46,6,41,8,"calledOnce"],[46,16,41,18],[46,19,41,21],[46,23,41,25],[47,6,42,8,"lastThis"],[47,14,42,16],[47,17,42,19],[47,21,42,23],[48,6,43,8,"lastArgs"],[48,14,43,16],[48,17,43,19,"newArgs"],[48,24,43,26],[49,6,44,8],[49,13,44,15,"lastResult"],[49,23,44,25],[50,4,45,4],[51,4,46,4],[51,11,46,11,"memoized"],[51,19,46,19],[52,2,47,0],[53,2,47,1],[53,6,47,1,"_default"],[53,14,47,1],[53,17,47,1,"exports"],[53,24,47,1],[53,25,47,1,"default"],[53,32,47,1],[53,35,49,15,"memoizeOne"],[53,45,49,25],[54,0,49,25],[54,3]],"functionMap":{"names":["<global>","ponyfill","isEqual","areInputsEqual","memoizeOne","memoized"],"mappings":"AAA;ICC;KDE;AEC;CFQ;AGC;CHU;AIE;ICM;KDa;CJE"}},"type":"js/module"}]}